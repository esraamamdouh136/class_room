"use strict";
var ɵngcc0 = require('@angular/core');
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var i0 = require("@angular/core");
var InlineSVGService = (function () {
    function InlineSVGService(rendererFactory) {
        this._ranScripts = {};
        this._renderer = rendererFactory.createRenderer(null, null);
    }
    InlineSVGService.prototype.insertEl = function (dir, parentEl, content, replaceContents, prepend) {
        if (replaceContents && !prepend) {
            var parentNode = dir._prevSVG && dir._prevSVG.parentNode;
            if (parentNode) {
                this._renderer.removeChild(parentNode, dir._prevSVG);
            }
            parentEl.innerHTML = '';
        }
        if (prepend) {
            this._renderer.insertBefore(parentEl, content, parentEl.firstChild);
        }
        else {
            this._renderer.appendChild(parentEl, content);
        }
        if (content.nodeName === 'svg') {
            dir._prevSVG = content;
        }
    };
    InlineSVGService.prototype.evalScripts = function (svg, url, evalMode) {
        var scripts = svg.querySelectorAll('script');
        var scriptsToEval = [];
        for (var i = 0; i < scripts.length; i++) {
            var scriptType = scripts[i].getAttribute('type');
            if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {
                var script = scripts[i].innerText || scripts[i].textContent;
                scriptsToEval.push(script);
                this._renderer.removeChild(scripts[i].parentNode, scripts[i]);
            }
        }
        if (scriptsToEval.length > 0 && (evalMode === "always" ||
            (evalMode === "once" && !this._ranScripts[url]))) {
            for (var i = 0; i < scriptsToEval.length; i++) {
                new Function(scriptsToEval[i])(window);
            }
            this._ranScripts[url] = true;
        }
    };
    InlineSVGService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function InlineSVGService_Factory() { return new InlineSVGService(i0.ɵɵinject(i0.RendererFactory2)); }, token: InlineSVGService, providedIn: "root" });
    InlineSVGService = __decorate([ __metadata("design:paramtypes", [core_1.RendererFactory2])
    ], InlineSVGService);
InlineSVGService.ɵfac = function InlineSVGService_Factory(t) { return new (t || InlineSVGService)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2)); };
InlineSVGService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: InlineSVGService, factory: function (t) { return InlineSVGService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InlineSVGService, [{
        type: core_1.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.RendererFactory2 }]; }, null); })();
    return InlineSVGService;
}());
exports.InlineSVGService = InlineSVGService;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLXN2Zy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJpbmxpbmUtc3ZnLnNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FJTztBQUNQOzs7Ozs7OztpRkFBeUI7QUFDekI7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIGkwID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgSW5saW5lU1ZHU2VydmljZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW5saW5lU1ZHU2VydmljZShyZW5kZXJlckZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5fcmFuU2NyaXB0cyA9IHt9O1xuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcbiAgICB9XG4gICAgSW5saW5lU1ZHU2VydmljZS5wcm90b3R5cGUuaW5zZXJ0RWwgPSBmdW5jdGlvbiAoZGlyLCBwYXJlbnRFbCwgY29udGVudCwgcmVwbGFjZUNvbnRlbnRzLCBwcmVwZW5kKSB7XG4gICAgICAgIGlmIChyZXBsYWNlQ29udGVudHMgJiYgIXByZXBlbmQpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gZGlyLl9wcmV2U1ZHICYmIGRpci5fcHJldlNWRy5wYXJlbnROb2RlO1xuICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDaGlsZChwYXJlbnROb2RlLCBkaXIuX3ByZXZTVkcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50RWwuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXBlbmQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmluc2VydEJlZm9yZShwYXJlbnRFbCwgY29udGVudCwgcGFyZW50RWwuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5hcHBlbmRDaGlsZChwYXJlbnRFbCwgY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRlbnQubm9kZU5hbWUgPT09ICdzdmcnKSB7XG4gICAgICAgICAgICBkaXIuX3ByZXZTVkcgPSBjb250ZW50O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbmxpbmVTVkdTZXJ2aWNlLnByb3RvdHlwZS5ldmFsU2NyaXB0cyA9IGZ1bmN0aW9uIChzdmcsIHVybCwgZXZhbE1vZGUpIHtcbiAgICAgICAgdmFyIHNjcmlwdHMgPSBzdmcucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0Jyk7XG4gICAgICAgIHZhciBzY3JpcHRzVG9FdmFsID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNjcmlwdFR5cGUgPSBzY3JpcHRzW2ldLmdldEF0dHJpYnV0ZSgndHlwZScpO1xuICAgICAgICAgICAgaWYgKCFzY3JpcHRUeXBlIHx8IHNjcmlwdFR5cGUgPT09ICdhcHBsaWNhdGlvbi9lY21hc2NyaXB0JyB8fCBzY3JpcHRUeXBlID09PSAnYXBwbGljYXRpb24vamF2YXNjcmlwdCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NyaXB0ID0gc2NyaXB0c1tpXS5pbm5lclRleHQgfHwgc2NyaXB0c1tpXS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICBzY3JpcHRzVG9FdmFsLnB1c2goc2NyaXB0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDaGlsZChzY3JpcHRzW2ldLnBhcmVudE5vZGUsIHNjcmlwdHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzY3JpcHRzVG9FdmFsLmxlbmd0aCA+IDAgJiYgKGV2YWxNb2RlID09PSBcImFsd2F5c1wiIHx8XG4gICAgICAgICAgICAoZXZhbE1vZGUgPT09IFwib25jZVwiICYmICF0aGlzLl9yYW5TY3JpcHRzW3VybF0pKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY3JpcHRzVG9FdmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbmV3IEZ1bmN0aW9uKHNjcmlwdHNUb0V2YWxbaV0pKHdpbmRvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9yYW5TY3JpcHRzW3VybF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbmxpbmVTVkdTZXJ2aWNlLm5nSW5qZWN0YWJsZURlZiA9IGkwLsm1ybVkZWZpbmVJbmplY3RhYmxlKHsgZmFjdG9yeTogZnVuY3Rpb24gSW5saW5lU1ZHU2VydmljZV9GYWN0b3J5KCkgeyByZXR1cm4gbmV3IElubGluZVNWR1NlcnZpY2UoaTAuybXJtWluamVjdChpMC5SZW5kZXJlckZhY3RvcnkyKSk7IH0sIHRva2VuOiBJbmxpbmVTVkdTZXJ2aWNlLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcbiAgICBJbmxpbmVTVkdTZXJ2aWNlID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbmplY3RhYmxlKHtcbiAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290J1xuICAgICAgICB9KSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtjb3JlXzEuUmVuZGVyZXJGYWN0b3J5Ml0pXG4gICAgXSwgSW5saW5lU1ZHU2VydmljZSk7XG4gICAgcmV0dXJuIElubGluZVNWR1NlcnZpY2U7XG59KCkpO1xuZXhwb3J0cy5JbmxpbmVTVkdTZXJ2aWNlID0gSW5saW5lU1ZHU2VydmljZTtcbiJdfQ==