{"version":3,"file":"ag-grid-column.component.d.ts","sources":["ag-grid-column.component.d.ts"],"names":[],"mappingssourcesContent":["import { CellClassFunc, CellClassRules, CellClickedEvent, CellContextMenuEvent, CellDoubleClickedEvent, CellEditorSelectorFunc, CellRendererSelectorFunc, CellStyleFunc, CheckboxSelectionCallback, ColDef, ColGroupDef, ColSpanParams, ColumnsMenuParams, DndSourceCallback, EditableCallback, GetQuickFilterTextParams, HeaderCheckboxSelectionCallback, HeaderClass, IAggFunc, ICellEditorComp, ICellRendererComp, ICellRendererFunc, IHeaderGroupComp, IRowDragItem, ITooltipComp, ITooltipParams, NewValueParams, RowDragCallback, RowNode, RowSpanParams, SuppressHeaderKeyboardEventParams, SuppressKeyboardEventParams, SuppressNavigableCallback, SuppressPasteCallback, ToolPanelClass, ValueFormatterFunc, ValueGetterFunc, ValueParserFunc, ValueSetterFunc } from \"ag-grid-community\";\nimport { QueryList } from \"@angular/core\";\nexport declare class AgGridColumn {\n    childColumns: QueryList<AgGridColumn>;\n    hasChildColumns(): boolean;\n    toColDef(): ColDef;\n    private getChildColDefs;\n    private createColDefFromGridColumn;\n    /** Columns in this group     */\n    children: (ColDef | ColGroupDef)[] | undefined;\n    /** The sort order, provide an array with any of the following in any order ['asc','desc',null]     */\n    sortingOrder: (string | null)[] | undefined;\n    /** Agg funcs allowed on this column. If missing, all installed agg funcs are allowed.\n     * Can be eg ['sum','avg']. This will restrict what the GUI allows to select only.     */\n    allowedAggFuncs: string[] | undefined;\n    /** The menu tabs to show, and in which order, the valid values for this property are:\n     * filterMenuTab, generalMenuTab, columnsMenuTab     *     */\n    menuTabs: string[] | undefined;\n    /** Rules for applying css classes     */\n    cellClassRules: CellClassRules | undefined;\n    /** Icons for this column. Leave blank to use default.     */\n    icons: {\n        [key: string]: Function | string;\n    } | undefined;\n    /** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used*     */\n    headerGroupComponent: string | {\n        new (): IHeaderGroupComp;\n    } | undefined;\n    /** The custom header group component to be used for rendering the component header in the hosting framework (ie: React/Angular). If none specified the default AG Grid is used*     */\n    headerGroupComponentFramework: any | undefined;\n    /** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used*     */\n    headerGroupComponentParams: any | undefined;\n    /** An object of css values. Or a function returning an object of css values.     */\n    cellStyle: {\n        [cssProperty: string]: string;\n    } | CellStyleFunc | undefined;\n    cellRendererParams: any | undefined;\n    cellEditorFramework: any | undefined;\n    cellEditorParams: any | undefined;\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n     */\n    pinnedRowCellRendererFramework: any | undefined;\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n     */\n    pinnedRowCellRendererParams: any | undefined;\n    filterFramework: any;\n    filterParams: any;\n    /** The custom header component to be used for rendering the component header. If none specified the default AG Grid is used*     */\n    headerComponent: string | {\n        new (): any;\n    } | undefined;\n    /** The custom header component to be used for rendering the component header in the hosting framework (ie: React/Angular). If none specified the default AG Grid is used*     */\n    headerComponentFramework: any | undefined;\n    /** The custom header component parameters*     */\n    headerComponentParams: any | undefined;\n    floatingFilterComponent: any;\n    floatingFilterComponentParams: any;\n    floatingFilterComponentFramework: any;\n    tooltipComponent: {\n        new (): ITooltipComp;\n    } | string | undefined;\n    tooltipComponentParams: any | undefined;\n    tooltipComponentFramework: any | undefined;\n    refData: {\n        [key: string]: string;\n    } | undefined;\n    /** Params to customise the columns menu behaviour and appearance     */\n    columnsMenuParams: ColumnsMenuParams | undefined;\n    /** The name to render in the column header     */\n    headerName: string | undefined;\n    /** Whether to show the column when the group is open / closed.     */\n    columnGroupShow: string | undefined;\n    /** CSS class for the header     */\n    headerClass: HeaderClass | undefined;\n    /** CSS class for the toolPanel     */\n    toolPanelClass: ToolPanelClass | undefined;\n    /** Expression or function to get the cells value.     */\n    headerValueGetter: string | Function | undefined;\n    /** Group ID     */\n    groupId: string | undefined;\n    /** The unique ID to give the column. This is optional. If missing, the ID will default to the field.\n     * If both field and colId are missing, a unique ID will be generated.\n     * This ID is used to identify the column in the API for sorting, filtering etc.     */\n    colId: string | undefined;\n    /** If sorting by default, set it here. Set to 'asc' or 'desc'     */\n    sort: string | null | undefined;\n    initialSort: string | undefined;\n    /** The field of the row to get the cells data from     */\n    field: string | undefined;\n    /** A comma separated string or array of strings containing ColumnType keys which can be used as a template for a column.\n     * This helps to reduce duplication of properties when you have a lot of common column properties.     */\n    type: string | string[] | undefined;\n    /** The field where we get the tooltip on the object     */\n    tooltipField: string | undefined;\n    /** Tooltip for the column header     */\n    headerTooltip: string | undefined;\n    /** Class to use for the cell. Can be string, array of strings, or function.     */\n    cellClass: string | string[] | CellClassFunc | undefined;\n    /** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group.     */\n    showRowGroup: string | boolean | undefined;\n    filter: any;\n    initialAggFunc: string | IAggFunc | undefined;\n    /** Name of function to use for aggregation. One of [sum,min,max,first,last] or a function.     */\n    aggFunc: string | IAggFunc | null | undefined;\n    /** A function for rendering a cell.     */\n    cellRenderer: {\n        new (): ICellRendererComp;\n    } | ICellRendererFunc | string | undefined;\n    /** Cell editor     */\n    cellEditor: string | {\n        new (): ICellEditorComp;\n    } | undefined;\n    /** Whether this column is pinned or not.     */\n    pinned: boolean | string | null | undefined;\n    initialPinned: boolean | string | undefined;\n    /** Defines the column data type used when charting     */\n    chartDataType: 'category' | 'series' | 'time' | 'excluded' | undefined;\n    cellEditorPopupPosition: string | undefined;\n    /** @deprecated since v24 - use sortIndex instead\n     */\n    sortedAt: number | undefined;\n    /** If sorting more than one column by default, specifies order in which the sorting should be applied.     */\n    sortIndex: number | null | undefined;\n    initialSortIndex: number | undefined;\n    /** Sets the grow factor of a column. It specifies how much of the remaining\n     * space should be assigned to the column.     */\n    flex: number | undefined;\n    initialFlex: number | undefined;\n    /** Actual width, in pixels, of the cell     */\n    width: number | undefined;\n    /** Default width, in pixels, of the cell     */\n    initialWidth: number | undefined;\n    /** Min width, in pixels, of the cell     */\n    minWidth: number | undefined;\n    /** Max width, in pixels, of the cell     */\n    maxWidth: number | undefined;\n    /** To group by this column by default, either provide an index (eg rowGroupIndex=1), or set rowGroup=true.     */\n    rowGroupIndex: number | null | undefined;\n    initialRowGroupIndex: number | undefined;\n    /** To pivot by this column by default, either provide an index (eg pivotIndex=1), or set pivot=true.     */\n    pivotIndex: number | null | undefined;\n    initialPivotIndex: number | undefined;\n    /** For native drag and drop, set to true to allow custom onRowDrag processing     */\n    dndSourceOnRowDrag: (params: {\n        rowNode: RowNode;\n        dragEvent: DragEvent;\n    }) => void | undefined;\n    /** Expression or function to get the cells value.     */\n    valueGetter: string | ValueGetterFunc | undefined;\n    /** If not using a field, then this puts the value into the cell     */\n    valueSetter: string | ValueSetterFunc | undefined;\n    /** Expression or function to get the cells value for filtering.     */\n    filterValueGetter: string | ValueGetterFunc | undefined;\n    /** Function to return the key for a value - use this if the value is an object (not a primitive type) and you\n     * want to a) group by this field or b) use set filter on this field.     */\n    keyCreator: (value: any) => string | undefined;\n    cellRendererFramework: any | undefined;\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n     */\n    pinnedRowCellRenderer: {\n        new (): ICellRendererComp;\n    } | ICellRendererFunc | string | undefined;\n    /** A function to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering.     */\n    valueFormatter: string | ValueFormatterFunc | undefined;\n    /** @deprecated Use valueFormatter for pinned rows, and check params.node.rowPinned.\n     */\n    pinnedRowValueFormatter: string | ValueFormatterFunc | undefined;\n    /** Gets called after editing, converts the value in the cell.     */\n    valueParser: string | ValueParserFunc | undefined;\n    /** Comparator function for custom sorting.     */\n    comparator: (valueA: any, valueB: any, nodeA: RowNode, nodeB: RowNode, isInverted: boolean) => number | undefined;\n    /** Comparator for values, used by renderer to know if values have changed. Cells who's values have not changed don't get refreshed.     */\n    equals: (valueA: any, valueB: any) => boolean | undefined;\n    /** Comparator for ordering the pivot columns     */\n    pivotComparator: (valueA: string, valueB: string) => number | undefined;\n    /** Allows the user to suppress certain keyboard events in the grid cell     */\n    suppressKeyboardEvent: (params: SuppressKeyboardEventParams) => boolean | undefined;\n    /** Allows the user to suppress certain keyboard events in the grid header     */\n    suppressHeaderKeyboardEvent: (params: SuppressHeaderKeyboardEventParams) => boolean | undefined;\n    colSpan: (params: ColSpanParams) => number | undefined;\n    rowSpan: (params: RowSpanParams) => number | undefined;\n    /** To create the quick filter text for this column, if toString is not good enough on the value.     */\n    getQuickFilterText: (params: GetQuickFilterTextParams) => string | undefined;\n    /** Callbacks for editing. See editing section for further details.\n     * Return true if the update was successful, or false if not.\n     * If false, then skips the UI refresh and no events are emitted.\n     * Return false if the values are the same (ie no update).     */\n    newValueHandler: (params: NewValueParams) => boolean | undefined;\n    /** Callbacks for editing.See editing section for further details.     */\n    onCellValueChanged: (event: NewValueParams) => void | undefined;\n    /** Function callback, gets called when a cell is clicked.     */\n    onCellClicked: (event: CellClickedEvent) => void | undefined;\n    /** Function callback, gets called when a cell is double clicked.     */\n    onCellDoubleClicked: (event: CellDoubleClickedEvent) => void | undefined;\n    /** Function callback, gets called when a cell is right clicked.     */\n    onCellContextMenu: (event: CellContextMenuEvent) => void | undefined;\n    /** To configure the text to be displayed in the floating div while dragging a row when rowDrag is true     */\n    rowDragText: (params: IRowDragItem, dragItemCount: number) => string | undefined;\n    /** The function used to calculate the tooltip of the object, tooltipField takes precedence     */\n    tooltipValueGetter: (params: ITooltipParams) => string | undefined;\n    cellRendererSelector: CellRendererSelectorFunc | undefined;\n    cellEditorSelector: CellEditorSelectorFunc | undefined;\n    /** Set to true to not flash this column for value changes     */\n    suppressCellFlash: boolean | undefined;\n    /** Set to true to not include this column in the Columns Tool Panel     */\n    suppressColumnsToolPanel: boolean | undefined;\n    /** Set to true to not include this column / filter in the Filters Tool Panel     */\n    suppressFiltersToolPanel: boolean | undefined;\n    /** Open by Default     */\n    openByDefault: boolean | undefined;\n    /** If true, group cannot be broken up by column moving, child columns will always appear side by side, however you can rearrange child columns within the group     */\n    marryChildren: boolean | undefined;\n    /** Set to true for this column to be hidden. Naturally you might think, it would make more sense to call this field 'visible' and mark it false to hide,\n     * however we want all default values to be false and we want columns to be visible by default.     */\n    hide: boolean | undefined;\n    initialHide: boolean | undefined;\n    rowGroup: boolean | undefined;\n    initialRowGroup: boolean | undefined;\n    pivot: boolean | undefined;\n    initialPivot: boolean | undefined;\n    /** Set to true to render a selection checkbox in the column.     */\n    checkboxSelection: boolean | CheckboxSelectionCallback | undefined;\n    /** If true, a 'select all' checkbox will be put into the header     */\n    headerCheckboxSelection: boolean | HeaderCheckboxSelectionCallback | undefined;\n    /** If true, the header checkbox selection will work on filtered items     */\n    headerCheckboxSelectionFilteredOnly: boolean | undefined;\n    /** Set to true if no menu should be shown for this column header.     */\n    suppressMenu: boolean | undefined;\n    /** Set to true to not allow moving this column via dragging it's header     */\n    suppressMovable: boolean | undefined;\n    /** Set to true to make sure this column is always first. Other columns, if movable, cannot move before this column.     */\n    lockPosition: boolean | undefined;\n    /** Set to true to block the user showing / hiding the column, the column can only be shown / hidden via definitions or API     */\n    lockVisible: boolean | undefined;\n    /** Set to true to block the user pinning the column, the column can only be pinned via definitions or API     */\n    lockPinned: boolean | undefined;\n    /** Set to true if you want the unsorted icon to be shown when no sort is applied to this column.     */\n    unSortIcon: boolean | undefined;\n    /** Set to true if you want this columns width to be fixed during 'size to fit' operation.     */\n    suppressSizeToFit: boolean | undefined;\n    /** Set to true if you do not want this column to be auto-resizable by double clicking it's edge.     */\n    suppressAutoSize: boolean | undefined;\n    /** If true, GUI will allow adding this columns as a row group     */\n    enableRowGroup: boolean | undefined;\n    /** If true, GUI will allow adding this columns as a pivot     */\n    enablePivot: boolean | undefined;\n    /** If true, GUI will allow adding this columns as a value     */\n    enableValue: boolean | undefined;\n    /** Set to true if this col is editable, otherwise false. Can also be a function to have different rows editable.     */\n    editable: boolean | EditableCallback | undefined;\n    /** Set to true if this col should not be allowed take new values from the clipboard .     */\n    suppressPaste: boolean | SuppressPasteCallback | undefined;\n    /** Set to true if this col should not be navigable with the tab key. Can also be a function to have different rows editable.     */\n    suppressNavigable: boolean | SuppressNavigableCallback | undefined;\n    /** If true, grid will flash cell after cell is refreshed     */\n    enableCellChangeFlash: boolean | undefined;\n    /** For grid row dragging, set to true to enable row dragging within the grid     */\n    rowDrag: boolean | RowDragCallback | undefined;\n    /** For native drag and drop, set to true to enable drag source     */\n    dndSource: boolean | DndSourceCallback | undefined;\n    /** True if this column should stretch rows height to fit contents     */\n    autoHeight: boolean | undefined;\n    /** True if this column should wrap cell contents - typically used with autoHeight     */\n    wrapText: boolean | undefined;\n    /** Set to true if sorting allowed for this column.     */\n    sortable: boolean | undefined;\n    /** Set to true if this column should be resizable     */\n    resizable: boolean | undefined;\n    /** If true, this cell will be in editing mode after first click.     */\n    singleClickEdit: boolean | undefined;\n    /** Whether to display a floating filter for this column.     */\n    floatingFilter: boolean | undefined;\n    cellEditorPopup: boolean | undefined;\n}\n"]}