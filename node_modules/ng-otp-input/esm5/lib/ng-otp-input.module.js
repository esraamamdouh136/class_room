/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NgOtpInputComponent } from './components/ng-otp-input/ng-otp-input.component';
import { KeysPipe } from './pipes/keys.pipe';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NumberOnlyDirective } from './directives/number-only.directive';
import * as ɵngcc0 from '@angular/core';
var NgOtpInputModule = /** @class */ (function () {
    function NgOtpInputModule() {
    }
NgOtpInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgOtpInputModule });
NgOtpInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgOtpInputModule_Factory(t) { return new (t || NgOtpInputModule)(); }, providers: [KeysPipe], imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOtpInputModule, { declarations: function () { return [NgOtpInputComponent, KeysPipe, NumberOnlyDirective]; }, imports: function () { return [CommonModule,
        FormsModule,
        ReactiveFormsModule]; }, exports: function () { return [NgOtpInputComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOtpInputModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule
                ],
                declarations: [NgOtpInputComponent, KeysPipe, NumberOnlyDirective],
                exports: [NgOtpInputComponent],
                providers: [KeysPipe]
            }]
    }], function () { return []; }, null); })();
    return NgOtpInputModule;
}());
export { NgOtpInputModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctb3RwLWlucHV0Lm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmctb3RwLWlucHV0L2xpYi9uZy1vdHAtaW5wdXQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOztBQUV6RTtBQUdPLElBSFA7QUFFSSxJQVE0QixDQUFDO3NEQVZoQyxRQUFRLFNBQUM7aUJBQ1IsT0FBTyxFQUFFLDJCQUNQLFlBQVksMkJBQ1osV0FBVywyQkFDWCxtQkFBbUIsdUJBQ3BCO3FCQUNEO09BQVksRUFBRSxDQUFDO0lBQW1CLEVBQUUsUUFBUSxFQUFFO0dBQW1CLENBQUM7WUFDbEUsT0FBTyxFQUFFLENBQUMsbUJBQW1CLENBQUMsdUJBQzlCLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxtQkFDdEI7Ozs7Ozs7Ozs7Ozs7OztnREFDUTtBQUFFLElBQXFCLHVCQUFDO0FBQ2hDLENBRGdDLEFBVmpDLElBVWlDOztBQWpCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQVVBLEFBQUEsQUFWQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFWQSxBQVVBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nT3RwSW5wdXRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbmctb3RwLWlucHV0L25nLW90cC1pbnB1dC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBLZXlzUGlwZSB9IGZyb20gJy4vcGlwZXMva2V5cy5waXBlJztcclxuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSwgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE51bWJlck9ubHlEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvbnVtYmVyLW9ubHkuZGlyZWN0aXZlJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgRm9ybXNNb2R1bGUsXHJcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtOZ090cElucHV0Q29tcG9uZW50LCBLZXlzUGlwZSwgTnVtYmVyT25seURpcmVjdGl2ZV0sXHJcbiAgZXhwb3J0czogW05nT3RwSW5wdXRDb21wb25lbnRdLFxyXG4gIHByb3ZpZGVyczogW0tleXNQaXBlXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdPdHBJbnB1dE1vZHVsZSB7IH1cclxuIl19