import { FileUploadControl } from './../helpers/control.class';
import { ElementRef, Renderer2, ChangeDetectorRef, Directive } from '@angular/core';
import { IsNullOrEmpty } from './../helpers/helpers.class';
export class FileUploadAbstract {
    constructor(hostElementRef, renderer, cdr) {
        this.hostElementRef = hostElementRef;
        this.renderer = renderer;
        this.cdr = cdr;
        this.control = null;
        this.isMultiple = true;
        this.hooks = [];
        this.subscriptions = [];
        this.onChange = () => { };
    }
    ngOnInit() {
        if (IsNullOrEmpty(this.control)) {
            this.control = new FileUploadControl();
        }
        this.setEvents();
        this.checkAndMarkAsDisabled();
        this.checkAndSetMultiple();
        this.connectToForm();
    }
    ngOnDestroy() {
        this.cdr.detach();
        this.hooks.forEach((hook) => hook());
        this.hooks.length = 0;
        this.subscriptions.forEach((subscription) => subscription.unsubscribe());
        this.subscriptions.length = 0;
    }
    setEvents() {
        this.subscriptions.push(this.control.statusChanges.subscribe((status) => this.checkAndMarkAsDisabled()));
        this.subscriptions.push(this.control.eventsChanges.subscribe((event) => this.triggerEvent(event)));
        this.subscriptions.push(this.control.acceptChanges.subscribe((accept) => this.updateAcceptAttr(accept)));
        this.subscriptions.push(this.control.multipleChanges.subscribe((isMultiple) => this.toggleMultiple(isMultiple)));
    }
    clearInputEl() {
        this.input.nativeElement.value = null;
    }
    checkAndSetMultiple() {
        if (!this.control) {
            return;
        }
        const isMultiple = !(this.isMultiple === false || this.isMultiple === 'false');
        if (isMultiple !== this.control.isMultiple) {
            this.control.multiple(isMultiple);
        }
    }
    triggerEvent(event) {
        if (typeof this.label.nativeElement[event] === 'function') {
            this.label.nativeElement[event]();
        }
    }
    updateAcceptAttr(accept) {
        if (!IsNullOrEmpty(accept)) {
            this.renderer.setAttribute(this.input.nativeElement, 'accept', accept);
        }
        else {
            this.renderer.removeAttribute(this.input.nativeElement, 'accept');
        }
    }
    checkAndMarkAsDisabled() {
        if (this.control.disabled) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'disabled');
            this.renderer.setProperty(this.input.nativeElement, 'disabled', true);
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'disabled');
            this.renderer.setProperty(this.input.nativeElement, 'disabled', false);
        }
    }
    toggleMultiple(isMultiple) {
        if (isMultiple) {
            this.renderer.setAttribute(this.input.nativeElement, 'multiple', '');
        }
        else {
            this.renderer.removeAttribute(this.input.nativeElement, 'multiple');
        }
    }
    /**
     * ControlValueAccessor implementation
     */
    connectToForm() {
        this.subscriptions.push(this.control.valueChanges.subscribe((v) => this.onChange(v)));
    }
}
FileUploadAbstract.decorators = [
    { type: Directive }
];
FileUploadAbstract.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,