import { Directive, Input, Optional, Host, Self } from '@angular/core';
import { FileUploadComponent } from '../components/multiple-file-upload/file-upload.component';
import { SimpleFileUploadComponent } from '../components/simple-file-upload/simple-file-upload.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../components/multiple-file-upload/file-upload.component';
import * as ɵngcc2 from '../components/simple-file-upload/simple-file-upload.component';
export class FilesAcceptDirective {
    constructor(fileUpload, simpleFileUpload) {
        this.fileUpload = null;
        this.fileUpload = fileUpload || simpleFileUpload;
    }
    ngAfterViewInit() {
        this.setAccept(this.accept);
    }
    ngOnChanges(changes) {
        if ('accept' in changes && changes['accept'].currentValue !== changes['accept'].previousValue) {
            this.setAccept(this.accept);
        }
    }
    setAccept(accept) {
        if (this.fileUpload && this.fileUpload.control) {
            this.fileUpload.control.acceptFiles(accept);
        }
    }
}
FilesAcceptDirective.ɵfac = function FilesAcceptDirective_Factory(t) { return new (t || FilesAcceptDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FileUploadComponent, 11), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.SimpleFileUploadComponent, 11)); };
FilesAcceptDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilesAcceptDirective, selectors: [["file-upload", "accept", ""]], hostVars: 1, hostBindings: function FilesAcceptDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("accept", ctx.accept ? ctx.accept : null);
    } }, inputs: { accept: "accept" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
FilesAcceptDirective.ctorParameters = () => [
    { type: FileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] },
    { type: SimpleFileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] }
];
FilesAcceptDirective.propDecorators = {
    accept: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilesAcceptDirective, [{
        type: Directive,
        args: [{
                selector: 'file-upload[accept]',
                host: { '[attr.accept]': 'accept ? accept : null' }
            }]
    }], function () { return [{ type: ɵngcc1.FileUploadComponent, decorators: [{
                type: Optional
            }, {
                type: Host
            }, {
                type: Self
            }] }, { type: ɵngcc2.SimpleFileUploadComponent, decorators: [{
                type: Optional
            }, {
                type: Host
            }, {
                type: Self
            }] }]; }, { accept: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaXBsYWIvbmd4LWZpbGUtdXBsb2FkL3NyYy9saWIvZGlyZWN0aXZlcy9hdHRyaWJ1dGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFpQixRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDaEgsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDL0YsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0RBQStELENBQUM7Ozs7QUFRMUcsTUFBTSxPQUFPLG9CQUFvQjtBQUFJLElBT2pDLFlBQ2dDLFVBQStCLEVBQy9CLGdCQUEyQztBQUMvRSxRQUxxQixlQUFVLEdBQW9ELElBQUksQ0FBQztBQUN4RixRQUlRLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJLGdCQUFnQixDQUFDO0FBQ3pELElBQUksQ0FBQztBQUNMLElBQ1csZUFBZTtBQUFNLFFBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3BDLElBQUksQ0FBQztBQUNMLElBQ1csV0FBVyxDQUFDLE9BQXNCO0FBQUssUUFDMUMsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRTtBQUN2RyxZQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNZLFNBQVMsQ0FBQyxNQUFjO0FBQUssUUFDakMsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO0FBQ3hELFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTDtrREFoQ0MsU0FBUyxTQUFDLG1CQUNQLFFBQVEsRUFBRSxxQkFBcUIsbUJBQy9CLElBQUksRUFBRSxFQUFDLGVBQWUsRUFBRSx3QkFBd0IsRUFBQyxlQUNwRDs7O2tGQUNJO0FBQUU7QUFBK0MsWUFUN0MsbUJBQW1CLHVCQWlCbkIsUUFBUSxZQUFJLElBQUksWUFBSSxJQUFJO0FBQVEsWUFoQmhDLHlCQUF5Qix1QkFpQnpCLFFBQVEsWUFBSSxJQUFJLFlBQUksSUFBSTtBQUFPO0FBQUk7QUFDM0MscUJBUkksS0FBSztBQUNUOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBYkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUEvQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFSQSxBQUFBLEFBaUJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWhCQSxBQUFBLEFBaUJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVBBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBPcHRpb25hbCwgSG9zdCwgU2VsZiwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL211bHRpcGxlLWZpbGUtdXBsb2FkL2ZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3NpbXBsZS1maWxlLXVwbG9hZC9zaW1wbGUtZmlsZS11cGxvYWQuY29tcG9uZW50JztcclxuXHJcblxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ2ZpbGUtdXBsb2FkW2FjY2VwdF0nLFxyXG4gICAgaG9zdDogeydbYXR0ci5hY2NlcHRdJzogJ2FjY2VwdCA/IGFjY2VwdCA6IG51bGwnfVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsZXNBY2NlcHREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgYWNjZXB0OiBzdHJpbmc7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWxlVXBsb2FkOiBGaWxlVXBsb2FkQ29tcG9uZW50IHwgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudCA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQEhvc3QoKSBAU2VsZigpIGZpbGVVcGxvYWQ6IEZpbGVVcGxvYWRDb21wb25lbnQsXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQEhvc3QoKSBAU2VsZigpIHNpbXBsZUZpbGVVcGxvYWQ6IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQpIHtcclxuICAgICAgICB0aGlzLmZpbGVVcGxvYWQgPSBmaWxlVXBsb2FkIHx8IHNpbXBsZUZpbGVVcGxvYWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldEFjY2VwdCh0aGlzLmFjY2VwdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICBpZiAoJ2FjY2VwdCcgaW4gY2hhbmdlcyAmJiBjaGFuZ2VzWydhY2NlcHQnXS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXNbJ2FjY2VwdCddLnByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRBY2NlcHQodGhpcy5hY2NlcHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEFjY2VwdChhY2NlcHQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbGVVcGxvYWQgJiYgdGhpcy5maWxlVXBsb2FkLmNvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5maWxlVXBsb2FkLmNvbnRyb2wuYWNjZXB0RmlsZXMoYWNjZXB0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19