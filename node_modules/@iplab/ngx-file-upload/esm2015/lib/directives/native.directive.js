import { Directive, Input, Optional, Host, Self } from '@angular/core';
import { FileUploadComponent } from '../components/multiple-file-upload/file-upload.component';
import { SimpleFileUploadComponent } from '../components/simple-file-upload/simple-file-upload.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../components/multiple-file-upload/file-upload.component';
import * as ɵngcc2 from '../components/simple-file-upload/simple-file-upload.component';
export class FilesNativeDirective {
    constructor(fileUpload, simpleFileUpload) {
        this.nativeValue = null;
        this.fileUpload = null;
        this.fileUpload = fileUpload || simpleFileUpload;
    }
    set native(isNative) {
        if (typeof isNative === 'string' && (isNative === 'true' || isNative === 'false')) {
            this.nativeValue = JSON.parse(isNative.toLowerCase());
        }
        else if (typeof isNative === 'boolean') {
            this.nativeValue = isNative;
        }
        else {
            throw Error(`Provided value in directive [native]="${isNative}" is not boolean.`);
        }
    }
    ngAfterViewInit() {
        this.enableNative(this.nativeValue);
    }
    ngOnChanges(changes) {
        if ('native' in changes && changes['native'].currentValue !== changes['native'].previousValue) {
            this.enableNative(this.nativeValue);
        }
    }
    enableNative(isNative) {
        if (this.fileUpload && this.fileUpload.control) {
            this.fileUpload.control.native(isNative);
        }
    }
}
FilesNativeDirective.ɵfac = function FilesNativeDirective_Factory(t) { return new (t || FilesNativeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FileUploadComponent, 11), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.SimpleFileUploadComponent, 11)); };
FilesNativeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilesNativeDirective, selectors: [["file-upload", "native", ""]], hostVars: 1, hostBindings: function FilesNativeDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("native", ctx.native ? ctx.native : null);
    } }, inputs: { native: "native" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
FilesNativeDirective.ctorParameters = () => [
    { type: FileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] },
    { type: SimpleFileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] }
];
FilesNativeDirective.propDecorators = {
    native: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilesNativeDirective, [{
        type: Directive,
        args: [{
                selector: 'file-upload[native]',
                host: { '[attr.native]': 'native ? native : null' }
            }]
    }], function () { return [{ type: ɵngcc1.FileUploadComponent, decorators: [{
                type: Optional
            }, {
                type: Host
            }, {
                type: Self
            }] }, { type: ɵngcc2.SimpleFileUploadComponent, decorators: [{
                type: Optional
            }, {
                type: Host
            }, {
                type: Self
            }] }]; }, { native: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaXBsYWIvbmd4LWZpbGUtdXBsb2FkL3NyYy9saWIvZGlyZWN0aXZlcy9uYXRpdmUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFpQixRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDaEgsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDL0YsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0RBQStELENBQUM7Ozs7QUFRMUcsTUFBTSxPQUFPLG9CQUFvQjtBQUFJLElBaUJqQyxZQUNnQyxVQUErQixFQUMvQixnQkFBMkM7QUFDL0UsUUFsQlksZ0JBQVcsR0FBbUIsSUFBSSxDQUFDO0FBQy9DLFFBWXFCLGVBQVUsR0FBb0QsSUFBSSxDQUFDO0FBQ3hGLFFBSVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLElBQUksZ0JBQWdCLENBQUM7QUFDekQsSUFBSSxDQUFDO0FBQ0wsSUFsQkksSUFDVyxNQUFNLENBQUMsUUFBMEI7QUFDaEQsUUFBUSxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsSUFBSSxDQUFDLFFBQVEsS0FBSyxNQUFNLElBQUksUUFBUSxLQUFLLE9BQU8sQ0FBQyxFQUFFO0FBQzNGLFlBQVksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ2xFLFNBQVM7QUFBRSxhQUFJLElBQUksT0FBTyxRQUFRLEtBQUssU0FBUyxFQUFFO0FBQ2xELFlBQVksSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUM7QUFDeEMsU0FBUztBQUFFLGFBQUk7QUFDZixZQUFZLE1BQU0sS0FBSyxDQUFDLHlDQUF5QyxRQUFRLG1CQUFtQixDQUFDLENBQUM7QUFDOUYsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBU1csZUFBZTtBQUFNLFFBQ3hCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzVDLElBQUksQ0FBQztBQUNMLElBQ1csV0FBVyxDQUFDLE9BQXNCO0FBQUssUUFDMUMsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRTtBQUN2RyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ2hELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNZLFlBQVksQ0FBQyxRQUFpQjtBQUFLLFFBQ3ZDLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtBQUN4RCxZQUFZLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNyRCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0w7a0RBMUNDLFNBQVMsU0FBQyxtQkFDUCxRQUFRLEVBQUUscUJBQXFCLG1CQUMvQixJQUFJLEVBQUUsRUFBQyxlQUFlLEVBQUUsd0JBQXdCLEVBQUMsZUFDcEQ7OztrRkFDSTtBQUFFO0FBQStDLFlBVDdDLG1CQUFtQix1QkEyQm5CLFFBQVEsWUFBSSxJQUFJLFlBQUksSUFBSTtBQUFRLFlBMUJoQyx5QkFBeUIsdUJBMkJ6QixRQUFRLFlBQUksSUFBSSxZQUFJLElBQUk7QUFBTztBQUFJO0FBQzNDLHFCQWhCSSxLQUFLO0FBQ1Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFmQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFpQkEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWpCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBYUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFqQkEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBVUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUF6Q0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFSQSxBQUFBLEFBMkJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQTFCQSxBQUFBLEFBMkJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWZBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBPcHRpb25hbCwgSG9zdCwgU2VsZiwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL211bHRpcGxlLWZpbGUtdXBsb2FkL2ZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3NpbXBsZS1maWxlLXVwbG9hZC9zaW1wbGUtZmlsZS11cGxvYWQuY29tcG9uZW50JztcclxuXHJcblxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ2ZpbGUtdXBsb2FkW25hdGl2ZV0nLFxyXG4gICAgaG9zdDogeydbYXR0ci5uYXRpdmVdJzogJ25hdGl2ZSA/IG5hdGl2ZSA6IG51bGwnfVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsZXNOYXRpdmVEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAgIHByaXZhdGUgbmF0aXZlVmFsdWU6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIHNldCBuYXRpdmUoaXNOYXRpdmU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGlzTmF0aXZlID09PSAnc3RyaW5nJyAmJiAoaXNOYXRpdmUgPT09ICd0cnVlJyB8fCBpc05hdGl2ZSA9PT0gJ2ZhbHNlJykpIHtcclxuICAgICAgICAgICAgdGhpcy5uYXRpdmVWYWx1ZSA9IEpTT04ucGFyc2UoaXNOYXRpdmUudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXNOYXRpdmUgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICB0aGlzLm5hdGl2ZVZhbHVlID0gaXNOYXRpdmU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFByb3ZpZGVkIHZhbHVlIGluIGRpcmVjdGl2ZSBbbmF0aXZlXT1cIiR7aXNOYXRpdmV9XCIgaXMgbm90IGJvb2xlYW4uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZmlsZVVwbG9hZDogRmlsZVVwbG9hZENvbXBvbmVudCB8IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgQFNlbGYoKSBmaWxlVXBsb2FkOiBGaWxlVXBsb2FkQ29tcG9uZW50LFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgQFNlbGYoKSBzaW1wbGVGaWxlVXBsb2FkOiBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50KSB7XHJcbiAgICAgICAgdGhpcy5maWxlVXBsb2FkID0gZmlsZVVwbG9hZCB8fCBzaW1wbGVGaWxlVXBsb2FkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5lbmFibGVOYXRpdmUodGhpcy5uYXRpdmVWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICBpZiAoJ25hdGl2ZScgaW4gY2hhbmdlcyAmJiBjaGFuZ2VzWyduYXRpdmUnXS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXNbJ25hdGl2ZSddLnByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5lbmFibGVOYXRpdmUodGhpcy5uYXRpdmVWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZW5hYmxlTmF0aXZlKGlzTmF0aXZlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsZVVwbG9hZCAmJiB0aGlzLmZpbGVVcGxvYWQuY29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbGVVcGxvYWQuY29udHJvbC5uYXRpdmUoaXNOYXRpdmUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=