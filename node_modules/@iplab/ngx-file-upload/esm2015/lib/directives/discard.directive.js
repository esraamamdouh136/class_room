import { Directive, Input, Optional, Host, Self } from '@angular/core';
import { FileUploadComponent } from '../components/multiple-file-upload/file-upload.component';
import { SimpleFileUploadComponent } from '../components/simple-file-upload/simple-file-upload.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../components/multiple-file-upload/file-upload.component';
import * as ɵngcc2 from '../components/simple-file-upload/simple-file-upload.component';
export class FilesDiscardDirective {
    constructor(fileUpload, simpleFileUpload) {
        this.discardValue = null;
        this.fileUpload = null;
        this.fileUpload = fileUpload || simpleFileUpload;
    }
    set discard(discard) {
        if (typeof discard === 'string' && (discard === 'true' || discard === 'false')) {
            this.discardValue = JSON.parse(discard.toLowerCase());
        }
        else if (typeof discard === 'boolean') {
            this.discardValue = discard;
        }
        else {
            throw Error(`Provided value in directive [discard]="${discard}" is not boolean.`);
        }
    }
    ngAfterViewInit() {
        this.setAccept(this.discardValue);
    }
    ngOnChanges(changes) {
        if ('discard' in changes && changes['discard'].currentValue !== changes['discard'].previousValue) {
            this.setAccept(this.discardValue);
        }
    }
    setAccept(discard) {
        if (this.fileUpload && this.fileUpload.control) {
            this.fileUpload.control.discardInvalid(discard);
        }
    }
}
FilesDiscardDirective.ɵfac = function FilesDiscardDirective_Factory(t) { return new (t || FilesDiscardDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FileUploadComponent, 11), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.SimpleFileUploadComponent, 11)); };
FilesDiscardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilesDiscardDirective, selectors: [["file-upload", "discard", ""]], hostVars: 1, hostBindings: function FilesDiscardDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("discard", ctx.discard ? ctx.discard : null);
    } }, inputs: { discard: "discard" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
FilesDiscardDirective.ctorParameters = () => [
    { type: FileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] },
    { type: SimpleFileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] }
];
FilesDiscardDirective.propDecorators = {
    discard: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilesDiscardDirective, [{
        type: Directive,
        args: [{
                selector: 'file-upload[discard]',
                host: { '[attr.discard]': 'discard ? discard : null' }
            }]
    }], function () { return [{ type: ɵngcc1.FileUploadComponent, decorators: [{
                type: Optional
            }, {
                type: Host
            }, {
                type: Self
            }] }, { type: ɵngcc2.SimpleFileUploadComponent, decorators: [{
                type: Optional
            }, {
                type: Host
            }, {
                type: Self
            }] }]; }, { discard: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzY2FyZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lwbGFiL25neC1maWxlLXVwbG9hZC9zcmMvbGliL2RpcmVjdGl2ZXMvZGlzY2FyZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWlCLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUNoSCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUMvRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQzs7OztBQVExRyxNQUFNLE9BQU8scUJBQXFCO0FBQUksSUFpQmxDLFlBQ2dDLFVBQStCLEVBQy9CLGdCQUEyQztBQUMvRSxRQWxCWSxpQkFBWSxHQUFtQixJQUFJLENBQUM7QUFDaEQsUUFZcUIsZUFBVSxHQUFvRCxJQUFJLENBQUM7QUFDeEYsUUFJUSxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxnQkFBZ0IsQ0FBQztBQUN6RCxJQUFJLENBQUM7QUFDTCxJQWxCSSxJQUNXLE9BQU8sQ0FBQyxPQUF5QjtBQUNoRCxRQUFRLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxJQUFJLENBQUMsT0FBTyxLQUFLLE1BQU0sSUFBSSxPQUFPLEtBQUssT0FBTyxDQUFDLEVBQUU7QUFDeEYsWUFBWSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDbEUsU0FBUztBQUFFLGFBQUksSUFBSSxPQUFPLE9BQU8sS0FBSyxTQUFTLEVBQUU7QUFDakQsWUFBWSxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztBQUN4QyxTQUFTO0FBQUUsYUFBSTtBQUNmLFlBQVksTUFBTSxLQUFLLENBQUMsMENBQTBDLE9BQU8sbUJBQW1CLENBQUMsQ0FBQztBQUM5RixTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFTVyxlQUFlO0FBQU0sUUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDMUMsSUFBSSxDQUFDO0FBQ0wsSUFDVyxXQUFXLENBQUMsT0FBc0I7QUFBSyxRQUMxQyxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsYUFBYSxFQUFFO0FBQzFHLFlBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUMsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ1ksU0FBUyxDQUFDLE9BQWdCO0FBQUssUUFDbkMsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO0FBQ3hELFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzVELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTDttREExQ0MsU0FBUyxTQUFDLG1CQUNQLFFBQVEsRUFBRSxzQkFBc0IsbUJBQ2hDLElBQUksRUFBRSxFQUFDLGdCQUFnQixFQUFFLDBCQUEwQixFQUFDLGVBQ3ZEOzs7b0ZBQ0k7QUFBRTtBQUFnRCxZQVQ5QyxtQkFBbUIsdUJBMkJuQixRQUFRLFlBQUksSUFBSSxZQUFJLElBQUk7QUFBUSxZQTFCaEMseUJBQXlCLHVCQTJCekIsUUFBUSxZQUFJLElBQUksWUFBSSxJQUFJO0FBQU87QUFBSTtBQUMxQyxzQkFoQkcsS0FBSztBQUNUOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBaUJBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFqQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBakJBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQVVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBekNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBUkEsQUFBQSxBQTJCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUExQkEsQUFBQSxBQTJCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFmQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgU2ltcGxlQ2hhbmdlcywgT3B0aW9uYWwsIEhvc3QsIFNlbGYsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9tdWx0aXBsZS1maWxlLXVwbG9hZC9maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9zaW1wbGUtZmlsZS11cGxvYWQvc2ltcGxlLWZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcblxyXG5cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdmaWxlLXVwbG9hZFtkaXNjYXJkXScsXHJcbiAgICBob3N0OiB7J1thdHRyLmRpc2NhcmRdJzogJ2Rpc2NhcmQgPyBkaXNjYXJkIDogbnVsbCd9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWxlc0Rpc2NhcmREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAgIHByaXZhdGUgZGlzY2FyZFZhbHVlOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBzZXQgZGlzY2FyZChkaXNjYXJkOiBib29sZWFuIHwgc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkaXNjYXJkID09PSAnc3RyaW5nJyAmJiAoZGlzY2FyZCA9PT0gJ3RydWUnIHx8IGRpc2NhcmQgPT09ICdmYWxzZScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzY2FyZFZhbHVlID0gSlNPTi5wYXJzZShkaXNjYXJkLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRpc2NhcmQgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICB0aGlzLmRpc2NhcmRWYWx1ZSA9IGRpc2NhcmQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFByb3ZpZGVkIHZhbHVlIGluIGRpcmVjdGl2ZSBbZGlzY2FyZF09XCIke2Rpc2NhcmR9XCIgaXMgbm90IGJvb2xlYW4uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZmlsZVVwbG9hZDogRmlsZVVwbG9hZENvbXBvbmVudCB8IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgQFNlbGYoKSBmaWxlVXBsb2FkOiBGaWxlVXBsb2FkQ29tcG9uZW50LFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgQFNlbGYoKSBzaW1wbGVGaWxlVXBsb2FkOiBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50KSB7XHJcbiAgICAgICAgdGhpcy5maWxlVXBsb2FkID0gZmlsZVVwbG9hZCB8fCBzaW1wbGVGaWxlVXBsb2FkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRBY2NlcHQodGhpcy5kaXNjYXJkVmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCdkaXNjYXJkJyBpbiBjaGFuZ2VzICYmIGNoYW5nZXNbJ2Rpc2NhcmQnXS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXNbJ2Rpc2NhcmQnXS5wcmV2aW91c1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QWNjZXB0KHRoaXMuZGlzY2FyZFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRBY2NlcHQoZGlzY2FyZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbGVVcGxvYWQgJiYgdGhpcy5maWxlVXBsb2FkLmNvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5maWxlVXBsb2FkLmNvbnRyb2wuZGlzY2FyZEludmFsaWQoZGlzY2FyZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==