(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/animations'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@iplab/ngx-file-upload', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/animations', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common,(global.iplab = global.iplab || {}, global.iplab['ngx-file-upload'] = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.animations, global.rxjs));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, common, forms, animations, rxjs) { 
var _c0 = ["placeholder"];
var _c1 = ["item"];
var _c2 = ["inputRef"];
var _c3 = ["labelRef"];
function FileUploadComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function FileUploadComponent_ng_template_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "b");
    ɵngcc0.ɵɵtext(2, "Drag and drop");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3, " files");
    ɵngcc0.ɵɵelement(4, "br");
    ɵngcc0.ɵɵtext(5, " or click here ");
    ɵngcc0.ɵɵelementContainerEnd();
} }
function FileUploadComponent_ng_template_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "b");
    ɵngcc0.ɵɵtext(1, "Click here");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(2, " to");
    ɵngcc0.ɵɵelement(3, "br");
    ɵngcc0.ɵɵtext(4, " choose a files ");
} }
function FileUploadComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "file-upload-drop-zone");
    ɵngcc0.ɵɵtemplate(1, FileUploadComponent_ng_template_3_ng_container_1_Template, 6, 0, "ng-container", 7);
    ɵngcc0.ɵɵtemplate(2, FileUploadComponent_ng_template_3_ng_template_2_Template, 5, 0, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var isFileDragDropAvailable_r6 = ctx.isFileDragDropAvailable;
    var _r8 = ɵngcc0.ɵɵreference(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", isFileDragDropAvailable_r6)("ngIfElse", _r8);
} }
function FileUploadComponent_div_7_ng_template_1_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
var _c4 = function (a0, a1, a2, a3) { return { $implicit: a0, file: a1, index: a2, control: a3 }; };
function FileUploadComponent_div_7_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, FileUploadComponent_div_7_ng_template_1_ng_container_0_Template, 1, 0, "ng-container", 2);
} if (rf & 2) {
    var file_r13 = ctx.$implicit;
    var i_r14 = ctx.index;
    ɵngcc0.ɵɵnextContext();
    var _r11 = ɵngcc0.ɵɵreference(4);
    var ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r10.listItem ? ctx_r10.listItem : _r11)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(2, _c4, file_r13, file_r13, i_r14, ctx_r10.control));
} }
function FileUploadComponent_div_7_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "file-upload-list-item", 12);
    ɵngcc0.ɵɵtext(1, "Remove");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var i_r16 = ctx.index;
    var file_r17 = ctx.file;
    var control_r18 = ctx.control;
    ɵngcc0.ɵɵproperty("index", i_r16)("file", file_r17)("control", control_r18);
} }
function FileUploadComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    var _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵlistener("@insertAnimation.done", function FileUploadComponent_div_7_Template_div_animation_insertAnimation_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); var ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.animationListFinished($event); });
    ɵngcc0.ɵɵtemplate(1, FileUploadComponent_div_7_ng_template_1_Template, 1, 7, "ng-template", 10);
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵtemplate(3, FileUploadComponent_div_7_ng_template_3_Template, 2, 3, "ng-template", null, 11, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@insertAnimation", ctx_r5.control.size);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 3, ctx_r5.control.valueChanges))("ngForTrackBy", ctx_r5.trackByFn);
} }
var _c5 = ["*"];
function FileUploadIconComponent__svg_svg_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 3);
    ɵngcc0.ɵɵelementStart(1, "g");
    ɵngcc0.ɵɵelement(2, "path", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadIconComponent__svg_svg_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 3);
    ɵngcc0.ɵɵelementStart(1, "g");
    ɵngcc0.ɵɵelement(2, "path", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadIconComponent__svg_svg_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 3);
    ɵngcc0.ɵɵelementStart(1, "g");
    ɵngcc0.ɵɵelement(2, "path", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadIconComponent__svg_svg_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 3);
    ɵngcc0.ɵɵelementStart(1, "g");
    ɵngcc0.ɵɵelement(2, "path", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadIconComponent__svg_svg_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 3);
    ɵngcc0.ɵɵelementStart(1, "g");
    ɵngcc0.ɵɵelement(2, "path", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
var _c6 = ["overlay"];
var _c7 = ["file-drop-zone", ""];
function FileUploadAttributeComponent_div_1_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function FileUploadAttributeComponent_div_1_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "file-upload-drop-zone");
    ɵngcc0.ɵɵelementStart(1, "b");
    ɵngcc0.ɵɵtext(2, "Drop");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3, " it here ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadAttributeComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1, 2);
    ɵngcc0.ɵɵelementStart(2, "div", 3);
    ɵngcc0.ɵɵtemplate(3, FileUploadAttributeComponent_div_1_ng_container_3_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(4, FileUploadAttributeComponent_div_1_ng_template_4_Template, 4, 0, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r3 = ɵngcc0.ɵɵreference(5);
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.templateRef ? ctx_r0.templateRef : _r3);
} }
var _c8 = ["button"];
var _c9 = ["simple", ""];
function SimpleFileUploadComponent_ng_template_1_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
var _c10 = function (a0, a1, a2) { return { $implicit: a0, control: a1, file: a2 }; };
function SimpleFileUploadComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, SimpleFileUploadComponent_ng_template_1_ng_container_0_Template, 1, 0, "ng-container", 5);
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    var _r1 = ɵngcc0.ɵɵreference(4);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.placeholderRef ? ctx_r0.placeholderRef : _r1)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(2, _c10, ctx_r0.control.value[0], ctx_r0.control, ctx_r0.control.value[0]));
} }
function SimpleFileUploadComponent_ng_template_3_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 11);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var file_r9 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(file_r9.name);
} }
function SimpleFileUploadComponent_ng_template_3_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0, " Select a file... ");
} }
function SimpleFileUploadComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, SimpleFileUploadComponent_ng_template_3_span_0_Template, 2, 1, "span", 9);
    ɵngcc0.ɵɵtemplate(1, SimpleFileUploadComponent_ng_template_3_ng_template_1_Template, 1, 0, "ng-template", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);
} if (rf & 2) {
    var file_r9 = ctx.$implicit;
    var _r11 = ɵngcc0.ɵɵreference(2);
    ɵngcc0.ɵɵproperty("ngIf", file_r9)("ngIfElse", _r11);
} }
function SimpleFileUploadComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function SimpleFileUploadComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "div", 13);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(2, "svg", 14);
    ɵngcc0.ɵɵelementStart(3, "g");
    ɵngcc0.ɵɵelement(4, "path", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(5, "span", 16);
    ɵngcc0.ɵɵtext(6, "Browse");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
var _c11 = function (a0) { return { control: a0 }; };
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    // -owner-group-others-
    // -rwxrwxrwx = 0777
    var FileAccess;
    (function (FileAccess) {
        FileAccess[FileAccess["None"] = 0] = "None";
        FileAccess[FileAccess["Read"] = 4] = "Read";
        FileAccess[FileAccess["Write"] = 2] = "Write";
        FileAccess[FileAccess["ReadWrite"] = 6] = "ReadWrite";
        FileAccess[FileAccess["Execute"] = 1] = "Execute";
        FileAccess[FileAccess["ReadWriteExecute"] = 7] = "ReadWriteExecute";
        FileAccess[FileAccess["ExecuteRead"] = 5] = "ExecuteRead";
        FileAccess[FileAccess["r"] = 4] = "r";
        FileAccess[FileAccess["w"] = 2] = "w";
        FileAccess[FileAccess["x"] = 1] = "x";
        FileAccess[FileAccess["rw"] = 6] = "rw";
        FileAccess[FileAccess["rwx"] = 7] = "rwx";
        FileAccess[FileAccess["xr"] = 5] = "xr";
    })(FileAccess || (FileAccess = {}));
    /**
     * This table lists some important MIME types for the Web copied from
     * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types
     * http://www.iana.org/assignments/media-types/media-types.xhtml
     */
    exports.FileUploadTypes = void 0;
    (function (FileUploadTypes) {
        FileUploadTypes["arc"] = "application/octet-stream";
        FileUploadTypes["midi"] = "audio/midi";
        FileUploadTypes["ts"] = "application/typescript";
        FileUploadTypes["woff2"] = "font/woff2";
        FileUploadTypes["evy"] = "application/envoy";
        FileUploadTypes["fif"] = "application/fractals";
        FileUploadTypes["hta"] = "application/hta";
        FileUploadTypes["acx"] = "application/internet-property-stream";
        FileUploadTypes["dot"] = "application/msword";
        FileUploadTypes["dms"] = "application/octet-stream";
        FileUploadTypes["eps"] = "application/postscript";
        FileUploadTypes["ps"] = "application/postscript";
        FileUploadTypes["xla"] = "application/vnd.ms-excel";
        FileUploadTypes["xlc"] = "application/vnd.ms-excel";
        FileUploadTypes["xlm"] = "application/vnd.ms-excel";
        FileUploadTypes["xlt"] = "application/vnd.ms-excel";
        FileUploadTypes["xlw"] = "application/vnd.ms-excel";
        FileUploadTypes["msg"] = "application/vnd.ms-outlook";
        FileUploadTypes["sst"] = "application/vnd.ms-pkicertstore";
        FileUploadTypes["pot"] = "application/vnd.ms-powerpoint";
        FileUploadTypes["pps"] = "application/vnd.ms-powerpoint";
        FileUploadTypes["wcm"] = "application/vnd.ms-works";
        FileUploadTypes["wdb"] = "application/vnd.ms-works";
        FileUploadTypes["wks"] = "application/vnd.ms-works";
        FileUploadTypes["cdf"] = "application/x-cdf";
        FileUploadTypes["tgz"] = "application/x-compressed";
        FileUploadTypes["dcr"] = "application/x-director";
        FileUploadTypes["dxr"] = "application/x-director";
        FileUploadTypes["gz"] = "application/x-gzip";
        FileUploadTypes["ins"] = "application/x-internet-signup";
        FileUploadTypes["isp"] = "application/x-internet-signup";
        FileUploadTypes["iii"] = "application/x-iphone";
        FileUploadTypes["dll"] = "application/x-msdownload";
        FileUploadTypes["m13"] = "application/x-msmediaview";
        FileUploadTypes["m14"] = "application/x-msmediaview";
        FileUploadTypes["pma"] = "application/x-perfmon";
        FileUploadTypes["pmc"] = "application/x-perfmon";
        FileUploadTypes["pmr"] = "application/x-perfmon";
        FileUploadTypes["pmw"] = "application/x-perfmon";
        FileUploadTypes["pfx"] = "application/x-pkcs12";
        FileUploadTypes["spc"] = "application/x-pkcs7-certificates";
        FileUploadTypes["p7c"] = "application/x-pkcs7-mime";
        FileUploadTypes["texi"] = "application/x-texinfo";
        FileUploadTypes["roff"] = "application/x-troff";
        FileUploadTypes["tr"] = "application/x-troff";
        FileUploadTypes["man"] = "application/x-troff-man";
        FileUploadTypes["me"] = "application/x-troff-me";
        FileUploadTypes["ms"] = "application/x-troff-ms";
        FileUploadTypes["crt"] = "application/x-x509-ca-cert";
        FileUploadTypes["pko"] = "application/ynd.ms-pkipko";
        FileUploadTypes["snd"] = "audio/basic";
        FileUploadTypes["rmi"] = "audio/mid";
        FileUploadTypes["mp3"] = "audio/mpeg";
        FileUploadTypes["aifc"] = "audio/x-aiff";
        FileUploadTypes["aiff"] = "audio/x-aiff";
        FileUploadTypes["ra"] = "audio/x-pn-realaudio";
        FileUploadTypes["jpe"] = "image/jpeg";
        FileUploadTypes["jpeg"] = "image/jpeg";
        FileUploadTypes["jfif"] = "image/pipeg";
        FileUploadTypes["tif"] = "image/tiff";
        FileUploadTypes["mht"] = "message/rfc822";
        FileUploadTypes["mhtml"] = "message/rfc822";
        FileUploadTypes["nws"] = "message/rfc822";
        FileUploadTypes["htm"] = "text/html";
        FileUploadTypes["stm"] = "text/html";
        FileUploadTypes["uls"] = "text/iuls";
        FileUploadTypes["sct"] = "text/scriptlet";
        FileUploadTypes["htt"] = "text/webviewhtml";
        FileUploadTypes["htc"] = "text/x-component";
        FileUploadTypes["mp2"] = "video/mpeg";
        FileUploadTypes["mpa"] = "video/mpeg";
        FileUploadTypes["mpe"] = "video/mpeg";
        FileUploadTypes["mpg"] = "video/mpeg";
        FileUploadTypes["mpv2"] = "video/mpeg";
        FileUploadTypes["mov"] = "video/quicktime";
        FileUploadTypes["lsf"] = "video/x-la-asf";
        FileUploadTypes["lsx"] = "video/x-la-asf";
        FileUploadTypes["asr"] = "video/x-ms-asf";
        FileUploadTypes["asx"] = "video/x-ms-asf";
        FileUploadTypes["flr"] = "x-world/x-vrml";
        FileUploadTypes["vrml"] = "x-world/x-vrml";
        FileUploadTypes["wrz"] = "x-world/x-vrml";
        FileUploadTypes["xaf"] = "x-world/x-vrml";
        FileUploadTypes["xof"] = "x-world/x-vrml";
        FileUploadTypes["x3d"] = "application/vnd.hzn-3d-crossword";
        FileUploadTypes["3gp"] = "video/3gpp";
        FileUploadTypes["3g2"] = "video/3gpp2";
        FileUploadTypes["mseq"] = "application/vnd.mseq";
        FileUploadTypes["pwn"] = "application/vnd.3m.post-it-notes";
        FileUploadTypes["plb"] = "application/vnd.3gpp.pic-bw-large";
        FileUploadTypes["psb"] = "application/vnd.3gpp.pic-bw-small";
        FileUploadTypes["pvb"] = "application/vnd.3gpp.pic-bw-var";
        FileUploadTypes["tcap"] = "application/vnd.3gpp2.tcap";
        FileUploadTypes["7z"] = "application/x-7z-compressed";
        FileUploadTypes["abw"] = "application/x-abiword";
        FileUploadTypes["ace"] = "application/x-ace-compressed";
        FileUploadTypes["acc"] = "application/vnd.americandynamics.acc";
        FileUploadTypes["acu"] = "application/vnd.acucobol";
        FileUploadTypes["atc"] = "application/vnd.acucorp";
        FileUploadTypes["adp"] = "audio/adpcm";
        FileUploadTypes["aab"] = "application/x-authorware-bin";
        FileUploadTypes["aam"] = "application/x-authorware-map";
        FileUploadTypes["aas"] = "application/x-authorware-seg";
        FileUploadTypes["air"] = "application/vnd.adobe.air-application-installer-package+zip";
        FileUploadTypes["swf"] = "application/x-shockwave-flash";
        FileUploadTypes["fxp"] = "application/vnd.adobe.fxp";
        FileUploadTypes["pdf"] = "application/pdf";
        FileUploadTypes["ppd"] = "application/vnd.cups-ppd";
        FileUploadTypes["dir"] = "application/x-director";
        FileUploadTypes["xdp"] = "application/vnd.adobe.xdp+xml";
        FileUploadTypes["xfdf"] = "application/vnd.adobe.xfdf";
        FileUploadTypes["aac"] = "audio/x-aac";
        FileUploadTypes["ahead"] = "application/vnd.ahead.space";
        FileUploadTypes["azf"] = "application/vnd.airzip.filesecure.azf";
        FileUploadTypes["azs"] = "application/vnd.airzip.filesecure.azs";
        FileUploadTypes["azw"] = "application/vnd.amazon.ebook";
        FileUploadTypes["ami"] = "application/vnd.amiga.ami";
        FileUploadTypes["apk"] = "application/vnd.android.package-archive";
        FileUploadTypes["cii"] = "application/vnd.anser-web-certificate-issue-initiation";
        FileUploadTypes["fti"] = "application/vnd.anser-web-funds-transfer-initiation";
        FileUploadTypes["atx"] = "application/vnd.antix.game-component";
        FileUploadTypes["dmg"] = "application/x-apple-diskimage";
        FileUploadTypes["mpkg"] = "application/vnd.apple.installer+xml";
        FileUploadTypes["aw"] = "application/applixware";
        FileUploadTypes["les"] = "application/vnd.hhe.lesson-player";
        FileUploadTypes["swi"] = "application/vnd.aristanetworks.swi";
        FileUploadTypes["s"] = "text/x-asm";
        FileUploadTypes["atomcat"] = "application/atomcat+xml";
        FileUploadTypes["atomsvc"] = "application/atomsvc+xml";
        FileUploadTypes["atom"] = "application/atom+xml";
        FileUploadTypes["ac"] = "application/pkix-attr-cert";
        FileUploadTypes["aif"] = "audio/x-aiff";
        FileUploadTypes["avi"] = "video/x-msvideo";
        FileUploadTypes["aep"] = "application/vnd.audiograph";
        FileUploadTypes["dxf"] = "image/vnd.dxf";
        FileUploadTypes["dwf"] = "model/vnd.dwf";
        FileUploadTypes["par"] = "text/plain-bas";
        FileUploadTypes["bcpio"] = "application/x-bcpio";
        FileUploadTypes["bin"] = "application/octet-stream";
        FileUploadTypes["bmp"] = "image/bmp";
        FileUploadTypes["torrent"] = "application/x-bittorrent";
        FileUploadTypes["cod"] = "application/vnd.rim.cod";
        FileUploadTypes["mpm"] = "application/vnd.blueice.multipass";
        FileUploadTypes["bmi"] = "application/vnd.bmi";
        FileUploadTypes["sh"] = "application/x-sh";
        FileUploadTypes["btif"] = "image/prs.btif";
        FileUploadTypes["rep"] = "application/vnd.businessobjects";
        FileUploadTypes["bz"] = "application/x-bzip";
        FileUploadTypes["bz2"] = "application/x-bzip2";
        FileUploadTypes["csh"] = "application/x-csh";
        FileUploadTypes["c"] = "text/x-c";
        FileUploadTypes["cdxml"] = "application/vnd.chemdraw+xml";
        FileUploadTypes["css"] = "text/css";
        FileUploadTypes["cdx"] = "chemical/x-cdx";
        FileUploadTypes["cml"] = "chemical/x-cml";
        FileUploadTypes["csml"] = "chemical/x-csml";
        FileUploadTypes["cdbcmsg"] = "application/vnd.contact.cmsg";
        FileUploadTypes["cla"] = "application/vnd.claymore";
        FileUploadTypes["c4g"] = "application/vnd.clonk.c4group";
        FileUploadTypes["sub"] = "image/vnd.dvb.subtitle";
        FileUploadTypes["cdmia"] = "application/cdmi-capability";
        FileUploadTypes["cdmic"] = "application/cdmi-container";
        FileUploadTypes["cdmid"] = "application/cdmi-domain";
        FileUploadTypes["cdmio"] = "application/cdmi-object";
        FileUploadTypes["cdmiq"] = "application/cdmi-queue";
        FileUploadTypes["c11amc"] = "application/vnd.cluetrust.cartomobile-config";
        FileUploadTypes["c11amz"] = "application/vnd.cluetrust.cartomobile-config-pkg";
        FileUploadTypes["ras"] = "image/x-cmu-raster";
        FileUploadTypes["dae"] = "model/vnd.collada+xml";
        FileUploadTypes["csv"] = "text/csv";
        FileUploadTypes["cpt"] = "application/mac-compactpro";
        FileUploadTypes["wmlc"] = "application/vnd.wap.wmlc";
        FileUploadTypes["cgm"] = "image/cgm";
        FileUploadTypes["ice"] = "x-conference/x-cooltalk";
        FileUploadTypes["cmx"] = "image/x-cmx";
        FileUploadTypes["xar"] = "application/vnd.xara";
        FileUploadTypes["cmc"] = "application/vnd.cosmocaller";
        FileUploadTypes["cpio"] = "application/x-cpio";
        FileUploadTypes["clkx"] = "application/vnd.crick.clicker";
        FileUploadTypes["clkk"] = "application/vnd.crick.clicker.keyboard";
        FileUploadTypes["clkp"] = "application/vnd.crick.clicker.palette";
        FileUploadTypes["clkt"] = "application/vnd.crick.clicker.template";
        FileUploadTypes["clkw"] = "application/vnd.crick.clicker.wordbank";
        FileUploadTypes["wbs"] = "application/vnd.criticaltools.wbs+xml";
        FileUploadTypes["cryptonote"] = "application/vnd.rig.cryptonote";
        FileUploadTypes["cif"] = "chemical/x-cif";
        FileUploadTypes["cmdf"] = "chemical/x-cmdf";
        FileUploadTypes["cu"] = "application/cu-seeme";
        FileUploadTypes["cww"] = "application/prs.cww";
        FileUploadTypes["curl"] = "text/vnd.curl";
        FileUploadTypes["dcurl"] = "text/vnd.curl.dcurl";
        FileUploadTypes["mcurl"] = "text/vnd.curl.mcurl";
        FileUploadTypes["scurl"] = "text/vnd.curl.scurl";
        FileUploadTypes["car"] = "application/vnd.curl.car";
        FileUploadTypes["pcurl"] = "application/vnd.curl.pcurl";
        FileUploadTypes["cmp"] = "application/vnd.yellowriver-custom-menu";
        FileUploadTypes["dssc"] = "application/dssc+der";
        FileUploadTypes["xdssc"] = "application/dssc+xml";
        FileUploadTypes["deb"] = "application/x-debian-package";
        FileUploadTypes["uva"] = "audio/vnd.dece.audio";
        FileUploadTypes["uvi"] = "image/vnd.dece.graphic";
        FileUploadTypes["uvh"] = "video/vnd.dece.hd";
        FileUploadTypes["uvm"] = "video/vnd.dece.mobile";
        FileUploadTypes["uvu"] = "video/vnd.uvvu.mp4";
        FileUploadTypes["uvp"] = "video/vnd.dece.pd";
        FileUploadTypes["uvs"] = "video/vnd.dece.sd";
        FileUploadTypes["uvv"] = "video/vnd.dece.video";
        FileUploadTypes["dvi"] = "application/x-dvi";
        FileUploadTypes["seed"] = "application/vnd.fdsn.seed";
        FileUploadTypes["dtb"] = "application/x-dtbook+xml";
        FileUploadTypes["res"] = "application/x-dtbresource+xml";
        FileUploadTypes["ait"] = "application/vnd.dvb.ait";
        FileUploadTypes["svc"] = "application/vnd.dvb.service";
        FileUploadTypes["eol"] = "audio/vnd.digital-winds";
        FileUploadTypes["djvu"] = "image/vnd.djvu";
        FileUploadTypes["dtd"] = "application/xml-dtd";
        FileUploadTypes["mlp"] = "application/vnd.dolby.mlp";
        FileUploadTypes["wad"] = "application/x-doom";
        FileUploadTypes["dpg"] = "application/vnd.dpgraph";
        FileUploadTypes["dra"] = "audio/vnd.dra";
        FileUploadTypes["dfac"] = "application/vnd.dreamfactory";
        FileUploadTypes["dts"] = "audio/vnd.dts";
        FileUploadTypes["dtshd"] = "audio/vnd.dts.hd";
        FileUploadTypes["dwg"] = "image/vnd.dwg";
        FileUploadTypes["geo"] = "application/vnd.dynageo";
        FileUploadTypes["es"] = "application/ecmascript";
        FileUploadTypes["mag"] = "application/vnd.ecowin.chart";
        FileUploadTypes["mmr"] = "image/vnd.fujixerox.edmics-mmr";
        FileUploadTypes["rlc"] = "image/vnd.fujixerox.edmics-rlc";
        FileUploadTypes["exi"] = "application/exi";
        FileUploadTypes["mgz"] = "application/vnd.proteus.magazine";
        FileUploadTypes["epub"] = "application/epub+zip";
        FileUploadTypes["eml"] = "message/rfc822";
        FileUploadTypes["nml"] = "application/vnd.enliven";
        FileUploadTypes["xpr"] = "application/vnd.is-xpr";
        FileUploadTypes["xif"] = "image/vnd.xiff";
        FileUploadTypes["xfdl"] = "application/vnd.xfdl";
        FileUploadTypes["emma"] = "application/emma+xml";
        FileUploadTypes["ez2"] = "application/vnd.ezpix-album";
        FileUploadTypes["ez3"] = "application/vnd.ezpix-package";
        FileUploadTypes["fst"] = "image/vnd.fst";
        FileUploadTypes["fvt"] = "video/vnd.fvt";
        FileUploadTypes["fbs"] = "image/vnd.fastbidsheet";
        FileUploadTypes["fe_launch"] = "application/vnd.denovo.fcselayout-link";
        FileUploadTypes["f4v"] = "video/x-f4v";
        FileUploadTypes["flv"] = "video/x-flv";
        FileUploadTypes["fpx"] = "image/vnd.fpx";
        FileUploadTypes["npx"] = "image/vnd.net-fpx";
        FileUploadTypes["flx"] = "text/vnd.fmi.flexstor";
        FileUploadTypes["fli"] = "video/x-fli";
        FileUploadTypes["ftc"] = "application/vnd.fluxtime.clip";
        FileUploadTypes["fdf"] = "application/vnd.fdf";
        FileUploadTypes["f"] = "text/x-fortran";
        FileUploadTypes["mif"] = "application/vnd.mif";
        FileUploadTypes["fm"] = "application/vnd.framemaker";
        FileUploadTypes["fh"] = "image/x-freehand";
        FileUploadTypes["fsc"] = "application/vnd.fsc.weblaunch";
        FileUploadTypes["fnc"] = "application/vnd.frogans.fnc";
        FileUploadTypes["ltf"] = "application/vnd.frogans.ltf";
        FileUploadTypes["ddd"] = "application/vnd.fujixerox.ddd";
        FileUploadTypes["xdw"] = "application/vnd.fujixerox.docuworks";
        FileUploadTypes["xbd"] = "application/vnd.fujixerox.docuworks.binder";
        FileUploadTypes["oas"] = "application/vnd.fujitsu.oasys";
        FileUploadTypes["oa2"] = "application/vnd.fujitsu.oasys2";
        FileUploadTypes["oa3"] = "application/vnd.fujitsu.oasys3";
        FileUploadTypes["fg5"] = "application/vnd.fujitsu.oasysgp";
        FileUploadTypes["bh2"] = "application/vnd.fujitsu.oasysprs";
        FileUploadTypes["spl"] = "application/x-futuresplash";
        FileUploadTypes["fzs"] = "application/vnd.fuzzysheet";
        FileUploadTypes["g3"] = "image/g3fax";
        FileUploadTypes["gmx"] = "application/vnd.gmx";
        FileUploadTypes["gtw"] = "model/vnd.gtw";
        FileUploadTypes["txd"] = "application/vnd.genomatix.tuxedo";
        FileUploadTypes["ggb"] = "application/vnd.geogebra.file";
        FileUploadTypes["ggt"] = "application/vnd.geogebra.tool";
        FileUploadTypes["gdl"] = "model/vnd.gdl";
        FileUploadTypes["gex"] = "application/vnd.geometry-explorer";
        FileUploadTypes["gxt"] = "application/vnd.geonext";
        FileUploadTypes["g2w"] = "application/vnd.geoplan";
        FileUploadTypes["g3w"] = "application/vnd.geospace";
        FileUploadTypes["gsf"] = "application/x-font-ghostscript";
        FileUploadTypes["bdf"] = "application/x-font-bdf";
        FileUploadTypes["gtar"] = "application/x-gtar";
        FileUploadTypes["texinfo"] = "application/x-texinfo";
        FileUploadTypes["gnumeric"] = "application/x-gnumeric";
        FileUploadTypes["kml"] = "application/vnd.google-earth.kml+xml";
        FileUploadTypes["kmz"] = "application/vnd.google-earth.kmz";
        FileUploadTypes["gqf"] = "application/vnd.grafeq";
        FileUploadTypes["gif"] = "image/gif";
        FileUploadTypes["gv"] = "text/vnd.graphviz";
        FileUploadTypes["gac"] = "application/vnd.groove-account";
        FileUploadTypes["ghf"] = "application/vnd.groove-help";
        FileUploadTypes["gim"] = "application/vnd.groove-identity-message";
        FileUploadTypes["grv"] = "application/vnd.groove-injector";
        FileUploadTypes["gtm"] = "application/vnd.groove-tool-message";
        FileUploadTypes["tpl"] = "application/vnd.groove-tool-template";
        FileUploadTypes["vcg"] = "application/vnd.groove-vcard";
        FileUploadTypes["h261"] = "video/h261";
        FileUploadTypes["h263"] = "video/h263";
        FileUploadTypes["h264"] = "video/h264";
        FileUploadTypes["hpid"] = "application/vnd.hp-hpid";
        FileUploadTypes["hps"] = "application/vnd.hp-hps";
        FileUploadTypes["hdf"] = "application/x-hdf";
        FileUploadTypes["rip"] = "audio/vnd.rip";
        FileUploadTypes["hbci"] = "application/vnd.hbci";
        FileUploadTypes["jlt"] = "application/vnd.hp-jlyt";
        FileUploadTypes["pcl"] = "application/vnd.hp-pcl";
        FileUploadTypes["hpgl"] = "application/vnd.hp-hpgl";
        FileUploadTypes["hvs"] = "application/vnd.yamaha.hv-script";
        FileUploadTypes["hvd"] = "application/vnd.yamaha.hv-dic";
        FileUploadTypes["hvp"] = "application/vnd.yamaha.hv-voice";
        FileUploadTypes["sfd-hdstx"] = "application/vnd.hydrostatix.sof-data";
        FileUploadTypes["stk"] = "application/hyperstudio";
        FileUploadTypes["hal"] = "application/vnd.hal+xml";
        FileUploadTypes["html"] = "text/html";
        FileUploadTypes["irm"] = "application/vnd.ibm.rights-management";
        FileUploadTypes["sc"] = "application/vnd.ibm.secure-container";
        FileUploadTypes["ics"] = "text/calendar";
        FileUploadTypes["icc"] = "application/vnd.iccprofile";
        FileUploadTypes["ico"] = "image/x-icon";
        FileUploadTypes["igl"] = "application/vnd.igloader";
        FileUploadTypes["ief"] = "image/ief";
        FileUploadTypes["ivp"] = "application/vnd.immervision-ivp";
        FileUploadTypes["ivu"] = "application/vnd.immervision-ivu";
        FileUploadTypes["rif"] = "application/reginfo+xml";
        FileUploadTypes["3dml"] = "text/vnd.in3d.3dml";
        FileUploadTypes["spot"] = "text/vnd.in3d.spot";
        FileUploadTypes["igs"] = "model/iges";
        FileUploadTypes["i2g"] = "application/vnd.intergeo";
        FileUploadTypes["cdy"] = "application/vnd.cinderella";
        FileUploadTypes["xpw"] = "application/vnd.intercon.formnet";
        FileUploadTypes["fcs"] = "application/vnd.isac.fcs";
        FileUploadTypes["ipfix"] = "application/ipfix";
        FileUploadTypes["cer"] = "application/pkix-cert";
        FileUploadTypes["pki"] = "application/pkixcmp";
        FileUploadTypes["crl"] = "application/pkix-crl";
        FileUploadTypes["pkipath"] = "application/pkix-pkipath";
        FileUploadTypes["igm"] = "application/vnd.insors.igm";
        FileUploadTypes["rcprofile"] = "application/vnd.ipunplugged.rcprofile";
        FileUploadTypes["irp"] = "application/vnd.irepository.package+xml";
        FileUploadTypes["jad"] = "text/vnd.sun.j2me.app-descriptor";
        FileUploadTypes["jar"] = "application/java-archive";
        FileUploadTypes["class"] = "application/java-vm";
        FileUploadTypes["jnlp"] = "application/x-java-jnlp-file";
        FileUploadTypes["ser"] = "application/java-serialized-object";
        FileUploadTypes["java"] = "text/x-java-source,java";
        FileUploadTypes["js"] = "application/javascript";
        FileUploadTypes["json"] = "application/json";
        FileUploadTypes["joda"] = "application/vnd.joost.joda-archive";
        FileUploadTypes["jpm"] = "video/jpm";
        FileUploadTypes["jpg"] = "image/jpeg";
        FileUploadTypes["pjpeg"] = "image/pjpeg";
        FileUploadTypes["jpgv"] = "video/jpeg";
        FileUploadTypes["ktz"] = "application/vnd.kahootz";
        FileUploadTypes["mmd"] = "application/vnd.chipnuts.karaoke-mmd";
        FileUploadTypes["karbon"] = "application/vnd.kde.karbon";
        FileUploadTypes["chrt"] = "application/vnd.kde.kchart";
        FileUploadTypes["kfo"] = "application/vnd.kde.kformula";
        FileUploadTypes["flw"] = "application/vnd.kde.kivio";
        FileUploadTypes["kon"] = "application/vnd.kde.kontour";
        FileUploadTypes["kpr"] = "application/vnd.kde.kpresenter";
        FileUploadTypes["ksp"] = "application/vnd.kde.kspread";
        FileUploadTypes["kwd"] = "application/vnd.kde.kword";
        FileUploadTypes["htke"] = "application/vnd.kenameaapp";
        FileUploadTypes["kia"] = "application/vnd.kidspiration";
        FileUploadTypes["kne"] = "application/vnd.kinar";
        FileUploadTypes["sse"] = "application/vnd.kodak-descriptor";
        FileUploadTypes["lasxml"] = "application/vnd.las.las+xml";
        FileUploadTypes["latex"] = "application/x-latex";
        FileUploadTypes["lbd"] = "application/vnd.llamagraphics.life-balance.desktop";
        FileUploadTypes["lbe"] = "application/vnd.llamagraphics.life-balance.exchange+xml";
        FileUploadTypes["jam"] = "application/vnd.jam";
        FileUploadTypes["apr"] = "application/vnd.lotus-approach";
        FileUploadTypes["pre"] = "application/vnd.lotus-freelance";
        FileUploadTypes["nsf"] = "application/vnd.lotus-notes";
        FileUploadTypes["org"] = "application/vnd.lotus-organizer";
        FileUploadTypes["scm"] = "application/vnd.lotus-screencam";
        FileUploadTypes["lwp"] = "application/vnd.lotus-wordpro";
        FileUploadTypes["lvp"] = "audio/vnd.lucent.voice";
        FileUploadTypes["m3u"] = "audio/x-mpegurl";
        FileUploadTypes["m4v"] = "video/x-m4v";
        FileUploadTypes["hqx"] = "application/mac-binhex40";
        FileUploadTypes["portpkg"] = "application/vnd.macports.portpkg";
        FileUploadTypes["mgp"] = "application/vnd.osgeo.mapguide.package";
        FileUploadTypes["mrc"] = "application/marc";
        FileUploadTypes["mrcx"] = "application/marcxml+xml";
        FileUploadTypes["mxf"] = "application/mxf";
        FileUploadTypes["nbp"] = "application/vnd.wolfram.player";
        FileUploadTypes["ma"] = "application/mathematica";
        FileUploadTypes["mathml"] = "application/mathml+xml";
        FileUploadTypes["mbox"] = "application/mbox";
        FileUploadTypes["mc1"] = "application/vnd.medcalcdata";
        FileUploadTypes["mscml"] = "application/mediaservercontrol+xml";
        FileUploadTypes["cdkey"] = "application/vnd.mediastation.cdkey";
        FileUploadTypes["mwf"] = "application/vnd.mfer";
        FileUploadTypes["mfm"] = "application/vnd.mfmp";
        FileUploadTypes["msh"] = "model/mesh";
        FileUploadTypes["mads"] = "application/mads+xml";
        FileUploadTypes["mets"] = "application/mets+xml";
        FileUploadTypes["mods"] = "application/mods+xml";
        FileUploadTypes["meta4"] = "application/metalink4+xml";
        FileUploadTypes["mcd"] = "application/vnd.mcd";
        FileUploadTypes["flo"] = "application/vnd.micrografx.flo";
        FileUploadTypes["igx"] = "application/vnd.micrografx.igx";
        FileUploadTypes["es3"] = "application/vnd.eszigno3+xml";
        FileUploadTypes["mdb"] = "application/x-msaccess";
        FileUploadTypes["asf"] = "video/x-ms-asf";
        FileUploadTypes["exe"] = "application/x-msdownload";
        FileUploadTypes["cil"] = "application/vnd.ms-artgalry";
        FileUploadTypes["cab"] = "application/vnd.ms-cab-compressed";
        FileUploadTypes["ims"] = "application/vnd.ms-ims";
        FileUploadTypes["application"] = "application/x-ms-application";
        FileUploadTypes["clp"] = "application/x-msclip";
        FileUploadTypes["mdi"] = "image/vnd.ms-modi";
        FileUploadTypes["eot"] = "application/vnd.ms-fontobject";
        FileUploadTypes["xls"] = "application/vnd.ms-excel";
        FileUploadTypes["xlam"] = "application/vnd.ms-excel.addin.macroenabled.12";
        FileUploadTypes["xlsb"] = "application/vnd.ms-excel.sheet.binary.macroenabled.12";
        FileUploadTypes["xltm"] = "application/vnd.ms-excel.template.macroenabled.12";
        FileUploadTypes["xlsm"] = "application/vnd.ms-excel.sheet.macroenabled.12";
        FileUploadTypes["chm"] = "application/vnd.ms-htmlhelp";
        FileUploadTypes["crd"] = "application/x-mscardfile";
        FileUploadTypes["lrm"] = "application/vnd.ms-lrm";
        FileUploadTypes["mvb"] = "application/x-msmediaview";
        FileUploadTypes["mny"] = "application/x-msmoney";
        FileUploadTypes["pptx"] = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
        FileUploadTypes["sldx"] = "application/vnd.openxmlformats-officedocument.presentationml.slide";
        FileUploadTypes["ppsx"] = "application/vnd.openxmlformats-officedocument.presentationml.slideshow";
        FileUploadTypes["potx"] = "application/vnd.openxmlformats-officedocument.presentationml.template";
        FileUploadTypes["xlsx"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        FileUploadTypes["xltx"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.template";
        FileUploadTypes["docx"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
        FileUploadTypes["dotx"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.template";
        FileUploadTypes["obd"] = "application/x-msbinder";
        FileUploadTypes["thmx"] = "application/vnd.ms-officetheme";
        FileUploadTypes["onetoc"] = "application/onenote";
        FileUploadTypes["pya"] = "audio/vnd.ms-playready.media.pya";
        FileUploadTypes["pyv"] = "video/vnd.ms-playready.media.pyv";
        FileUploadTypes["ppt"] = "application/vnd.ms-powerpoint";
        FileUploadTypes["ppa"] = "application/vnd.ms-powerpoint";
        FileUploadTypes["ppam"] = "application/vnd.ms-powerpoint.addin.macroenabled.12";
        FileUploadTypes["sldm"] = "application/vnd.ms-powerpoint.slide.macroenabled.12";
        FileUploadTypes["pptm"] = "application/vnd.ms-powerpoint.presentation.macroenabled.12";
        FileUploadTypes["ppsm"] = "application/vnd.ms-powerpoint.slideshow.macroenabled.12";
        FileUploadTypes["potm"] = "application/vnd.ms-powerpoint.template.macroenabled.12";
        FileUploadTypes["mpp"] = "application/vnd.ms-project";
        FileUploadTypes["pub"] = "application/x-mspublisher";
        FileUploadTypes["scd"] = "application/x-msschedule";
        FileUploadTypes["xap"] = "application/x-silverlight-app";
        FileUploadTypes["stl"] = "application/vnd.ms-pki.stl";
        FileUploadTypes["cat"] = "application/vnd.ms-pki.seccat";
        FileUploadTypes["vsd"] = "application/vnd.visio";
        FileUploadTypes["vsdx"] = "application/vnd.visio2013";
        FileUploadTypes["wm"] = "video/x-ms-wm";
        FileUploadTypes["wma"] = "audio/x-ms-wma";
        FileUploadTypes["wax"] = "audio/x-ms-wax";
        FileUploadTypes["wmx"] = "video/x-ms-wmx";
        FileUploadTypes["wmd"] = "application/x-ms-wmd";
        FileUploadTypes["wpl"] = "application/vnd.ms-wpl";
        FileUploadTypes["wmz"] = "application/x-ms-wmz";
        FileUploadTypes["wmv"] = "video/x-ms-wmv";
        FileUploadTypes["wvx"] = "video/x-ms-wvx";
        FileUploadTypes["wmf"] = "application/x-msmetafile";
        FileUploadTypes["trm"] = "application/x-msterminal";
        FileUploadTypes["doc"] = "application/msword";
        FileUploadTypes["docm"] = "application/vnd.ms-word.document.macroenabled.12";
        FileUploadTypes["dotm"] = "application/vnd.ms-word.template.macroenabled.12";
        FileUploadTypes["wri"] = "application/x-mswrite";
        FileUploadTypes["wps"] = "application/vnd.ms-works";
        FileUploadTypes["xbap"] = "application/x-ms-xbap";
        FileUploadTypes["xps"] = "application/vnd.ms-xpsdocument";
        FileUploadTypes["mid"] = "audio/midi";
        FileUploadTypes["mpy"] = "application/vnd.ibm.minipay";
        FileUploadTypes["afp"] = "application/vnd.ibm.modcap";
        FileUploadTypes["rms"] = "application/vnd.jcp.javame.midlet-rms";
        FileUploadTypes["tmo"] = "application/vnd.tmobile-livetv";
        FileUploadTypes["prc"] = "application/x-mobipocket-ebook";
        FileUploadTypes["mbk"] = "application/vnd.mobius.mbk";
        FileUploadTypes["dis"] = "application/vnd.mobius.dis";
        FileUploadTypes["plc"] = "application/vnd.mobius.plc";
        FileUploadTypes["mqy"] = "application/vnd.mobius.mqy";
        FileUploadTypes["msl"] = "application/vnd.mobius.msl";
        FileUploadTypes["txf"] = "application/vnd.mobius.txf";
        FileUploadTypes["daf"] = "application/vnd.mobius.daf";
        FileUploadTypes["fly"] = "text/vnd.fly";
        FileUploadTypes["mpc"] = "application/vnd.mophun.certificate";
        FileUploadTypes["mpn"] = "application/vnd.mophun.application";
        FileUploadTypes["mj2"] = "video/mj2";
        FileUploadTypes["mpga"] = "audio/mpeg";
        FileUploadTypes["mxu"] = "video/vnd.mpegurl";
        FileUploadTypes["mpeg"] = "video/mpeg";
        FileUploadTypes["m21"] = "application/mp21";
        FileUploadTypes["mp4a"] = "audio/mp4";
        FileUploadTypes["mp4"] = "video/mp4";
        FileUploadTypes["m3u8"] = "application/vnd.apple.mpegurl";
        FileUploadTypes["mus"] = "application/vnd.musician";
        FileUploadTypes["msty"] = "application/vnd.muvee.style";
        FileUploadTypes["mxml"] = "application/xv+xml";
        FileUploadTypes["ngdat"] = "application/vnd.nokia.n-gage.data";
        FileUploadTypes["n-gage"] = "application/vnd.nokia.n-gage.symbian.install";
        FileUploadTypes["ncx"] = "application/x-dtbncx+xml";
        FileUploadTypes["nc"] = "application/x-netcdf";
        FileUploadTypes["nlu"] = "application/vnd.neurolanguage.nlu";
        FileUploadTypes["dna"] = "application/vnd.dna";
        FileUploadTypes["nnd"] = "application/vnd.noblenet-directory";
        FileUploadTypes["nns"] = "application/vnd.noblenet-sealer";
        FileUploadTypes["nnw"] = "application/vnd.noblenet-web";
        FileUploadTypes["rpst"] = "application/vnd.nokia.radio-preset";
        FileUploadTypes["rpss"] = "application/vnd.nokia.radio-presets";
        FileUploadTypes["n3"] = "text/n3";
        FileUploadTypes["edm"] = "application/vnd.novadigm.edm";
        FileUploadTypes["edx"] = "application/vnd.novadigm.edx";
        FileUploadTypes["ext"] = "application/vnd.novadigm.ext";
        FileUploadTypes["gph"] = "application/vnd.flographit";
        FileUploadTypes["ecelp4800"] = "audio/vnd.nuera.ecelp4800";
        FileUploadTypes["ecelp7470"] = "audio/vnd.nuera.ecelp7470";
        FileUploadTypes["ecelp9600"] = "audio/vnd.nuera.ecelp9600";
        FileUploadTypes["oda"] = "application/oda";
        FileUploadTypes["ogx"] = "application/ogg";
        FileUploadTypes["oga"] = "audio/ogg";
        FileUploadTypes["ogv"] = "video/ogg";
        FileUploadTypes["dd2"] = "application/vnd.oma.dd2+xml";
        FileUploadTypes["oth"] = "application/vnd.oasis.opendocument.text-web";
        FileUploadTypes["opf"] = "application/oebps-package+xml";
        FileUploadTypes["qbo"] = "application/vnd.intu.qbo";
        FileUploadTypes["oxt"] = "application/vnd.openofficeorg.extension";
        FileUploadTypes["osf"] = "application/vnd.yamaha.openscoreformat";
        FileUploadTypes["weba"] = "audio/webm";
        FileUploadTypes["webm"] = "video/webm";
        FileUploadTypes["odc"] = "application/vnd.oasis.opendocument.chart";
        FileUploadTypes["otc"] = "application/vnd.oasis.opendocument.chart-template";
        FileUploadTypes["odb"] = "application/vnd.oasis.opendocument.database";
        FileUploadTypes["odf"] = "application/vnd.oasis.opendocument.formula";
        FileUploadTypes["odft"] = "application/vnd.oasis.opendocument.formula-template";
        FileUploadTypes["odg"] = "application/vnd.oasis.opendocument.graphics";
        FileUploadTypes["otg"] = "application/vnd.oasis.opendocument.graphics-template";
        FileUploadTypes["odi"] = "application/vnd.oasis.opendocument.image";
        FileUploadTypes["oti"] = "application/vnd.oasis.opendocument.image-template";
        FileUploadTypes["odp"] = "application/vnd.oasis.opendocument.presentation";
        FileUploadTypes["otp"] = "application/vnd.oasis.opendocument.presentation-template";
        FileUploadTypes["ods"] = "application/vnd.oasis.opendocument.spreadsheet";
        FileUploadTypes["ots"] = "application/vnd.oasis.opendocument.spreadsheet-template";
        FileUploadTypes["odt"] = "application/vnd.oasis.opendocument.text";
        FileUploadTypes["odm"] = "application/vnd.oasis.opendocument.text-master";
        FileUploadTypes["ott"] = "application/vnd.oasis.opendocument.text-template";
        FileUploadTypes["ktx"] = "image/ktx";
        FileUploadTypes["sxc"] = "application/vnd.sun.xml.calc";
        FileUploadTypes["stc"] = "application/vnd.sun.xml.calc.template";
        FileUploadTypes["sxd"] = "application/vnd.sun.xml.draw";
        FileUploadTypes["std"] = "application/vnd.sun.xml.draw.template";
        FileUploadTypes["sxi"] = "application/vnd.sun.xml.impress";
        FileUploadTypes["sti"] = "application/vnd.sun.xml.impress.template";
        FileUploadTypes["sxm"] = "application/vnd.sun.xml.math";
        FileUploadTypes["sxw"] = "application/vnd.sun.xml.writer";
        FileUploadTypes["sxg"] = "application/vnd.sun.xml.writer.global";
        FileUploadTypes["stw"] = "application/vnd.sun.xml.writer.template";
        FileUploadTypes["otf"] = "application/x-font-otf";
        FileUploadTypes["osfpvg"] = "application/vnd.yamaha.openscoreformat.osfpvg+xml";
        FileUploadTypes["dp"] = "application/vnd.osgi.dp";
        FileUploadTypes["pdb"] = "application/vnd.palm";
        FileUploadTypes["p"] = "text/x-pascal";
        FileUploadTypes["paw"] = "application/vnd.pawaafile";
        FileUploadTypes["pclxl"] = "application/vnd.hp-pclxl";
        FileUploadTypes["efif"] = "application/vnd.picsel";
        FileUploadTypes["pcx"] = "image/x-pcx";
        FileUploadTypes["psd"] = "image/vnd.adobe.photoshop";
        FileUploadTypes["prf"] = "application/pics-rules";
        FileUploadTypes["pic"] = "image/x-pict";
        FileUploadTypes["chat"] = "application/x-chat";
        FileUploadTypes["p10"] = "application/pkcs10";
        FileUploadTypes["p12"] = "application/x-pkcs12";
        FileUploadTypes["p7m"] = "application/pkcs7-mime";
        FileUploadTypes["p7s"] = "application/pkcs7-signature";
        FileUploadTypes["p7r"] = "application/x-pkcs7-certreqresp";
        FileUploadTypes["p7b"] = "application/x-pkcs7-certificates";
        FileUploadTypes["p8"] = "application/pkcs8";
        FileUploadTypes["plf"] = "application/vnd.pocketlearn";
        FileUploadTypes["pnm"] = "image/x-portable-anymap";
        FileUploadTypes["pbm"] = "image/x-portable-bitmap";
        FileUploadTypes["pcf"] = "application/x-font-pcf";
        FileUploadTypes["pfr"] = "application/font-tdpfr";
        FileUploadTypes["pgn"] = "application/x-chess-pgn";
        FileUploadTypes["pgm"] = "image/x-portable-graymap";
        FileUploadTypes["png"] = "image/png";
        FileUploadTypes["ppm"] = "image/x-portable-pixmap";
        FileUploadTypes["pskcxml"] = "application/pskc+xml";
        FileUploadTypes["pml"] = "application/vnd.ctc-posml";
        FileUploadTypes["ai"] = "application/postscript";
        FileUploadTypes["pfa"] = "application/x-font-type1";
        FileUploadTypes["pbd"] = "application/vnd.powerbuilder6";
        FileUploadTypes["pgp"] = "application/pgp-encrypted";
        FileUploadTypes["box"] = "application/vnd.previewsystems.box";
        FileUploadTypes["ptid"] = "application/vnd.pvi.ptid1";
        FileUploadTypes["pls"] = "application/pls+xml";
        FileUploadTypes["str"] = "application/vnd.pg.format";
        FileUploadTypes["ei6"] = "application/vnd.pg.osasli";
        FileUploadTypes["dsc"] = "text/prs.lines.tag";
        FileUploadTypes["psf"] = "application/x-font-linux-psf";
        FileUploadTypes["qps"] = "application/vnd.publishare-delta-tree";
        FileUploadTypes["wg"] = "application/vnd.pmi.widget";
        FileUploadTypes["qxd"] = "application/vnd.quark.quarkxpress";
        FileUploadTypes["esf"] = "application/vnd.epson.esf";
        FileUploadTypes["msf"] = "application/vnd.epson.msf";
        FileUploadTypes["ssf"] = "application/vnd.epson.ssf";
        FileUploadTypes["qam"] = "application/vnd.epson.quickanime";
        FileUploadTypes["qfx"] = "application/vnd.intu.qfx";
        FileUploadTypes["qt"] = "video/quicktime";
        FileUploadTypes["rar"] = "application/x-rar-compressed";
        FileUploadTypes["ram"] = "audio/x-pn-realaudio";
        FileUploadTypes["rmp"] = "audio/x-pn-realaudio-plugin";
        FileUploadTypes["rsd"] = "application/rsd+xml";
        FileUploadTypes["rm"] = "application/vnd.rn-realmedia";
        FileUploadTypes["bed"] = "application/vnd.realvnc.bed";
        FileUploadTypes["mxl"] = "application/vnd.recordare.musicxml";
        FileUploadTypes["musicxml"] = "application/vnd.recordare.musicxml+xml";
        FileUploadTypes["rnc"] = "application/relax-ng-compact-syntax";
        FileUploadTypes["rdz"] = "application/vnd.data-vision.rdz";
        FileUploadTypes["rdf"] = "application/rdf+xml";
        FileUploadTypes["rp9"] = "application/vnd.cloanto.rp9";
        FileUploadTypes["jisp"] = "application/vnd.jisp";
        FileUploadTypes["rtf"] = "application/rtf";
        FileUploadTypes["rtx"] = "text/richtext";
        FileUploadTypes["link66"] = "application/vnd.route66.link66+xml";
        FileUploadTypes["rss"] = "application/rss+xml,";
        FileUploadTypes["shf"] = "application/shf+xml";
        FileUploadTypes["st"] = "application/vnd.sailingtracker.track";
        FileUploadTypes["svg"] = "image/svg+xml";
        FileUploadTypes["sus"] = "application/vnd.sus-calendar";
        FileUploadTypes["sru"] = "application/sru+xml";
        FileUploadTypes["setpay"] = "application/set-payment-initiation";
        FileUploadTypes["setreg"] = "application/set-registration-initiation";
        FileUploadTypes["sema"] = "application/vnd.sema";
        FileUploadTypes["semd"] = "application/vnd.semd";
        FileUploadTypes["semf"] = "application/vnd.semf";
        FileUploadTypes["see"] = "application/vnd.seemail";
        FileUploadTypes["snf"] = "application/x-font-snf";
        FileUploadTypes["spq"] = "application/scvp-vp-request";
        FileUploadTypes["spp"] = "application/scvp-vp-response";
        FileUploadTypes["scq"] = "application/scvp-cv-request";
        FileUploadTypes["scs"] = "application/scvp-cv-response";
        FileUploadTypes["sdp"] = "application/sdp";
        FileUploadTypes["etx"] = "text/x-setext";
        FileUploadTypes["movie"] = "video/x-sgi-movie";
        FileUploadTypes["ifm"] = "application/vnd.shana.informed.formdata";
        FileUploadTypes["itp"] = "application/vnd.shana.informed.formtemplate";
        FileUploadTypes["iif"] = "application/vnd.shana.informed.interchange";
        FileUploadTypes["ipk"] = "application/vnd.shana.informed.package";
        FileUploadTypes["tfi"] = "application/thraud+xml";
        FileUploadTypes["shar"] = "application/x-shar";
        FileUploadTypes["rgb"] = "image/x-rgb";
        FileUploadTypes["slt"] = "application/vnd.epson.salt";
        FileUploadTypes["aso"] = "application/vnd.accpac.simply.aso";
        FileUploadTypes["imp"] = "application/vnd.accpac.simply.imp";
        FileUploadTypes["twd"] = "application/vnd.simtech-mindmapper";
        FileUploadTypes["csp"] = "application/vnd.commonspace";
        FileUploadTypes["saf"] = "application/vnd.yamaha.smaf-audio";
        FileUploadTypes["mmf"] = "application/vnd.smaf";
        FileUploadTypes["spf"] = "application/vnd.yamaha.smaf-phrase";
        FileUploadTypes["teacher"] = "application/vnd.smart.teacher";
        FileUploadTypes["svd"] = "application/vnd.svd";
        FileUploadTypes["rq"] = "application/sparql-query";
        FileUploadTypes["srx"] = "application/sparql-results+xml";
        FileUploadTypes["gram"] = "application/srgs";
        FileUploadTypes["grxml"] = "application/srgs+xml";
        FileUploadTypes["ssml"] = "application/ssml+xml";
        FileUploadTypes["skp"] = "application/vnd.koan";
        FileUploadTypes["sgml"] = "text/sgml";
        FileUploadTypes["sdc"] = "application/vnd.stardivision.calc";
        FileUploadTypes["sda"] = "application/vnd.stardivision.draw";
        FileUploadTypes["sdd"] = "application/vnd.stardivision.impress";
        FileUploadTypes["smf"] = "application/vnd.stardivision.math";
        FileUploadTypes["sdw"] = "application/vnd.stardivision.writer";
        FileUploadTypes["sgl"] = "application/vnd.stardivision.writer-global";
        FileUploadTypes["sm"] = "application/vnd.stepmania.stepchart";
        FileUploadTypes["sit"] = "application/x-stuffit";
        FileUploadTypes["sitx"] = "application/x-stuffitx";
        FileUploadTypes["sdkm"] = "application/vnd.solent.sdkm+xml";
        FileUploadTypes["xo"] = "application/vnd.olpc-sugar";
        FileUploadTypes["au"] = "audio/basic";
        FileUploadTypes["wqd"] = "application/vnd.wqd";
        FileUploadTypes["sis"] = "application/vnd.symbian.install";
        FileUploadTypes["smi"] = "application/smil+xml";
        FileUploadTypes["xsm"] = "application/vnd.syncml+xml";
        FileUploadTypes["bdm"] = "application/vnd.syncml.dm+wbxml";
        FileUploadTypes["xdm"] = "application/vnd.syncml.dm+xml";
        FileUploadTypes["sv4cpio"] = "application/x-sv4cpio";
        FileUploadTypes["sv4crc"] = "application/x-sv4crc";
        FileUploadTypes["sbml"] = "application/sbml+xml";
        FileUploadTypes["tsv"] = "text/tab-separated-values";
        FileUploadTypes["tiff"] = "image/tiff";
        FileUploadTypes["tao"] = "application/vnd.tao.intent-module-archive";
        FileUploadTypes["tar"] = "application/x-tar";
        FileUploadTypes["tcl"] = "application/x-tcl";
        FileUploadTypes["tex"] = "application/x-tex";
        FileUploadTypes["tfm"] = "application/x-tex-tfm";
        FileUploadTypes["tei"] = "application/tei+xml";
        FileUploadTypes["txt"] = "text/plain";
        FileUploadTypes["dxp"] = "application/vnd.spotfire.dxp";
        FileUploadTypes["sfs"] = "application/vnd.spotfire.sfs";
        FileUploadTypes["tsd"] = "application/timestamped-data";
        FileUploadTypes["tpt"] = "application/vnd.trid.tpt";
        FileUploadTypes["mxs"] = "application/vnd.triscape.mxs";
        FileUploadTypes["t"] = "text/troff";
        FileUploadTypes["tra"] = "application/vnd.trueapp";
        FileUploadTypes["ttf"] = "application/x-font-ttf";
        FileUploadTypes["ttl"] = "text/turtle";
        FileUploadTypes["umj"] = "application/vnd.umajin";
        FileUploadTypes["uoml"] = "application/vnd.uoml+xml";
        FileUploadTypes["unityweb"] = "application/vnd.unity";
        FileUploadTypes["ufd"] = "application/vnd.ufdl";
        FileUploadTypes["uri"] = "text/uri-list";
        FileUploadTypes["utz"] = "application/vnd.uiq.theme";
        FileUploadTypes["ustar"] = "application/x-ustar";
        FileUploadTypes["uu"] = "text/x-uuencode";
        FileUploadTypes["vcs"] = "text/x-vcalendar";
        FileUploadTypes["vcf"] = "text/x-vcard";
        FileUploadTypes["vcd"] = "application/x-cdlink";
        FileUploadTypes["vsf"] = "application/vnd.vsf";
        FileUploadTypes["wrl"] = "model/vrml";
        FileUploadTypes["vcx"] = "application/vnd.vcx";
        FileUploadTypes["mts"] = "model/vnd.mts";
        FileUploadTypes["vtu"] = "model/vnd.vtu";
        FileUploadTypes["vis"] = "application/vnd.visionary";
        FileUploadTypes["viv"] = "video/vnd.vivo";
        FileUploadTypes["ccxml"] = "application/ccxml+xml,";
        FileUploadTypes["vxml"] = "application/voicexml+xml";
        FileUploadTypes["src"] = "application/x-wais-source";
        FileUploadTypes["wbxml"] = "application/vnd.wap.wbxml";
        FileUploadTypes["wbmp"] = "image/vnd.wap.wbmp";
        FileUploadTypes["wav"] = "audio/x-wav";
        FileUploadTypes["davmount"] = "application/davmount+xml";
        FileUploadTypes["woff"] = "application/x-font-woff";
        FileUploadTypes["wspolicy"] = "application/wspolicy+xml";
        FileUploadTypes["webp"] = "image/webp";
        FileUploadTypes["wtb"] = "application/vnd.webturbo";
        FileUploadTypes["wgt"] = "application/widget";
        FileUploadTypes["hlp"] = "application/winhlp";
        FileUploadTypes["wml"] = "text/vnd.wap.wml";
        FileUploadTypes["wmls"] = "text/vnd.wap.wmlscript";
        FileUploadTypes["wmlsc"] = "application/vnd.wap.wmlscriptc";
        FileUploadTypes["wpd"] = "application/vnd.wordperfect";
        FileUploadTypes["stf"] = "application/vnd.wt.stf";
        FileUploadTypes["wsdl"] = "application/wsdl+xml";
        FileUploadTypes["xbm"] = "image/x-xbitmap";
        FileUploadTypes["xpm"] = "image/x-xpixmap";
        FileUploadTypes["xwd"] = "image/x-xwindowdump";
        FileUploadTypes["der"] = "application/x-x509-ca-cert";
        FileUploadTypes["fig"] = "application/x-xfig";
        FileUploadTypes["xhtml"] = "application/xhtml+xml";
        FileUploadTypes["xml"] = "application/xml";
        FileUploadTypes["xdf"] = "application/xcap-diff+xml";
        FileUploadTypes["xenc"] = "application/xenc+xml";
        FileUploadTypes["xer"] = "application/patch-ops-error+xml";
        FileUploadTypes["rl"] = "application/resource-lists+xml";
        FileUploadTypes["rs"] = "application/rls-services+xml";
        FileUploadTypes["rld"] = "application/resource-lists-diff+xml";
        FileUploadTypes["xslt"] = "application/xslt+xml";
        FileUploadTypes["xop"] = "application/xop+xml";
        FileUploadTypes["xpi"] = "application/x-xpinstall";
        FileUploadTypes["xspf"] = "application/xspf+xml";
        FileUploadTypes["xul"] = "application/vnd.mozilla.xul+xml";
        FileUploadTypes["xyz"] = "chemical/x-xyz";
        FileUploadTypes["yaml"] = "text/yaml";
        FileUploadTypes["yang"] = "application/yang";
        FileUploadTypes["yin"] = "application/yin+xml";
        FileUploadTypes["zir"] = "application/vnd.zul";
        FileUploadTypes["zip"] = "application/zip";
    })(exports.FileUploadTypes || (exports.FileUploadTypes = {}));

    function IsNullOrEmpty(value) {
        return value == null || value.length === 0;
    }

    var FileUploadService = /** @class */ (function () {
        function FileUploadService(renderer) {
            this.renderer = renderer;
            this.extensions = ['B', 'KB', 'MB', 'GB'];
            this.sizeRegex = new RegExp("^(\\d+)(?:\\s{0,1})(" + this.extensions.join('|') + ")?$", 'i');
        }
        FileUploadService.prototype.isFileDragDropAvailable = function () {
            var div = this.renderer.createElement('div');
            return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div));
        };
        FileUploadService.prototype.parseSize = function (value) {
            if (IsNullOrEmpty(value)) {
                return 0;
            }
            if (typeof value === 'number') {
                return value;
            }
            var _a = __read(value.match(this.sizeRegex) || [null, '0', 'B'], 3), size = _a[1], extension = _a[2];
            var i = IsNullOrEmpty(extension) ? 0 : this.extensions.indexOf(extension.toUpperCase());
            return parseInt(size, 10) * Math.pow(1024, i < 0 ? 0 : i);
        };
        FileUploadService.prototype.formatSize = function (size) {
            return this.calculateSize(size);
        };
        FileUploadService.prototype.calculateSize = function (size, extensionIndex) {
            if (extensionIndex === void 0) { extensionIndex = 0; }
            if (isNaN(size)) {
                size = 0;
            }
            if (size < 1024) {
                return Math.round(size * 100) / 100 + " " + this.extensions[extensionIndex];
            }
            return this.calculateSize(size / 1024, extensionIndex + 1);
        };
        FileUploadService.prototype.getFileType = function (file) {
            return Object.keys(exports.FileUploadTypes).find(function (key) { return exports.FileUploadTypes[key] === file.type; });
        };
FileUploadService.ɵfac = function FileUploadService_Factory(t) { return new (t || FileUploadService)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
FileUploadService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FileUploadService, factory: function (t) { return FileUploadService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadService, [{
        type: core.Injectable
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, null); })();
        return FileUploadService;
    }());
    FileUploadService.ctorParameters = function () { return [
        { type: core.Renderer2 }
    ]; };

    var InsertAnimation = animations.trigger('insertAnimation', [
        animations.transition('* => *', [
            animations.query(':leave', [
                animations.stagger(30, [
                    animations.animate('.3s', animations.style({ opacity: 0 }))
                ])
            ], { optional: true }),
            animations.query(':enter', [
                animations.style({ opacity: 0 }),
                animations.stagger(30, [
                    animations.animate('.3s', animations.style({ opacity: 1 }))
                ])
            ], { optional: true })
        ])
    ]);

    var ZoomAnimation = animations.trigger('zoomAnimation', [
        animations.transition('static => zoomOut', [
            animations.animate(250, animations.style({ transform: 'translate(-50%, -50%) scale(2, 2)', opacity: 0 })),
        ]),
        animations.transition('static => zoomIn', [
            animations.query(':self', [
                animations.style({ transform: 'translate(-50%, -50%) scale(.2, .2)', opacity: 0, top: '50%', left: '50%', margin: 0 }),
                animations.stagger(50, [
                    animations.animate(250, animations.style({ transform: 'translate(-50%, -50%) scale(1, 1)', opacity: 1 }))
                ])
            ])
        ])
    ]);

    var STATUS;
    (function (STATUS) {
        STATUS[STATUS["INVALID"] = 0] = "INVALID";
        STATUS[STATUS["VALID"] = 1] = "VALID";
        STATUS[STATUS["DISABLED"] = 2] = "DISABLED";
    })(STATUS || (STATUS = {}));
    var FileEvent;
    (function (FileEvent) {
        FileEvent["click"] = "click";
        FileEvent["focus"] = "focus";
        FileEvent["blur"] = "blur";
    })(FileEvent || (FileEvent = {}));
    var FileUploadControl = /** @class */ (function () {
        function FileUploadControl(configuration, validators) {
            this.files = new Map();
            this.listVisible = true;
            this.status = STATUS.VALID;
            this.errors = [];
            this.validators = [];
            this.multipleEnabled = true;
            this.nativeBehavior = false;
            this.multipleChanged = new rxjs.BehaviorSubject(this.multipleEnabled);
            this.statusChanged = new rxjs.Subject();
            this.eventsChanged = new rxjs.Subject();
            this.discardedValue = new rxjs.Subject();
            this.accept = null;
            this.discard = false;
            this.acceptChanged = new rxjs.BehaviorSubject(this.accept);
            /**
             * track status `VALID`, `INVALID` or `DISABLED`
             */
            this.statusChanges = this.statusChanged.asObservable();
            /**
             * emit an event every time the value of the control
             * changes.
             * Initially returns last value
             */
            this.valueChanges = new rxjs.BehaviorSubject([]);
            /**
             * @internal
             * used to trigger layout change for list visibility
             */
            this.listVisibilityChanges = new rxjs.BehaviorSubject(this.listVisible);
            /**
             * track changed on accept attribute
             */
            this.acceptChanges = this.acceptChanged.asObservable();
            /**
             * emit an event every time user programmatically ask for certain event
             */
            this.eventsChanges = this.eventsChanged.asObservable();
            /**
             * track changed on multiple attribute
             */
            this.multipleChanges = this.multipleChanged.asObservable();
            /**
             * track which files were discarded
             */
            this.discardedValueChanges = this.discardedValue.asObservable();
            this.initialState(configuration);
            this.defineValidators(validators);
        }
        /**
         * set functions that determines the synchronous validity of this control.
         */
        FileUploadControl.prototype.setValidators = function (newValidators) {
            this.defineValidators(newValidators);
            this.validate();
            return this;
        };
        FileUploadControl.prototype.addFile = function (file) {
            return this.addMultipleFiles([file]);
        };
        FileUploadControl.prototype.removeFile = function (file) {
            if (!this.disabled) {
                this.files.delete(file.name);
                this.validate();
                this.valueChanges.next(Array.from(this.files.values()));
            }
            return this;
        };
        FileUploadControl.prototype.addFiles = function (files) {
            return this.addMultipleFiles(Array.from(files));
        };
        Object.defineProperty(FileUploadControl.prototype, "valid", {
            get: function () {
                return this.errors.length === 0 && this.status !== STATUS.DISABLED;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FileUploadControl.prototype, "invalid", {
            get: function () {
                return this.errors.length > 0;
            },
            enumerable: false,
            configurable: true
        });
        FileUploadControl.prototype.getError = function () {
            return this.errors;
        };
        Object.defineProperty(FileUploadControl.prototype, "size", {
            /**
             * number of uploaded files
             */
            get: function () {
                return this.files.size;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FileUploadControl.prototype, "value", {
            /**
             * return list of Files
             */
            get: function () {
                return Array.from(this.files.values());
            },
            enumerable: false,
            configurable: true
        });
        FileUploadControl.prototype.setValue = function (files) {
            this.files.clear();
            if (files instanceof Array) {
                this.addMultipleFiles(files);
            }
            else {
                throw Error("FormControl.setValue was provided with wrong argument type, " + files + " was provided instead Array<File>");
            }
            return this;
        };
        /**
         * reset the control
         */
        FileUploadControl.prototype.clear = function () {
            this.files.clear();
            this.validate();
            this.valueChanges.next(Array.from(this.files.values()));
            return this;
        };
        Object.defineProperty(FileUploadControl.prototype, "isListVisible", {
            get: function () {
                return this.listVisible;
            },
            enumerable: false,
            configurable: true
        });
        FileUploadControl.prototype.setListVisibility = function (isVisible) {
            if (isVisible === void 0) { isVisible = true; }
            this.listVisible = isVisible;
            this.listVisibilityChanges.next(this.listVisible);
            return this;
        };
        Object.defineProperty(FileUploadControl.prototype, "disabled", {
            get: function () {
                return this.status === STATUS.DISABLED;
            },
            enumerable: false,
            configurable: true
        });
        FileUploadControl.prototype.enable = function (isEnabled) {
            if (isEnabled === void 0) { isEnabled = true; }
            this.status = isEnabled ? STATUS.VALID : STATUS.DISABLED;
            this.validate();
            this.statusChanged.next(this.status);
            return this;
        };
        FileUploadControl.prototype.disable = function (isDisabled) {
            if (isDisabled === void 0) { isDisabled = true; }
            this.status = isDisabled ? STATUS.DISABLED : STATUS.VALID;
            this.validate();
            this.statusChanged.next(this.status);
            return this;
        };
        FileUploadControl.prototype.click = function () {
            this.eventsChanged.next(FileEvent.click);
            return this;
        };
        FileUploadControl.prototype.focus = function () {
            this.eventsChanged.next(FileEvent.focus);
            return this;
        };
        FileUploadControl.prototype.blur = function () {
            this.eventsChanged.next(FileEvent.blur);
            return this;
        };
        /**
         * specifies the types of files that the server accepts
         *
         * ### Example
         *
         * ```
         * acceptFiles("file_extension|audio/*|video/*|image/*|media_type")
         * ```
         *
         * To specify more than one value, separate the values with a comma (e.g. acceptFiles("audio/*,video/*,image/*").
         *
         */
        FileUploadControl.prototype.acceptFiles = function (accept) {
            this.accept = accept;
            this.acceptChanged.next(this.accept);
            return this;
        };
        FileUploadControl.prototype.acceptAll = function () {
            this.accept = null;
            this.acceptChanged.next(this.accept);
            return this;
        };
        Object.defineProperty(FileUploadControl.prototype, "isMultiple", {
            get: function () {
                return this.multipleEnabled;
            },
            enumerable: false,
            configurable: true
        });
        FileUploadControl.prototype.multiple = function (isEnabled) {
            if (isEnabled === void 0) { isEnabled = true; }
            this.multipleEnabled = isEnabled;
            this.multipleChanged.next(this.multipleEnabled);
            return this;
        };
        FileUploadControl.prototype.native = function (isNativeBehaviorEnabled) {
            if (isNativeBehaviorEnabled === void 0) { isNativeBehaviorEnabled = true; }
            this.nativeBehavior = isNativeBehaviorEnabled;
            return this;
        };
        FileUploadControl.prototype.discardInvalid = function (discard) {
            if (discard === void 0) { discard = true; }
            this.discard = discard;
            return this;
        };
        FileUploadControl.prototype.initialState = function (configuration) {
            if (configuration === void 0) { configuration = {}; }
            if (IsNullOrEmpty(configuration)) {
                return;
            }
            /**
             * Toggles discard of all invalid files
             * it depends to accept, limit, size once a file
             * dropped or selected it will be discarded if does not satisfy the constraint
             */
            this.discard = configuration.discardInvalid || this.discard;
            this.status = !!configuration.disabled ? STATUS.DISABLED : this.status;
            this.multipleEnabled = configuration.multiple || this.multipleEnabled;
            this.nativeBehavior = configuration.native != null ? configuration.native : this.nativeBehavior;
            if (!IsNullOrEmpty(configuration.listVisible)) {
                this.setListVisibility(configuration.listVisible);
            }
            if (!IsNullOrEmpty(configuration.accept)) {
                this.acceptFiles(configuration.accept.join(','));
            }
        };
        FileUploadControl.prototype.defineValidators = function (validators) {
            if (!IsNullOrEmpty(validators)) {
                this.validators = Array.isArray(validators) ? __spreadArray([], __read(validators)) : [validators];
            }
        };
        /**
         * @internal
         * used to prevent valueChanges emit more times
         * when multiple files are uploaded
         */
        FileUploadControl.prototype.addMultipleFiles = function (files) {
            var _this = this;
            if (IsNullOrEmpty(files)) {
                this.validate();
                this.valueChanges.next(Array.from(this.files.values()));
                return this;
            }
            /**
             * native component deletes the list of files before adding new ones
             */
            if (this.nativeBehavior !== false) {
                this.files.clear();
            }
            if (!this.multipleEnabled) {
                /**
                 * if multiple is disabled and one file exists
                 * clear it and reupload a new one
                 */
                if (this.files.size === 1) {
                    this.files.clear();
                }
                // add only one file
                this.files.set(files[0].name, files[0]);
            }
            else {
                // replace files with same name
                files.forEach(function (file) { return _this.files.set(file.name, file); });
            }
            if (this.discard) {
                this.analyzeToDiscard();
            }
            else {
                this.validate();
            }
            this.valueChanges.next(Array.from(this.files.values()));
            return this;
        };
        /**
         * method used to discard invalid files
         */
        FileUploadControl.prototype.analyzeToDiscard = function () {
            var deletedFiles = [];
            var validators = __spreadArray([], __read(this.validators));
            while (validators.length) {
                var validator = validators.shift();
                var error = validator(this);
                if (error) {
                    this.discardFile(error, deletedFiles);
                }
            }
            if (deletedFiles.length) {
                this.discardedValue.next(deletedFiles);
            }
        };
        FileUploadControl.prototype.discardFile = function (error, deletedFiles) {
            var _this = this;
            var errorsKey = Object.keys(error)[0];
            var errors = error[errorsKey];
            (Array.isArray(errors) ? errors : [errors]).forEach(function (fileError) {
                if (fileError.file && _this.files.has(fileError.file.name)) {
                    deletedFiles.push(fileError);
                    _this.files.delete(fileError.file.name);
                }
                else {
                    _this.errors.push(error);
                }
            });
        };
        FileUploadControl.prototype.validate = function () {
            var _this = this;
            if (this.status !== STATUS.DISABLED) {
                var currentState = this.valid;
                this.errors = this.validators.map(function (validator) { return validator(_this); }).filter(function (isInvalid) { return isInvalid; });
                if (currentState !== this.valid) {
                    this.statusChanged.next(this.valid ? STATUS.VALID : STATUS.INVALID);
                }
            }
            else {
                this.errors.length = 0;
            }
        };
        return FileUploadControl;
    }());

    var FileUploadAbstract = /** @class */ (function () {
        function FileUploadAbstract(hostElementRef, renderer, cdr) {
            this.hostElementRef = hostElementRef;
            this.renderer = renderer;
            this.cdr = cdr;
            this.control = null;
            this.isMultiple = true;
            this.hooks = [];
            this.subscriptions = [];
            this.onChange = function () { };
        }
        FileUploadAbstract.prototype.ngOnInit = function () {
            if (IsNullOrEmpty(this.control)) {
                this.control = new FileUploadControl();
            }
            this.setEvents();
            this.checkAndMarkAsDisabled();
            this.checkAndSetMultiple();
            this.connectToForm();
        };
        FileUploadAbstract.prototype.ngOnDestroy = function () {
            this.cdr.detach();
            this.hooks.forEach(function (hook) { return hook(); });
            this.hooks.length = 0;
            this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
            this.subscriptions.length = 0;
        };
        FileUploadAbstract.prototype.setEvents = function () {
            var _this = this;
            this.subscriptions.push(this.control.statusChanges.subscribe(function (status) { return _this.checkAndMarkAsDisabled(); }));
            this.subscriptions.push(this.control.eventsChanges.subscribe(function (event) { return _this.triggerEvent(event); }));
            this.subscriptions.push(this.control.acceptChanges.subscribe(function (accept) { return _this.updateAcceptAttr(accept); }));
            this.subscriptions.push(this.control.multipleChanges.subscribe(function (isMultiple) { return _this.toggleMultiple(isMultiple); }));
        };
        FileUploadAbstract.prototype.clearInputEl = function () {
            this.input.nativeElement.value = null;
        };
        FileUploadAbstract.prototype.checkAndSetMultiple = function () {
            if (!this.control) {
                return;
            }
            var isMultiple = !(this.isMultiple === false || this.isMultiple === 'false');
            if (isMultiple !== this.control.isMultiple) {
                this.control.multiple(isMultiple);
            }
        };
        FileUploadAbstract.prototype.triggerEvent = function (event) {
            if (typeof this.label.nativeElement[event] === 'function') {
                this.label.nativeElement[event]();
            }
        };
        FileUploadAbstract.prototype.updateAcceptAttr = function (accept) {
            if (!IsNullOrEmpty(accept)) {
                this.renderer.setAttribute(this.input.nativeElement, 'accept', accept);
            }
            else {
                this.renderer.removeAttribute(this.input.nativeElement, 'accept');
            }
        };
        FileUploadAbstract.prototype.checkAndMarkAsDisabled = function () {
            if (this.control.disabled) {
                this.renderer.addClass(this.hostElementRef.nativeElement, 'disabled');
                this.renderer.setProperty(this.input.nativeElement, 'disabled', true);
            }
            else {
                this.renderer.removeClass(this.hostElementRef.nativeElement, 'disabled');
                this.renderer.setProperty(this.input.nativeElement, 'disabled', false);
            }
        };
        FileUploadAbstract.prototype.toggleMultiple = function (isMultiple) {
            if (isMultiple) {
                this.renderer.setAttribute(this.input.nativeElement, 'multiple', '');
            }
            else {
                this.renderer.removeAttribute(this.input.nativeElement, 'multiple');
            }
        };
        /**
         * ControlValueAccessor implementation
         */
        FileUploadAbstract.prototype.connectToForm = function () {
            var _this = this;
            this.subscriptions.push(this.control.valueChanges.subscribe(function (v) { return _this.onChange(v); }));
        };
FileUploadAbstract.ɵfac = function FileUploadAbstract_Factory(t) { return new (t || FileUploadAbstract)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
FileUploadAbstract.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FileUploadAbstract });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadAbstract, [{
        type: core.Directive
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();
        return FileUploadAbstract;
    }());
    FileUploadAbstract.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: core.ChangeDetectorRef }
    ]; };

    var DRAGOVER = 'dragover';
    var TOUCHED = 'ng-touched';
    var FileUploadComponent = /** @class */ (function (_super) {
        __extends(FileUploadComponent, _super);
        function FileUploadComponent(fileUploadService, hostElementRef, renderer, document, cdr) {
            var _this = _super.call(this, hostElementRef, renderer, cdr) || this;
            _this.fileUploadService = fileUploadService;
            _this.document = document;
            _this.control = null;
            _this.animation = true;
            _this.templateRef = null;
            _this.listItem = null;
            _this.templateContext = {
                $implicit: _this.fileUploadService.isFileDragDropAvailable(),
                isFileDragDropAvailable: _this.fileUploadService.isFileDragDropAvailable()
            };
            /** animation fields */
            _this.zoomText = 'static';
            _this.listVisible = false;
            _this.onTouch = function () {
                _this.renderer.addClass(_this.hostElementRef.nativeElement, TOUCHED);
            };
            return _this;
        }
        Object.defineProperty(FileUploadComponent.prototype, "multiple", {
            set: function (isMultiple) {
                this.isMultiple = isMultiple;
                this.checkAndSetMultiple();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FileUploadComponent.prototype, "hasFiles", {
            get: function () {
                return this.control.isListVisible && this.control.size > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FileUploadComponent.prototype, "isInvalid", {
            get: function () {
                return !this.control.disabled && this.control.invalid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FileUploadComponent.prototype, "isAnimationDisabled", {
            get: function () {
                return this.animation === false || this.animation === 'false';
            },
            enumerable: false,
            configurable: true
        });
        FileUploadComponent.prototype.trackByFn = function (index, item) {
            return item.name;
        };
        FileUploadComponent.prototype.setEvents = function () {
            var _this = this;
            _super.prototype.setEvents.call(this);
            ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach(function (eventName) {
                _this.hooks.push(_this.renderer.listen(_this.document, eventName, function (event) { return _this.preventDragEvents(event); }));
            });
            ['dragover', 'dragenter'].forEach(function (eventName) {
                _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, function (event) { return _this.onDragOver(event); }));
            });
            ['dragleave', 'dragend', 'drop'].forEach(function (eventName) {
                _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, function (event) { return _this.onDragLeave(event); }));
            });
            this.subscriptions.push(this.control.valueChanges.subscribe(function (files) { return _this.renderView(); }));
            this.subscriptions.push(this.control.listVisibilityChanges.subscribe(function (status) { return _this.toggleListVisibility(); }));
        };
        FileUploadComponent.prototype.onKeyDown = function (event) {
            if (event.keyCode === 13 || event.keyCode === 32) {
                event.preventDefault();
                this.control.click();
            }
        };
        FileUploadComponent.prototype.preventDragEvents = function (event) {
            event.preventDefault();
            event.stopPropagation();
        };
        FileUploadComponent.prototype.renderView = function () {
            if (!this.listVisible) {
                this.zoomText = this.control.isListVisible && this.control.size > 0 ? 'zoomOut' : 'static';
            }
            this.cdr.markForCheck();
        };
        FileUploadComponent.prototype.showList = function () {
            if (this.zoomText !== 'static') {
                this.listVisible = true;
            }
        };
        FileUploadComponent.prototype.hideList = function () {
            this.listVisible = false;
        };
        FileUploadComponent.prototype.toggleListVisibility = function () {
            this.listVisible = this.control.isListVisible && this.control.size > 0;
            if (this.listVisible) {
                this.renderer.addClass(this.hostElementRef.nativeElement, 'list-visible');
                this.zoomText = 'static';
            }
            this.cdr.markForCheck();
        };
        /**
         * on file over add class name
         */
        FileUploadComponent.prototype.onDragOver = function (event) {
            this.renderer.addClass(this.hostElementRef.nativeElement, DRAGOVER);
        };
        /**
         * on mouse out remove class name
         */
        FileUploadComponent.prototype.onDragLeave = function (event) {
            this.renderer.removeClass(this.hostElementRef.nativeElement, DRAGOVER);
        };
        FileUploadComponent.prototype.onDrop = function (event) {
            if (this.control.disabled) {
                return;
            }
            // There is some issue with DragEvent in typescript lib.dom.d.ts
            var files = event.dataTransfer.files;
            this.control.addFiles(files);
            this.onTouch();
        };
        FileUploadComponent.prototype.onInputChange = function (event) {
            var input = (event.target);
            if (!this.control.disabled && input.files.length > 0) {
                this.control.addFiles(input.files);
                this.clearInputEl();
            }
            this.onTouch();
        };
        /**
         * model -> view changes
         */
        FileUploadComponent.prototype.writeValue = function (files) {
            if (files != null) {
                this.control.setValue(files);
            }
        };
        /**
         * register function which will be called on UI change
         * to update view -> model
         */
        FileUploadComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        FileUploadComponent.prototype.registerOnTouched = function (fn) {
            this.onTouch = fn;
        };
        FileUploadComponent.prototype.setDisabledState = function (isDisabled) {
            this.control.disable(isDisabled);
        };
        FileUploadComponent.prototype.zoomAnimationDone = function (event) {
            if (this.control.isListVisible && this.control.size > 0) {
                this.showList();
            }
            else {
                this.hideList();
            }
            if (event.fromState === 'static' && event.toState === 'zoomOut') {
                this.renderer.addClass(this.hostElementRef.nativeElement, 'hide-text');
            }
            else {
                this.renderer.removeClass(this.hostElementRef.nativeElement, 'hide-text');
            }
            if (event.toState === 'zoomIn') {
                this.zoomText = 'static';
            }
        };
        FileUploadComponent.prototype.animationListFinished = function (event) {
            if (event.toState === 'void') {
                this.zoomText = 'zoomIn';
                this.renderer.removeClass(this.hostElementRef.nativeElement, 'list-visible');
            }
            if (event.fromState === 'void') {
                this.zoomText = 'static';
                this.renderer.addClass(this.hostElementRef.nativeElement, 'list-visible');
            }
        };
FileUploadComponent.ɵfac = function FileUploadComponent_Factory(t) { return new (t || FileUploadComponent)(ɵngcc0.ɵɵdirectiveInject(FileUploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(common.DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
FileUploadComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadComponent, selectors: [["file-upload", 3, "simple", ""]], contentQueries: function FileUploadComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listItem = _t.first);
    } }, viewQuery: function FileUploadComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c2, true);
        ɵngcc0.ɵɵstaticViewQuery(_c3, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);
    } }, hostVars: 5, hostBindings: function FileUploadComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("drop", function FileUploadComponent_drop_HostBindingHandler($event) { return ctx.onDrop($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵsyntheticHostProperty("@.disabled", ctx.isAnimationDisabled);
        ɵngcc0.ɵɵclassProp("has-files", ctx.hasFiles)("ng-invalid", ctx.isInvalid);
    } }, inputs: { multiple: "multiple", control: "control", animation: "animation" }, features: [ɵngcc0.ɵɵProvidersFeature([
            FileUploadService,
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return FileUploadComponent; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 9, vars: 6, consts: [["tabindex", "0", 1, "upload-input", 3, "keydown"], ["labelRef", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["defaultTemplate", ""], ["type", "file", "tabindex", "-1", "multiple", "", 1, "files-input", 3, "change"], ["inputRef", ""], ["class", "upload-list", 4, "ngIf"], [4, "ngIf", "ngIfElse"], ["isNotDragDropAvailable", ""], [1, "upload-list"], ["ngFor", "", 3, "ngForOf", "ngForTrackBy"], ["defaultItemTemplate", ""], [3, "index", "file", "control"]], template: function FileUploadComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "label", 0, 1);
        ɵngcc0.ɵɵlistener("keydown", function FileUploadComponent_Template_label_keydown_0_listener($event) { return ctx.onKeyDown($event); })("@zoomAnimation.done", function FileUploadComponent_Template_label_animation_zoomAnimation_done_0_listener($event) { return ctx.zoomAnimationDone($event); });
        ɵngcc0.ɵɵtemplate(2, FileUploadComponent_ng_container_2_Template, 1, 0, "ng-container", 2);
        ɵngcc0.ɵɵtemplate(3, FileUploadComponent_ng_template_3_Template, 4, 2, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(5, "input", 4, 5);
        ɵngcc0.ɵɵlistener("change", function FileUploadComponent_Template_input_change_5_listener($event) { return ctx.onInputChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, FileUploadComponent_div_7_Template, 5, 5, "div", 6);
        ɵngcc0.ɵɵpipe(8, "async");
    } if (rf & 2) {
        var _r2 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵproperty("@zoomAnimation", ctx.zoomText);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.templateRef ? ctx.templateRef : _r2)("ngTemplateOutletContext", ctx.templateContext);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(8, 4, ctx.control.listVisibilityChanges) && ctx.control.size > 0 && ctx.listVisible);
    } }, directives: function () { return [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgIf, FileUploadDropZoneComponent, ɵngcc1.NgForOf, FileUploadListItemComponent]; }, pipes: function () { return [ɵngcc1.AsyncPipe]; }, styles: ["@charset \"UTF-8\";[_nghost-%COMP%], [_nghost-%COMP%] > *[_ngcontent-%COMP%]{box-sizing:border-box}[_nghost-%COMP%]{overflow:hidden;display:block;background:#fafafa;padding:20px 66px 20px 20px;min-height:140px;outline:1px dashed #92b0b3;outline-offset:-10px;position:relative}[_nghost-%COMP%]     .icon{float:left}.dragover[_nghost-%COMP%]{outline-width:2px}.disabled[_nghost-%COMP%]{opacity:.5;cursor:no-drop}.files-input[_ngcontent-%COMP%]{width:.1px;height:.1px;opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden}.upload-input[_ngcontent-%COMP%]:after{clear:both;content:\"\u00A0\";display:block;height:0;line-height:0;visibility:hidden;zoom:1}.upload-input[_ngcontent-%COMP%]{cursor:pointer;display:inline-block;color:#646464;position:absolute;top:50%;left:50%;margin:0;-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);outline:none}.disabled[_nghost-%COMP%]   .upload-input[_ngcontent-%COMP%]{cursor:not-allowed}.list-visible[_nghost-%COMP%]   .upload-input[_ngcontent-%COMP%]{top:20px;left:100%;margin-left:-20px;-ms-transform:translate(-100%);transform:translate(-100%);text-align:center}.hide-text[_nghost-%COMP%]   .upload-input[_ngcontent-%COMP%]{opacity:0}.dragover[_nghost-%COMP%]:not(.disabled)   .upload-input[_ngcontent-%COMP%], [_nghost-%COMP%]:not(.disabled)   .upload-input[_ngcontent-%COMP%]:focus, [_nghost-%COMP%]:not(.disabled)   .upload-input[_ngcontent-%COMP%]:hover{color:#80a9d2}.dragover[_nghost-%COMP%]:not(.disabled)   .icon[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%], [_nghost-%COMP%]:not(.disabled)   .upload-input[_ngcontent-%COMP%]:focus   svg[_ngcontent-%COMP%], [_nghost-%COMP%]:not(.disabled)   .upload-input[_ngcontent-%COMP%]:hover   svg[_ngcontent-%COMP%]{fill:#80a9d2}file-upload-list-item[_ngcontent-%COMP%]{padding:10px 0 0}file-upload-list-item[_ngcontent-%COMP%]:first-child{padding:0}"], data: { animation: [
            ZoomAnimation,
            InsertAnimation
        ] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadComponent, [{
        type: core.Component,
        args: [{
                selector: "file-upload:not([simple])",
                template: "<label #labelRef class=\"upload-input\" tabindex=\"0\" (keydown)=\"onKeyDown($event)\" [@zoomAnimation]=\"zoomText\" (@zoomAnimation.done)=\"zoomAnimationDone($event)\">\r\n\r\n    <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : defaultTemplate; context: templateContext\"></ng-container>\r\n\r\n    <ng-template #defaultTemplate let-isFileDragDropAvailable=\"isFileDragDropAvailable\">\r\n        <file-upload-drop-zone>\r\n            <ng-container *ngIf=\"isFileDragDropAvailable; else isNotDragDropAvailable\">\r\n                <b>Drag and drop</b> files<br> or click here\r\n            </ng-container>\r\n            <ng-template #isNotDragDropAvailable>\r\n                <b>Click here</b> to<br> choose a files\r\n            </ng-template>\r\n        </file-upload-drop-zone>\r\n    </ng-template>\r\n\r\n    <input #inputRef type=\"file\" class=\"files-input\" tabindex=\"-1\" multiple (change)=\"onInputChange($event)\">\r\n</label>\r\n\r\n<div class=\"upload-list\" *ngIf=\"(control.listVisibilityChanges | async) && control.size > 0 && listVisible\" [@insertAnimation]=\"control.size\" (@insertAnimation.done)=\"animationListFinished($event)\">\r\n    <ng-template ngFor let-file let-i=\"index\" [ngForOf]=\"control.valueChanges | async\" [ngForTrackBy]=\"trackByFn\">\r\n        <ng-container *ngTemplateOutlet=\"listItem ? listItem : defaultItemTemplate; context: { $implicit: file, file: file, index: i, control: control }\"></ng-container>\r\n    </ng-template>\r\n    \r\n    <ng-template #defaultItemTemplate let-i=\"index\" let-file=\"file\" let-control=\"control\">\r\n        <file-upload-list-item  [index]=\"i\" [file]=\"file\" [control]=\"control\">Remove</file-upload-list-item>\r\n    </ng-template>\r\n</div>",
                providers: [
                    FileUploadService,
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return FileUploadComponent; }),
                        multi: true
                    }
                ],
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                animations: [
                    ZoomAnimation,
                    InsertAnimation
                ],
                styles: ["@charset \"UTF-8\";:host,:host>*{box-sizing:border-box}:host{overflow:hidden;display:block;background:#fafafa;padding:20px 66px 20px 20px;min-height:140px;outline:1px dashed #92b0b3;outline-offset:-10px;position:relative}:host ::ng-deep .icon{float:left}:host(.dragover){outline-width:2px}:host(.disabled){opacity:.5;cursor:no-drop}.files-input{width:.1px;height:.1px;opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden}.upload-input:after{clear:both;content:\"\u00A0\";display:block;height:0;line-height:0;visibility:hidden;zoom:1}.upload-input{cursor:pointer;display:inline-block;color:#646464;position:absolute;top:50%;left:50%;margin:0;-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);outline:none}:host(.disabled) .upload-input{cursor:not-allowed}:host(.list-visible) .upload-input{top:20px;left:100%;margin-left:-20px;-ms-transform:translate(-100%);transform:translate(-100%);text-align:center}:host(.hide-text) .upload-input{opacity:0}:host(.dragover:not(.disabled)) .upload-input,:host(:not(.disabled)) .upload-input:focus,:host(:not(.disabled)) .upload-input:hover{color:#80a9d2}:host(.dragover:not(.disabled)) .icon svg,:host(:not(.disabled)) .upload-input:focus svg,:host(:not(.disabled)) .upload-input:hover svg{fill:#80a9d2}file-upload-list-item{padding:10px 0 0}file-upload-list-item:first-child{padding:0}"]
            }]
    }], function () { return [{ type: FileUploadService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: undefined, decorators: [{
                type: core.Inject,
                args: [common.DOCUMENT]
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { multiple: [{
            type: core.Input,
            args: ['multiple']
        }], hasFiles: [{
            type: core.HostBinding,
            args: ['class.has-files']
        }], isInvalid: [{
            type: core.HostBinding,
            args: ['class.ng-invalid']
        }], isAnimationDisabled: [{
            type: core.HostBinding,
            args: ['@.disabled']
        }], onDrop: [{
            type: core.HostListener,
            args: ['drop', ['$event']]
        }], control: [{
            type: core.Input
        }], animation: [{
            type: core.Input
        }], templateRef: [{
            type: core.ContentChild,
            args: ['placeholder']
        }], listItem: [{
            type: core.ContentChild,
            args: ['item']
        }], input: [{
            type: core.ViewChild,
            args: ['inputRef', { static: true }]
        }], label: [{
            type: core.ViewChild,
            args: ['labelRef', { static: true }]
        }] }); })();
        return FileUploadComponent;
    }(FileUploadAbstract));
    FileUploadComponent.ctorParameters = function () { return [
        { type: FileUploadService },
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: core.ChangeDetectorRef }
    ]; };
    FileUploadComponent.propDecorators = {
        control: [{ type: core.Input }],
        animation: [{ type: core.Input }],
        multiple: [{ type: core.Input, args: ['multiple',] }],
        templateRef: [{ type: core.ContentChild, args: ['placeholder',] }],
        listItem: [{ type: core.ContentChild, args: ['item',] }],
        input: [{ type: core.ViewChild, args: ['inputRef', { static: true },] }],
        label: [{ type: core.ViewChild, args: ['labelRef', { static: true },] }],
        hasFiles: [{ type: core.HostBinding, args: ['class.has-files',] }],
        isInvalid: [{ type: core.HostBinding, args: ['class.ng-invalid',] }],
        isAnimationDisabled: [{ type: core.HostBinding, args: ['@.disabled',] }],
        onDrop: [{ type: core.HostListener, args: ['drop', ['$event'],] }]
    };

    var FileUploadDropZoneComponent = /** @class */ (function () {
        function FileUploadDropZoneComponent() {
        }
FileUploadDropZoneComponent.ɵfac = function FileUploadDropZoneComponent_Factory(t) { return new (t || FileUploadDropZoneComponent)(); };
FileUploadDropZoneComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadDropZoneComponent, selectors: [["file-upload-drop-zone"]], ngContentSelectors: _c5, decls: 6, vars: 0, consts: [[1, "icon"], ["viewBox", "0 0 96 96"], ["d", "M62.8,68.1c0-0.6-0.2-1.1-0.6-1.5c-0.4-0.4-0.9-0.6-1.5-0.6s-1.1,0.2-1.5,0.6\n                c-0.4,0.4-0.6,0.9-0.6,1.5c0,0.6,0.2,1.1,0.6,1.5c0.4,0.4,0.9,0.6,1.5,0.6s1.1-0.2,1.5-0.6S62.8,68.7,62.8,68.1z M71.3,68.1\n                c0-0.6-0.2-1.1-0.6-1.5c-0.4-0.4-0.9-0.6-1.5-0.6c-0.6,0-1.1,0.2-1.5,0.6C67.2,67,67,67.5,67,68.1c0,0.6,0.2,1.1,0.6,1.5\n                s0.9,0.6,1.5,0.6c0.6,0,1.1-0.2,1.5-0.6C71.1,69.2,71.3,68.7,71.3,68.1z M75.5,60.7v10.6c0,0.9-0.3,1.6-0.9,2.2\n                c-0.6,0.6-1.4,0.9-2.2,0.9H23.7c-0.9,0-1.6-0.3-2.2-0.9c-0.6-0.6-0.9-1.4-0.9-2.2V60.7c0-0.9,0.3-1.6,0.9-2.2\n                c0.6-0.6,1.4-0.9,2.2-0.9h14.1c0.5,1.2,1.2,2.2,2.3,3c1.1,0.8,2.3,1.2,3.7,1.2h8.5c1.3,0,2.6-0.4,3.7-1.2c1.1-0.8,1.9-1.8,2.3-3\n                h14.1c0.9,0,1.6,0.3,2.2,0.9C75.2,59.1,75.5,59.8,75.5,60.7z M64.8,39.3c-0.4,0.9-1,1.3-2,1.3h-8.5v14.8c0,0.6-0.2,1.1-0.6,1.5\n                c-0.4,0.4-0.9,0.6-1.5,0.6h-8.5c-0.6,0-1.1-0.2-1.5-0.6c-0.4-0.4-0.6-0.9-0.6-1.5V40.6h-8.5c-0.9,0-1.6-0.4-2-1.3\n                c-0.4-0.9-0.2-1.6,0.5-2.3l14.8-14.8c0.4-0.4,0.9-0.6,1.5-0.6s1.1,0.2,1.5,0.6L64.3,37C65,37.7,65.1,38.4,64.8,39.3z"], [1, "upload-text"]], template: function FileUploadDropZoneComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(1, "svg", 1);
        ɵngcc0.ɵɵelementStart(2, "g");
        ɵngcc0.ɵɵelement(3, "path", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵnamespaceHTML();
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵprojection(5);
        ɵngcc0.ɵɵelementEnd();
    } }, styles: ["[_nghost-%COMP%]{display:block}.icon[_ngcontent-%COMP%]{height:35px;width:35px;border:1px solid #eaeaea;border-radius:4px}.icon[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{fill:#909293}.upload-text[_ngcontent-%COMP%]{overflow:hidden;width:auto;position:relative;padding-left:20px}.list-visible[_nghost-%COMP%]   .upload-text[_ngcontent-%COMP%], .list-visible   [_nghost-%COMP%]   .upload-text[_ngcontent-%COMP%]{display:none}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadDropZoneComponent, [{
        type: core.Component,
        args: [{
                selector: "file-upload-drop-zone",
                template: "<div class=\"icon\">\r\n    <svg viewBox=\"0 0 96 96\">\r\n        <g>\r\n            <path d=\"M62.8,68.1c0-0.6-0.2-1.1-0.6-1.5c-0.4-0.4-0.9-0.6-1.5-0.6s-1.1,0.2-1.5,0.6\r\n                c-0.4,0.4-0.6,0.9-0.6,1.5c0,0.6,0.2,1.1,0.6,1.5c0.4,0.4,0.9,0.6,1.5,0.6s1.1-0.2,1.5-0.6S62.8,68.7,62.8,68.1z M71.3,68.1\r\n                c0-0.6-0.2-1.1-0.6-1.5c-0.4-0.4-0.9-0.6-1.5-0.6c-0.6,0-1.1,0.2-1.5,0.6C67.2,67,67,67.5,67,68.1c0,0.6,0.2,1.1,0.6,1.5\r\n                s0.9,0.6,1.5,0.6c0.6,0,1.1-0.2,1.5-0.6C71.1,69.2,71.3,68.7,71.3,68.1z M75.5,60.7v10.6c0,0.9-0.3,1.6-0.9,2.2\r\n                c-0.6,0.6-1.4,0.9-2.2,0.9H23.7c-0.9,0-1.6-0.3-2.2-0.9c-0.6-0.6-0.9-1.4-0.9-2.2V60.7c0-0.9,0.3-1.6,0.9-2.2\r\n                c0.6-0.6,1.4-0.9,2.2-0.9h14.1c0.5,1.2,1.2,2.2,2.3,3c1.1,0.8,2.3,1.2,3.7,1.2h8.5c1.3,0,2.6-0.4,3.7-1.2c1.1-0.8,1.9-1.8,2.3-3\r\n                h14.1c0.9,0,1.6,0.3,2.2,0.9C75.2,59.1,75.5,59.8,75.5,60.7z M64.8,39.3c-0.4,0.9-1,1.3-2,1.3h-8.5v14.8c0,0.6-0.2,1.1-0.6,1.5\r\n                c-0.4,0.4-0.9,0.6-1.5,0.6h-8.5c-0.6,0-1.1-0.2-1.5-0.6c-0.4-0.4-0.6-0.9-0.6-1.5V40.6h-8.5c-0.9,0-1.6-0.4-2-1.3\r\n                c-0.4-0.9-0.2-1.6,0.5-2.3l14.8-14.8c0.4-0.4,0.9-0.6,1.5-0.6s1.1,0.2,1.5,0.6L64.3,37C65,37.7,65.1,38.4,64.8,39.3z\"/>\r\n        </g>\r\n    </svg>\r\n</div>\r\n\r\n<div class=\"upload-text\">\r\n    <ng-content></ng-content>\r\n</div>",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block}.icon{height:35px;width:35px;border:1px solid #eaeaea;border-radius:4px}.icon svg{fill:#909293}.upload-text{overflow:hidden;width:auto;position:relative;padding-left:20px}:host-context(.list-visible) .upload-text{display:none}"]
            }]
    }], function () { return []; }, null); })();
        return FileUploadDropZoneComponent;
    }());

    var FileUploadListItemComponent = /** @class */ (function () {
        function FileUploadListItemComponent(fileUploadService) {
            this.fileUploadService = fileUploadService;
        }
        FileUploadListItemComponent.prototype.removeFile = function (file) {
            this.control.removeFile(file);
        };
        FileUploadListItemComponent.prototype.calculateSize = function (size) {
            return this.fileUploadService.formatSize(size);
        };
FileUploadListItemComponent.ɵfac = function FileUploadListItemComponent_Factory(t) { return new (t || FileUploadListItemComponent)(ɵngcc0.ɵɵdirectiveInject(FileUploadService)); };
FileUploadListItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadListItemComponent, selectors: [["file-upload-list-item"]], inputs: { index: "index", file: "file", control: "control" }, ngContentSelectors: _c5, decls: 11, vars: 3, consts: [[3, "file"], [1, "file-info"], [1, "file-name"], [1, "file-buttons"], [1, "remove-btn", 3, "click"], ["viewBox", "0 0 96 96"], ["d", "M40.5,66.8V39.3c0-0.4-0.1-0.7-0.4-0.9S39.6,38,39.3,38h-2.5c-0.4,0-0.7,0.1-0.9,0.4\n                    s-0.4,0.5-0.4,0.9v27.5c0,0.4,0.1,0.7,0.4,0.9s0.5,0.4,0.9,0.4h2.5c0.4,0,0.7-0.1,0.9-0.4S40.5,67.1,40.5,66.8z M50.5,66.8V39.3\n                    c0-0.4-0.1-0.7-0.4-0.9S49.6,38,49.3,38h-2.5c-0.4,0-0.7,0.1-0.9,0.4s-0.4,0.5-0.4,0.9v27.5c0,0.4,0.1,0.7,0.4,0.9s0.5,0.4,0.9,0.4\n                    h2.5c0.4,0,0.7-0.1,0.9-0.4S50.5,67.1,50.5,66.8z M60.5,66.8V39.3c0-0.4-0.1-0.7-0.4-0.9S59.6,38,59.3,38h-2.5\n                    c-0.4,0-0.7,0.1-0.9,0.4s-0.4,0.5-0.4,0.9v27.5c0,0.4,0.1,0.7,0.4,0.9s0.5,0.4,0.9,0.4h2.5c0.4,0,0.7-0.1,0.9-0.4\n                    S60.5,67.1,60.5,66.8z M39.3,28h17.5l-1.9-4.6c-0.2-0.2-0.4-0.4-0.7-0.4H41.8c-0.3,0.1-0.5,0.2-0.7,0.4L39.3,28z M75.5,29.3v2.5\n                    c0,0.4-0.1,0.7-0.4,0.9S74.6,33,74.3,33h-3.8v37c0,2.2-0.6,4-1.8,5.6S66,78,64.3,78H31.8c-1.7,0-3.2-0.8-4.4-2.3s-1.8-3.4-1.8-5.5\n                    V33h-3.8c-0.4,0-0.7-0.1-0.9-0.4s-0.4-0.5-0.4-0.9v-2.5c0-0.4,0.1-0.7,0.4-0.9s0.5-0.4,0.9-0.4h12.1l2.7-6.5c0.4-1,1.1-1.8,2.1-2.5\n                    s2-1,3.1-1h12.5c1,0,2.1,0.3,3.1,1s1.7,1.5,2.1,2.5l2.7,6.5h12.1c0.4,0,0.7,0.1,0.9,0.4S75.5,28.9,75.5,29.3z"]], template: function FileUploadListItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelement(0, "file-upload-icon", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "span", 4);
        ɵngcc0.ɵɵlistener("click", function FileUploadListItemComponent_Template_span_click_6_listener() { return ctx.removeFile(ctx.file); });
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(7, "svg", 5);
        ɵngcc0.ɵɵelementStart(8, "g");
        ɵngcc0.ɵɵelement(9, "path", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("file", ctx.file);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.file.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" (", ctx.calculateSize(ctx.file.size), ") ");
    } }, directives: function () { return [FileUploadIconComponent]; }, styles: ["@charset \"UTF-8\";[_nghost-%COMP%]{display:block;font-size:14px;color:#646464}[_nghost-%COMP%]:after{clear:both;content:\"\u00A0\";display:block;height:0;line-height:0;visibility:hidden;zoom:1}file-upload-icon[_ngcontent-%COMP%]{float:left;width:30px;height:36px;margin:0 10px 0 0}.file-info[_ngcontent-%COMP%]{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.remove-btn[_ngcontent-%COMP%]{font-size:12px;cursor:pointer}.remove-btn[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{display:inline-block;vertical-align:-20%;height:18px;width:18px}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadListItemComponent, [{
        type: core.Component,
        args: [{
                selector: "file-upload-list-item",
                template: "\n    <file-upload-icon [file]=\"file\"></file-upload-icon>\n    <div class=\"file-info\">\n        <span class=\"file-name\">{{ file.name }}</span> ({{ calculateSize( file.size ) }})\n    </div>\n    <div class=\"file-buttons\">\n        <span class=\"remove-btn\" (click)=\"removeFile(file)\">\n        <svg viewBox=\"0 0 96 96\">\n            <g>\n                <path d=\"M40.5,66.8V39.3c0-0.4-0.1-0.7-0.4-0.9S39.6,38,39.3,38h-2.5c-0.4,0-0.7,0.1-0.9,0.4\n                    s-0.4,0.5-0.4,0.9v27.5c0,0.4,0.1,0.7,0.4,0.9s0.5,0.4,0.9,0.4h2.5c0.4,0,0.7-0.1,0.9-0.4S40.5,67.1,40.5,66.8z M50.5,66.8V39.3\n                    c0-0.4-0.1-0.7-0.4-0.9S49.6,38,49.3,38h-2.5c-0.4,0-0.7,0.1-0.9,0.4s-0.4,0.5-0.4,0.9v27.5c0,0.4,0.1,0.7,0.4,0.9s0.5,0.4,0.9,0.4\n                    h2.5c0.4,0,0.7-0.1,0.9-0.4S50.5,67.1,50.5,66.8z M60.5,66.8V39.3c0-0.4-0.1-0.7-0.4-0.9S59.6,38,59.3,38h-2.5\n                    c-0.4,0-0.7,0.1-0.9,0.4s-0.4,0.5-0.4,0.9v27.5c0,0.4,0.1,0.7,0.4,0.9s0.5,0.4,0.9,0.4h2.5c0.4,0,0.7-0.1,0.9-0.4\n                    S60.5,67.1,60.5,66.8z M39.3,28h17.5l-1.9-4.6c-0.2-0.2-0.4-0.4-0.7-0.4H41.8c-0.3,0.1-0.5,0.2-0.7,0.4L39.3,28z M75.5,29.3v2.5\n                    c0,0.4-0.1,0.7-0.4,0.9S74.6,33,74.3,33h-3.8v37c0,2.2-0.6,4-1.8,5.6S66,78,64.3,78H31.8c-1.7,0-3.2-0.8-4.4-2.3s-1.8-3.4-1.8-5.5\n                    V33h-3.8c-0.4,0-0.7-0.1-0.9-0.4s-0.4-0.5-0.4-0.9v-2.5c0-0.4,0.1-0.7,0.4-0.9s0.5-0.4,0.9-0.4h12.1l2.7-6.5c0.4-1,1.1-1.8,2.1-2.5\n                    s2-1,3.1-1h12.5c1,0,2.1,0.3,3.1,1s1.7,1.5,2.1,2.5l2.7,6.5h12.1c0.4,0,0.7,0.1,0.9,0.4S75.5,28.9,75.5,29.3z\"/>\n            </g>\n        </svg> <ng-content></ng-content></span>\n    </div>\n    ",
                styles: ["@charset \"UTF-8\";:host{display:block;font-size:14px;color:#646464}:host:after{clear:both;content:\"\u00A0\";display:block;height:0;line-height:0;visibility:hidden;zoom:1}file-upload-icon{float:left;width:30px;height:36px;margin:0 10px 0 0}.file-info{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.remove-btn{font-size:12px;cursor:pointer}.remove-btn svg{display:inline-block;vertical-align:-20%;height:18px;width:18px}"]
            }]
    }], function () { return [{ type: FileUploadService }]; }, { index: [{
            type: core.Input
        }], file: [{
            type: core.Input
        }], control: [{
            type: core.Input
        }] }); })();
        return FileUploadListItemComponent;
    }());
    FileUploadListItemComponent.ctorParameters = function () { return [
        { type: FileUploadService }
    ]; };
    FileUploadListItemComponent.propDecorators = {
        index: [{ type: core.Input }],
        file: [{ type: core.Input }],
        control: [{ type: core.Input }]
    };

    var FileUploadIconComponent = /** @class */ (function () {
        function FileUploadIconComponent(fileUploadService) {
            this.fileUploadService = fileUploadService;
            this.fileType = 'unknown';
        }
        FileUploadIconComponent.prototype.ngOnInit = function () {
            this.fileType = this.fileUploadService.getFileType(this.file);
        };
        FileUploadIconComponent.prototype.isIcon = function (type) {
            switch (type) {
                case 'text':
                    return this.fileType === 'html' || this.fileType === 'css' ||
                        this.fileType === 'csv' || this.fileType === 'js' ||
                        this.fileType === 'pdf' || this.fileType === 'ppt' ||
                        this.fileType === 'xls' || this.fileType === 'xlsx' ||
                        this.fileType === 'xml' || this.fileType === 'doc' ||
                        this.fileType === 'txt' || this.fileType === 'docx';
                case 'audio':
                    return this.fileType === 'aac' || this.fileType === 'midi' ||
                        this.fileType === 'oga' || this.fileType === 'wav' ||
                        this.fileType === 'weba';
                case 'image':
                    return this.fileType === 'png' || this.fileType === 'bmp' ||
                        this.fileType === 'gif' || this.fileType === 'jpg' ||
                        this.fileType === 'svg' || this.fileType === 'webp' ||
                        this.fileType === 'ico';
                case 'video':
                    return this.fileType === 'avi' || this.fileType === 'mpeg' ||
                        this.fileType === 'ogv' || this.fileType === 'webm' ||
                        this.fileType === '3gp' || this.fileType === '3g2';
            }
        };
FileUploadIconComponent.ɵfac = function FileUploadIconComponent_Factory(t) { return new (t || FileUploadIconComponent)(ɵngcc0.ɵɵdirectiveInject(FileUploadService)); };
FileUploadIconComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadIconComponent, selectors: [["file-upload-icon"]], inputs: { file: "file" }, decls: 6, vars: 5, consts: [[3, "ngSwitch"], ["viewBox", "0 0 96 96", 4, "ngSwitchDefault"], ["viewBox", "0 0 96 96", 4, "ngSwitchCase"], ["viewBox", "0 0 96 96"], ["d", "M71.4,30.7c0.6,0.6,1.2,1.5,1.6,2.5c0.4,1.1,0.7,2.1,0.7,2.9v38.6c0,0.9-0.3,1.7-0.9,2.3\n                S71.4,78,70.5,78h-45c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V21.2c0-0.9,0.3-1.7,0.9-2.3c0.6-0.6,1.4-0.9,2.3-0.9h30\n                c0.9,0,1.9,0.2,2.9,0.7c1.1,0.4,1.9,1,2.5,1.6L71.4,30.7z M56.6,22.6v12.6h12.6c-0.2-0.6-0.5-1.1-0.7-1.4L57.9,23.3\n                C57.7,23,57.2,22.8,56.6,22.6z M69.4,73.7V39.4H55.5c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V22.3H26.6v51.4H69.4z"], ["d", "M71.4,30.7c0.6,0.6,1.2,1.5,1.6,2.5c0.4,1.1,0.7,2.1,0.7,2.9v38.6c0,0.9-0.3,1.7-0.9,2.3\n                S71.4,78,70.5,78h-45c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V21.2c0-0.9,0.3-1.7,0.9-2.3c0.6-0.6,1.4-0.9,2.3-0.9h30\n                c0.9,0,1.9,0.2,2.9,0.7c1.1,0.4,1.9,1,2.5,1.6L71.4,30.7z M56.6,22.6v12.6h12.6c-0.2-0.6-0.5-1.1-0.7-1.4L57.9,23.3\n                C57.7,23,57.2,22.8,56.6,22.6z M69.4,73.7V39.4H55.5c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V22.3H26.6v51.4H69.4z\n                M65.1,58.7v10.7H30.9V63l6.4-6.4l4.3,4.3L54.4,48L65.1,58.7z M37.3,52.3c-1.8,0-3.3-0.6-4.6-1.9c-1.3-1.2-1.9-2.8-1.9-4.6\n                c0-1.8,0.6-3.3,1.9-4.6c1.3-1.2,2.8-1.9,4.6-1.9s3.3,0.6,4.6,1.9c1.3,1.3,1.9,2.8,1.9,4.6c0,1.8-0.6,3.3-1.9,4.6\n                C40.6,51.7,39.1,52.3,37.3,52.3z"], ["d", "M71.4,30.7c0.6,0.6,1.2,1.5,1.6,2.5c0.4,1.1,0.7,2.1,0.7,2.9v38.6c0,0.9-0.3,1.7-0.9,2.3\n                S71.4,78,70.5,78h-45c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V21.2c0-0.9,0.3-1.7,0.9-2.3c0.6-0.6,1.4-0.9,2.3-0.9h30\n                c0.9,0,1.9,0.2,2.9,0.7c1.1,0.4,1.9,1,2.5,1.6L71.4,30.7z M56.6,22.6v12.6h12.6c-0.2-0.6-0.5-1.1-0.7-1.4L57.9,23.3\n                C57.7,23,57.2,22.8,56.6,22.6z M69.4,73.7V39.4H55.5c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V22.3H26.6v51.4H69.4z\n                M43,46.5c0.4,0.2,0.7,0.5,0.7,1v18.2c0,0.5-0.2,0.8-0.7,1c-0.2,0-0.3,0.1-0.4,0.1c-0.3,0-0.5-0.1-0.8-0.3l-5.6-5.6h-4.4\n                c-0.3,0-0.6-0.1-0.8-0.3c-0.2-0.2-0.3-0.5-0.3-0.8v-6.4c0-0.3,0.1-0.6,0.3-0.8c0.2-0.2,0.5-0.3,0.8-0.3h4.4l5.6-5.6\n                C42.2,46.4,42.6,46.3,43,46.5z M57,69.5c0.7,0,1.3-0.3,1.7-0.8c2.9-3.5,4.3-7.6,4.3-12.2s-1.4-8.6-4.3-12.2\n                c-0.4-0.5-0.8-0.7-1.4-0.8c-0.6-0.1-1.1,0.1-1.6,0.5c-0.5,0.4-0.7,0.9-0.8,1.5c-0.1,0.6,0.1,1.1,0.5,1.6c2.2,2.7,3.3,5.9,3.3,9.4\n                c0,3.5-1.1,6.7-3.3,9.4c-0.4,0.5-0.5,1-0.5,1.6c0.1,0.6,0.3,1.1,0.8,1.4C56.1,69.4,56.5,69.5,57,69.5z M49.9,64.6\n                c0.6,0,1.1-0.2,1.6-0.7c1.9-2.1,2.9-4.5,2.9-7.3s-1-5.3-2.9-7.3c-0.4-0.4-0.9-0.6-1.5-0.7c-0.6,0-1.1,0.2-1.5,0.6s-0.6,0.9-0.7,1.5\n                c0,0.6,0.2,1.1,0.6,1.6c1.2,1.3,1.7,2.7,1.7,4.4c0,1.7-0.6,3.1-1.7,4.4c-0.4,0.4-0.6,1-0.6,1.6c0,0.6,0.2,1.1,0.7,1.5\n                C48.9,64.4,49.4,64.6,49.9,64.6z"], ["d", "M71.4,30.7c0.6,0.6,1.2,1.5,1.6,2.5c0.4,1.1,0.7,2.1,0.7,2.9v38.6c0,0.9-0.3,1.7-0.9,2.3\n                S71.4,78,70.5,78h-45c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V21.2c0-0.9,0.3-1.7,0.9-2.3c0.6-0.6,1.4-0.9,2.3-0.9h30\n                c0.9,0,1.9,0.2,2.9,0.7c1.1,0.4,1.9,1,2.5,1.6L71.4,30.7z M56.6,22.6v12.6h12.6c-0.2-0.6-0.5-1.1-0.7-1.4L57.9,23.3\n                C57.7,23,57.2,22.8,56.6,22.6z M69.4,73.7V39.4H55.5c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V22.3H26.6v51.4H69.4z\n                M35.1,44.8c0-0.3,0.1-0.6,0.3-0.8c0.2-0.2,0.5-0.3,0.8-0.3h23.6c0.3,0,0.6,0.1,0.8,0.3c0.2,0.2,0.3,0.5,0.3,0.8v2.1\n                c0,0.3-0.1,0.6-0.3,0.8c-0.2,0.2-0.5,0.3-0.8,0.3H36.2c-0.3,0-0.6-0.1-0.8-0.3c-0.2-0.2-0.3-0.5-0.3-0.8V44.8z M59.8,52.3\n                c0.3,0,0.6,0.1,0.8,0.3c0.2,0.2,0.3,0.5,0.3,0.8v2.1c0,0.3-0.1,0.6-0.3,0.8c-0.2,0.2-0.5,0.3-0.8,0.3H36.2c-0.3,0-0.6-0.1-0.8-0.3\n                c-0.2-0.2-0.3-0.5-0.3-0.8v-2.1c0-0.3,0.1-0.6,0.3-0.8c0.2-0.2,0.5-0.3,0.8-0.3H59.8z M59.8,60.9c0.3,0,0.6,0.1,0.8,0.3\n                c0.2,0.2,0.3,0.5,0.3,0.8v2.1c0,0.3-0.1,0.6-0.3,0.8c-0.2,0.2-0.5,0.3-0.8,0.3H36.2c-0.3,0-0.6-0.1-0.8-0.3\n                c-0.2-0.2-0.3-0.5-0.3-0.8v-2.1c0-0.3,0.1-0.6,0.3-0.8c0.2-0.2,0.5-0.3,0.8-0.3H59.8z"], ["d", "M71.4,30.7c0.6,0.6,1.2,1.5,1.6,2.5c0.4,1.1,0.7,2.1,0.7,2.9v38.6c0,0.9-0.3,1.7-0.9,2.3\n                S71.4,78,70.5,78h-45c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V21.2c0-0.9,0.3-1.7,0.9-2.3c0.6-0.6,1.4-0.9,2.3-0.9h30\n                c0.9,0,1.9,0.2,2.9,0.7c1.1,0.4,1.9,1,2.5,1.6L71.4,30.7z M56.6,22.6v12.6h12.6c-0.2-0.6-0.5-1.1-0.7-1.4L57.9,23.3\n                C57.7,23,57.2,22.8,56.6,22.6z M69.4,73.7V39.4H55.5c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V22.3H26.6v51.4H69.4z\n                M48,43.7c1.2,0,2.2,0.4,3,1.3c0.8,0.8,1.3,1.9,1.3,3v12.9c0,1.2-0.4,2.2-1.3,3c-0.8,0.8-1.9,1.3-3,1.3H35.1c-1.2,0-2.2-0.4-3-1.3\n                c-0.8-0.8-1.3-1.9-1.3-3V48c0-1.2,0.4-2.2,1.3-3c0.8-0.8,1.9-1.3,3-1.3H48z M64.5,43.8c0.4,0.2,0.7,0.5,0.7,1v19.3\n                c0,0.5-0.2,0.8-0.7,1c-0.2,0-0.3,0.1-0.4,0.1c-0.3,0-0.6-0.1-0.8-0.3l-8.9-8.9v-3l8.9-8.9c0.2-0.2,0.5-0.3,0.8-0.3\n                C64.2,43.7,64.3,43.7,64.5,43.8z"]], template: function FileUploadIconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵtemplate(1, FileUploadIconComponent__svg_svg_1_Template, 3, 0, "svg", 1);
        ɵngcc0.ɵɵtemplate(2, FileUploadIconComponent__svg_svg_2_Template, 3, 0, "svg", 2);
        ɵngcc0.ɵɵtemplate(3, FileUploadIconComponent__svg_svg_3_Template, 3, 0, "svg", 2);
        ɵngcc0.ɵɵtemplate(4, FileUploadIconComponent__svg_svg_4_Template, 3, 0, "svg", 2);
        ɵngcc0.ɵɵtemplate(5, FileUploadIconComponent__svg_svg_5_Template, 3, 0, "svg", 2);
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngSwitch", true);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.isIcon("image"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.isIcon("audio"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.isIcon("text"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", ctx.isIcon("video"));
    } }, directives: [ɵngcc1.NgSwitch, ɵngcc1.NgSwitchDefault, ɵngcc1.NgSwitchCase], styles: ["[_nghost-%COMP%]{display:block;border:1px solid #eaeaea;border-radius:4px}[_nghost-%COMP%]   svg[_ngcontent-%COMP%]{fill:#909293}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadIconComponent, [{
        type: core.Component,
        args: [{
                selector: "file-upload-icon",
                template: "\r\n\r\n<ng-container [ngSwitch]=\"true\">\r\n\r\n    <svg *ngSwitchDefault viewBox=\"0 0 96 96\">\r\n        <g>\r\n            <path d=\"M71.4,30.7c0.6,0.6,1.2,1.5,1.6,2.5c0.4,1.1,0.7,2.1,0.7,2.9v38.6c0,0.9-0.3,1.7-0.9,2.3\r\n                S71.4,78,70.5,78h-45c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V21.2c0-0.9,0.3-1.7,0.9-2.3c0.6-0.6,1.4-0.9,2.3-0.9h30\r\n                c0.9,0,1.9,0.2,2.9,0.7c1.1,0.4,1.9,1,2.5,1.6L71.4,30.7z M56.6,22.6v12.6h12.6c-0.2-0.6-0.5-1.1-0.7-1.4L57.9,23.3\r\n                C57.7,23,57.2,22.8,56.6,22.6z M69.4,73.7V39.4H55.5c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V22.3H26.6v51.4H69.4z\"/>\r\n        </g>\r\n    </svg>\r\n\r\n    <svg *ngSwitchCase=\"isIcon('image')\" viewBox=\"0 0 96 96\">\r\n        <g>\r\n            <path d=\"M71.4,30.7c0.6,0.6,1.2,1.5,1.6,2.5c0.4,1.1,0.7,2.1,0.7,2.9v38.6c0,0.9-0.3,1.7-0.9,2.3\r\n                S71.4,78,70.5,78h-45c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V21.2c0-0.9,0.3-1.7,0.9-2.3c0.6-0.6,1.4-0.9,2.3-0.9h30\r\n                c0.9,0,1.9,0.2,2.9,0.7c1.1,0.4,1.9,1,2.5,1.6L71.4,30.7z M56.6,22.6v12.6h12.6c-0.2-0.6-0.5-1.1-0.7-1.4L57.9,23.3\r\n                C57.7,23,57.2,22.8,56.6,22.6z M69.4,73.7V39.4H55.5c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V22.3H26.6v51.4H69.4z\r\n                M65.1,58.7v10.7H30.9V63l6.4-6.4l4.3,4.3L54.4,48L65.1,58.7z M37.3,52.3c-1.8,0-3.3-0.6-4.6-1.9c-1.3-1.2-1.9-2.8-1.9-4.6\r\n                c0-1.8,0.6-3.3,1.9-4.6c1.3-1.2,2.8-1.9,4.6-1.9s3.3,0.6,4.6,1.9c1.3,1.3,1.9,2.8,1.9,4.6c0,1.8-0.6,3.3-1.9,4.6\r\n                C40.6,51.7,39.1,52.3,37.3,52.3z\"/>\r\n        </g>\r\n    </svg>\r\n\r\n    <svg *ngSwitchCase=\"isIcon('audio')\" viewBox=\"0 0 96 96\">\r\n        <g>\r\n            <path d=\"M71.4,30.7c0.6,0.6,1.2,1.5,1.6,2.5c0.4,1.1,0.7,2.1,0.7,2.9v38.6c0,0.9-0.3,1.7-0.9,2.3\r\n                S71.4,78,70.5,78h-45c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V21.2c0-0.9,0.3-1.7,0.9-2.3c0.6-0.6,1.4-0.9,2.3-0.9h30\r\n                c0.9,0,1.9,0.2,2.9,0.7c1.1,0.4,1.9,1,2.5,1.6L71.4,30.7z M56.6,22.6v12.6h12.6c-0.2-0.6-0.5-1.1-0.7-1.4L57.9,23.3\r\n                C57.7,23,57.2,22.8,56.6,22.6z M69.4,73.7V39.4H55.5c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V22.3H26.6v51.4H69.4z\r\n                M43,46.5c0.4,0.2,0.7,0.5,0.7,1v18.2c0,0.5-0.2,0.8-0.7,1c-0.2,0-0.3,0.1-0.4,0.1c-0.3,0-0.5-0.1-0.8-0.3l-5.6-5.6h-4.4\r\n                c-0.3,0-0.6-0.1-0.8-0.3c-0.2-0.2-0.3-0.5-0.3-0.8v-6.4c0-0.3,0.1-0.6,0.3-0.8c0.2-0.2,0.5-0.3,0.8-0.3h4.4l5.6-5.6\r\n                C42.2,46.4,42.6,46.3,43,46.5z M57,69.5c0.7,0,1.3-0.3,1.7-0.8c2.9-3.5,4.3-7.6,4.3-12.2s-1.4-8.6-4.3-12.2\r\n                c-0.4-0.5-0.8-0.7-1.4-0.8c-0.6-0.1-1.1,0.1-1.6,0.5c-0.5,0.4-0.7,0.9-0.8,1.5c-0.1,0.6,0.1,1.1,0.5,1.6c2.2,2.7,3.3,5.9,3.3,9.4\r\n                c0,3.5-1.1,6.7-3.3,9.4c-0.4,0.5-0.5,1-0.5,1.6c0.1,0.6,0.3,1.1,0.8,1.4C56.1,69.4,56.5,69.5,57,69.5z M49.9,64.6\r\n                c0.6,0,1.1-0.2,1.6-0.7c1.9-2.1,2.9-4.5,2.9-7.3s-1-5.3-2.9-7.3c-0.4-0.4-0.9-0.6-1.5-0.7c-0.6,0-1.1,0.2-1.5,0.6s-0.6,0.9-0.7,1.5\r\n                c0,0.6,0.2,1.1,0.6,1.6c1.2,1.3,1.7,2.7,1.7,4.4c0,1.7-0.6,3.1-1.7,4.4c-0.4,0.4-0.6,1-0.6,1.6c0,0.6,0.2,1.1,0.7,1.5\r\n                C48.9,64.4,49.4,64.6,49.9,64.6z\"/>\r\n        </g>\r\n    </svg>\r\n\r\n    <svg *ngSwitchCase=\"isIcon('text')\" viewBox=\"0 0 96 96\">\r\n        <g>\r\n            <path d=\"M71.4,30.7c0.6,0.6,1.2,1.5,1.6,2.5c0.4,1.1,0.7,2.1,0.7,2.9v38.6c0,0.9-0.3,1.7-0.9,2.3\r\n                S71.4,78,70.5,78h-45c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V21.2c0-0.9,0.3-1.7,0.9-2.3c0.6-0.6,1.4-0.9,2.3-0.9h30\r\n                c0.9,0,1.9,0.2,2.9,0.7c1.1,0.4,1.9,1,2.5,1.6L71.4,30.7z M56.6,22.6v12.6h12.6c-0.2-0.6-0.5-1.1-0.7-1.4L57.9,23.3\r\n                C57.7,23,57.2,22.8,56.6,22.6z M69.4,73.7V39.4H55.5c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V22.3H26.6v51.4H69.4z\r\n                M35.1,44.8c0-0.3,0.1-0.6,0.3-0.8c0.2-0.2,0.5-0.3,0.8-0.3h23.6c0.3,0,0.6,0.1,0.8,0.3c0.2,0.2,0.3,0.5,0.3,0.8v2.1\r\n                c0,0.3-0.1,0.6-0.3,0.8c-0.2,0.2-0.5,0.3-0.8,0.3H36.2c-0.3,0-0.6-0.1-0.8-0.3c-0.2-0.2-0.3-0.5-0.3-0.8V44.8z M59.8,52.3\r\n                c0.3,0,0.6,0.1,0.8,0.3c0.2,0.2,0.3,0.5,0.3,0.8v2.1c0,0.3-0.1,0.6-0.3,0.8c-0.2,0.2-0.5,0.3-0.8,0.3H36.2c-0.3,0-0.6-0.1-0.8-0.3\r\n                c-0.2-0.2-0.3-0.5-0.3-0.8v-2.1c0-0.3,0.1-0.6,0.3-0.8c0.2-0.2,0.5-0.3,0.8-0.3H59.8z M59.8,60.9c0.3,0,0.6,0.1,0.8,0.3\r\n                c0.2,0.2,0.3,0.5,0.3,0.8v2.1c0,0.3-0.1,0.6-0.3,0.8c-0.2,0.2-0.5,0.3-0.8,0.3H36.2c-0.3,0-0.6-0.1-0.8-0.3\r\n                c-0.2-0.2-0.3-0.5-0.3-0.8v-2.1c0-0.3,0.1-0.6,0.3-0.8c0.2-0.2,0.5-0.3,0.8-0.3H59.8z\"/>\r\n        </g>\r\n    </svg>\r\n\r\n    <svg *ngSwitchCase=\"isIcon('video')\" viewBox=\"0 0 96 96\">\r\n        <g>\r\n            <path d=\"M71.4,30.7c0.6,0.6,1.2,1.5,1.6,2.5c0.4,1.1,0.7,2.1,0.7,2.9v38.6c0,0.9-0.3,1.7-0.9,2.3\r\n                S71.4,78,70.5,78h-45c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V21.2c0-0.9,0.3-1.7,0.9-2.3c0.6-0.6,1.4-0.9,2.3-0.9h30\r\n                c0.9,0,1.9,0.2,2.9,0.7c1.1,0.4,1.9,1,2.5,1.6L71.4,30.7z M56.6,22.6v12.6h12.6c-0.2-0.6-0.5-1.1-0.7-1.4L57.9,23.3\r\n                C57.7,23,57.2,22.8,56.6,22.6z M69.4,73.7V39.4H55.5c-0.9,0-1.7-0.3-2.3-0.9c-0.6-0.6-0.9-1.4-0.9-2.3V22.3H26.6v51.4H69.4z\r\n                M48,43.7c1.2,0,2.2,0.4,3,1.3c0.8,0.8,1.3,1.9,1.3,3v12.9c0,1.2-0.4,2.2-1.3,3c-0.8,0.8-1.9,1.3-3,1.3H35.1c-1.2,0-2.2-0.4-3-1.3\r\n                c-0.8-0.8-1.3-1.9-1.3-3V48c0-1.2,0.4-2.2,1.3-3c0.8-0.8,1.9-1.3,3-1.3H48z M64.5,43.8c0.4,0.2,0.7,0.5,0.7,1v19.3\r\n                c0,0.5-0.2,0.8-0.7,1c-0.2,0-0.3,0.1-0.4,0.1c-0.3,0-0.6-0.1-0.8-0.3l-8.9-8.9v-3l8.9-8.9c0.2-0.2,0.5-0.3,0.8-0.3\r\n                C64.2,43.7,64.3,43.7,64.5,43.8z\"/>\r\n        </g>\r\n    </svg>\r\n\r\n</ng-container>",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block;border:1px solid #eaeaea;border-radius:4px}:host svg{fill:#909293}"]
            }]
    }], function () { return [{ type: FileUploadService }]; }, { file: [{
            type: core.Input
        }] }); })();
        return FileUploadIconComponent;
    }());
    FileUploadIconComponent.ctorParameters = function () { return [
        { type: FileUploadService }
    ]; };
    FileUploadIconComponent.propDecorators = {
        file: [{ type: core.Input }]
    };

    var FileUploadAttributeComponent = /** @class */ (function () {
        function FileUploadAttributeComponent(fileUploadService, hostElementRef, renderer, document) {
            var _this = this;
            this.fileUploadService = fileUploadService;
            this.hostElementRef = hostElementRef;
            this.renderer = renderer;
            this.document = document;
            this.control = null;
            this.templateRef = null;
            this.hooks = [];
            this.subscriptions = [];
            this.onTouch = function () {
                _this.renderer.addClass(_this.hostElementRef.nativeElement, TOUCHED);
            };
        }
        FileUploadAttributeComponent.prototype.ngOnInit = function () {
            if (IsNullOrEmpty(this.control)) {
                this.control = new FileUploadControl();
            }
        };
        FileUploadAttributeComponent.prototype.ngAfterViewInit = function () {
            if (this.fileUploadService.isFileDragDropAvailable()) {
                this.setEvents();
                this.checkAndMarkAsDisabled();
            }
        };
        FileUploadAttributeComponent.prototype.ngOnDestroy = function () {
            this.hooks.forEach(function (hook) { return hook(); });
            this.hooks.length = 0;
            this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
            this.subscriptions.length = 0;
        };
        Object.defineProperty(FileUploadAttributeComponent.prototype, "hasFiles", {
            get: function () {
                return this.control.isListVisible && this.control.size > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FileUploadAttributeComponent.prototype, "isInvalid", {
            get: function () {
                return !this.control.disabled && this.control.invalid;
            },
            enumerable: false,
            configurable: true
        });
        FileUploadAttributeComponent.prototype.setEvents = function () {
            var _this = this;
            ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach(function (eventName) {
                _this.hooks.push(_this.renderer.listen(_this.document, eventName, function (event) { return _this.preventDragEvents(event); }));
            });
            ['dragover', 'dragenter'].forEach(function (eventName) {
                _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, function (event) { return _this.onDragOver(event); }));
            });
            ['dragleave', 'dragend', 'drop'].forEach(function (eventName) {
                _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, function (event) {
                    if (_this.control.disabled && eventName === 'dragleave' || eventName !== 'dragleave') {
                        _this.onDragLeave(event);
                    }
                }));
            });
            ['dragleave'].forEach(function (eventName) {
                _this.hooks.push(_this.renderer.listen(_this.overlay.nativeElement, eventName, function (event) { return _this.onDragLeave(event); }));
            });
            this.subscriptions.push(this.control.statusChanges.subscribe(function (status) { return _this.checkAndMarkAsDisabled(); }));
        };
        FileUploadAttributeComponent.prototype.checkAndMarkAsDisabled = function () {
            if (this.control.disabled) {
                this.renderer.addClass(this.hostElementRef.nativeElement, 'disabled');
            }
            else {
                this.renderer.removeClass(this.hostElementRef.nativeElement, 'disabled');
            }
        };
        FileUploadAttributeComponent.prototype.preventDragEvents = function (event) {
            event.preventDefault();
            event.stopPropagation();
        };
        /**
         * on file over add class name
         */
        FileUploadAttributeComponent.prototype.onDragOver = function (event) {
            this.renderer.addClass(this.hostElementRef.nativeElement, DRAGOVER);
        };
        /**
         * on mouse out remove class name
         */
        FileUploadAttributeComponent.prototype.onDragLeave = function (event) {
            this.renderer.removeClass(this.hostElementRef.nativeElement, DRAGOVER);
        };
        FileUploadAttributeComponent.prototype.onDrop = function (event) {
            if (this.control.disabled) {
                return;
            }
            var files = event.dataTransfer.files;
            this.control.addFiles(files);
            this.onTouch();
        };
FileUploadAttributeComponent.ɵfac = function FileUploadAttributeComponent_Factory(t) { return new (t || FileUploadAttributeComponent)(ɵngcc0.ɵɵdirectiveInject(FileUploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(common.DOCUMENT)); };
FileUploadAttributeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadAttributeComponent, selectors: [["", "file-drop-zone", ""]], contentQueries: function FileUploadAttributeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    } }, viewQuery: function FileUploadAttributeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c6, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlay = _t.first);
    } }, hostVars: 4, hostBindings: function FileUploadAttributeComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("drop", function FileUploadAttributeComponent_drop_HostBindingHandler($event) { return ctx.onDrop($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("has-files", ctx.hasFiles)("ng-invalid", ctx.isInvalid);
    } }, inputs: { control: "control" }, features: [ɵngcc0.ɵɵProvidersFeature([
            FileUploadService
        ])], attrs: _c7, ngContentSelectors: _c5, decls: 2, vars: 1, consts: [["class", "overlay", 4, "ngIf"], [1, "overlay"], ["overlay", ""], [1, "upload-input"], [4, "ngTemplateOutlet"], ["defaultTemplate", ""]], template: function FileUploadAttributeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, FileUploadAttributeComponent_div_1_Template, 6, 1, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fileUploadService.isFileDragDropAvailable());
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, FileUploadDropZoneComponent], styles: ["[_nghost-%COMP%]{position:relative;display:block}[_nghost-%COMP%]   .overlay[_ngcontent-%COMP%]{display:none;background:hsla(0,0%,100%,.8);outline:2px dashed #92b0b3;outline-offset:-10px;position:absolute;top:0;left:0;right:0;bottom:0}.dragover[_nghost-%COMP%]:not(.disabled)   .overlay[_ngcontent-%COMP%]{display:block}[_nghost-%COMP%]     .icon{margin:0 auto 10px}[_nghost-%COMP%]     .icon svg{fill:#80a9d2}.upload-input[_ngcontent-%COMP%]{pointer-events:none;cursor:pointer;display:inline-block;color:#80a9d2;position:absolute;top:50%;left:50%;-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);transition:all .15s ease-in-out}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadAttributeComponent, [{
        type: core.Component,
        args: [{
                selector: "[file-drop-zone]",
                template: "\n        <ng-content></ng-content>\n        <div #overlay class=\"overlay\" *ngIf=\"fileUploadService.isFileDragDropAvailable()\">\n\n            <div class=\"upload-input\">\n                <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : defaultTemplate\"></ng-container>\n\n                <ng-template #defaultTemplate>\n                    <file-upload-drop-zone>\n                        <b>Drop</b> it here\n                    </file-upload-drop-zone>\n                </ng-template>\n            </div>\n        </div>\n    ",
                providers: [
                    FileUploadService
                ],
                styles: [":host{position:relative;display:block}:host .overlay{display:none;background:hsla(0,0%,100%,.8);outline:2px dashed #92b0b3;outline-offset:-10px;position:absolute;top:0;left:0;right:0;bottom:0}:host(.dragover:not(.disabled)) .overlay{display:block}:host ::ng-deep .icon{margin:0 auto 10px}:host ::ng-deep .icon svg{fill:#80a9d2}.upload-input{pointer-events:none;cursor:pointer;display:inline-block;color:#80a9d2;position:absolute;top:50%;left:50%;-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);transition:all .15s ease-in-out}"]
            }]
    }], function () { return [{ type: FileUploadService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: undefined, decorators: [{
                type: core.Inject,
                args: [common.DOCUMENT]
            }] }]; }, { control: [{
            type: core.Input
        }], templateRef: [{
            type: core.ContentChild,
            args: ['placeholder']
        }], hasFiles: [{
            type: core.HostBinding,
            args: ['class.has-files']
        }], isInvalid: [{
            type: core.HostBinding,
            args: ['class.ng-invalid']
        }], onDrop: [{
            type: core.HostListener,
            args: ['drop', ['$event']]
        }], overlay: [{
            type: core.ViewChild,
            args: ['overlay']
        }] }); })();
        return FileUploadAttributeComponent;
    }());
    FileUploadAttributeComponent.ctorParameters = function () { return [
        { type: FileUploadService },
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
    ]; };
    FileUploadAttributeComponent.propDecorators = {
        control: [{ type: core.Input }],
        overlay: [{ type: core.ViewChild, args: ['overlay',] }],
        templateRef: [{ type: core.ContentChild, args: ['placeholder',] }],
        hasFiles: [{ type: core.HostBinding, args: ['class.has-files',] }],
        isInvalid: [{ type: core.HostBinding, args: ['class.ng-invalid',] }],
        onDrop: [{ type: core.HostListener, args: ['drop', ['$event'],] }]
    };

    var SimpleFileUploadComponent = /** @class */ (function (_super) {
        __extends(SimpleFileUploadComponent, _super);
        function SimpleFileUploadComponent(fileUploadService, hostElementRef, renderer, cdr) {
            var _this = _super.call(this, hostElementRef, renderer, cdr) || this;
            _this.fileUploadService = fileUploadService;
            _this.control = null;
            _this.buttonRef = null;
            _this.placeholderRef = null;
            _this.isMultiple = false;
            _this.onTouch = function () {
                _this.renderer.addClass(_this.hostElementRef.nativeElement, TOUCHED);
            };
            return _this;
        }
        Object.defineProperty(SimpleFileUploadComponent.prototype, "hasFiles", {
            get: function () {
                return this.control.isListVisible && this.control.size > 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SimpleFileUploadComponent.prototype, "isInvalid", {
            get: function () {
                return !this.control.disabled && this.control.invalid;
            },
            enumerable: false,
            configurable: true
        });
        SimpleFileUploadComponent.prototype.onInputChange = function (event) {
            var input = (event.target);
            if (!this.control.disabled && input.files.length > 0) {
                this.control.setValue(Array.from(input.files));
                this.clearInputEl();
            }
            this.onTouch();
        };
        /**
         * model -> view changes
         */
        SimpleFileUploadComponent.prototype.writeValue = function (files) {
            if (files != null) {
                this.control.setValue(files);
            }
        };
        /**
         * register function which will be called on UI change
         * to update view -> model
         */
        SimpleFileUploadComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        SimpleFileUploadComponent.prototype.registerOnTouched = function (fn) {
            this.onTouch = fn;
        };
        SimpleFileUploadComponent.prototype.setDisabledState = function (isDisabled) {
            this.control.disable(isDisabled);
        };
        SimpleFileUploadComponent.prototype.onKeyDown = function (event) {
            if (event.keyCode === 13 || event.keyCode === 32) {
                event.preventDefault();
                this.control.click();
            }
        };
SimpleFileUploadComponent.ɵfac = function SimpleFileUploadComponent_Factory(t) { return new (t || SimpleFileUploadComponent)(ɵngcc0.ɵɵdirectiveInject(FileUploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
SimpleFileUploadComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SimpleFileUploadComponent, selectors: [["file-upload", "simple", ""]], contentQueries: function SimpleFileUploadComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c8, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.buttonRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.placeholderRef = _t.first);
    } }, viewQuery: function SimpleFileUploadComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c2, true);
        ɵngcc0.ɵɵstaticViewQuery(_c3, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);
    } }, hostVars: 4, hostBindings: function SimpleFileUploadComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("has-files", ctx.hasFiles)("ng-invalid", ctx.isInvalid);
    } }, inputs: { control: "control" }, features: [ɵngcc0.ɵɵProvidersFeature([
            FileUploadService,
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: core.forwardRef(function () { return SimpleFileUploadComponent; }),
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c9, decls: 12, vars: 7, consts: [[1, "upload-text"], [3, "ngIf"], ["defaultPlaceholderTemplate", ""], ["tabindex", "0", 1, "upload-button", 3, "keydown"], ["labelRef", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["defaultButtonTemplate", ""], ["type", "file", "tabindex", "-1", 1, "files-input", 3, "change"], ["inputRef", ""], ["class", "file-name", 4, "ngIf", "ngIfElse"], ["emptyList", ""], [1, "file-name"], [1, "button"], [1, "icon"], ["viewBox", "0 0 96 96"], ["d", "M62.8,68.1c0-0.6-0.2-1.1-0.6-1.5c-0.4-0.4-0.9-0.6-1.5-0.6s-1.1,0.2-1.5,0.6\n                            c-0.4,0.4-0.6,0.9-0.6,1.5c0,0.6,0.2,1.1,0.6,1.5c0.4,0.4,0.9,0.6,1.5,0.6s1.1-0.2,1.5-0.6S62.8,68.7,62.8,68.1z M71.3,68.1\n                            c0-0.6-0.2-1.1-0.6-1.5c-0.4-0.4-0.9-0.6-1.5-0.6c-0.6,0-1.1,0.2-1.5,0.6C67.2,67,67,67.5,67,68.1c0,0.6,0.2,1.1,0.6,1.5\n                            s0.9,0.6,1.5,0.6c0.6,0,1.1-0.2,1.5-0.6C71.1,69.2,71.3,68.7,71.3,68.1z M75.5,60.7v10.6c0,0.9-0.3,1.6-0.9,2.2\n                            c-0.6,0.6-1.4,0.9-2.2,0.9H23.7c-0.9,0-1.6-0.3-2.2-0.9c-0.6-0.6-0.9-1.4-0.9-2.2V60.7c0-0.9,0.3-1.6,0.9-2.2\n                            c0.6-0.6,1.4-0.9,2.2-0.9h14.1c0.5,1.2,1.2,2.2,2.3,3c1.1,0.8,2.3,1.2,3.7,1.2h8.5c1.3,0,2.6-0.4,3.7-1.2c1.1-0.8,1.9-1.8,2.3-3\n                            h14.1c0.9,0,1.6,0.3,2.2,0.9C75.2,59.1,75.5,59.8,75.5,60.7z M64.8,39.3c-0.4,0.9-1,1.3-2,1.3h-8.5v14.8c0,0.6-0.2,1.1-0.6,1.5\n                            c-0.4,0.4-0.9,0.6-1.5,0.6h-8.5c-0.6,0-1.1-0.2-1.5-0.6c-0.4-0.4-0.6-0.9-0.6-1.5V40.6h-8.5c-0.9,0-1.6-0.4-2-1.3\n                            c-0.4-0.9-0.2-1.6,0.5-2.3l14.8-14.8c0.4-0.4,0.9-0.6,1.5-0.6s1.1,0.2,1.5,0.6L64.3,37C65,37.7,65.1,38.4,64.8,39.3z"], [1, "button-text"]], template: function SimpleFileUploadComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, SimpleFileUploadComponent_ng_template_1_Template, 1, 6, "ng-template", 1);
        ɵngcc0.ɵɵpipe(2, "async");
        ɵngcc0.ɵɵtemplate(3, SimpleFileUploadComponent_ng_template_3_Template, 3, 2, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "label", 3, 4);
        ɵngcc0.ɵɵlistener("keydown", function SimpleFileUploadComponent_Template_label_keydown_5_listener($event) { return ctx.onKeyDown($event); });
        ɵngcc0.ɵɵtemplate(7, SimpleFileUploadComponent_ng_container_7_Template, 1, 0, "ng-container", 5);
        ɵngcc0.ɵɵtemplate(8, SimpleFileUploadComponent_ng_template_8_Template, 7, 0, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementStart(10, "input", 7, 8);
        ɵngcc0.ɵɵlistener("change", function SimpleFileUploadComponent_Template_input_change_10_listener($event) { return ctx.onInputChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r5 = ɵngcc0.ɵɵreference(9);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(2, 3, ctx.control.valueChanges));
        ɵngcc0.ɵɵadvance(6);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.buttonRef ? ctx.buttonRef : _r5)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(5, _c11, ctx.control));
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], pipes: [ɵngcc1.AsyncPipe], styles: ["[_nghost-%COMP%], [_nghost-%COMP%] > *[_ngcontent-%COMP%]{box-sizing:border-box}[_nghost-%COMP%]{display:-ms-flexbox;display:flex;line-height:1.5;color:#555;background-color:#fff;border:1px solid #ddd;border-radius:4px;box-shadow:inset 0 4px 7px rgba(0,0,0,.05)}.disabled[_nghost-%COMP%]{opacity:.5}.files-input[_ngcontent-%COMP%]{width:.1px;height:.1px;opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden}.icon[_ngcontent-%COMP%]{height:24px;width:24px;display:inline-block}.icon[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{fill:#555}.upload-button[_ngcontent-%COMP%]{cursor:pointer;display:block;padding:2px 4px;background-color:#eee;border-left:1px solid #ddd;border-radius:0 4px 4px 0;min-width:100px;color:#555;margin:0;position:relative;outline:none}.upload-text[_ngcontent-%COMP%]{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;width:100%;padding:5px 10px;font-size:14px;height:30px}.button-text[_ngcontent-%COMP%]{vertical-align:middle;padding-left:10px}.disabled[_nghost-%COMP%]   .upload-button[_ngcontent-%COMP%]{cursor:not-allowed}[_nghost-%COMP%]:not(.disabled)   .upload-button[_ngcontent-%COMP%]:focus, [_nghost-%COMP%]:not(.disabled)   .upload-button[_ngcontent-%COMP%]:hover{color:#80a9d2}[_nghost-%COMP%]:not(.disabled)   .upload-button[_ngcontent-%COMP%]:focus   svg[_ngcontent-%COMP%], [_nghost-%COMP%]:not(.disabled)   .upload-button[_ngcontent-%COMP%]:hover   svg[_ngcontent-%COMP%]{fill:#80a9d2}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SimpleFileUploadComponent, [{
        type: core.Component,
        args: [{
                selector: "file-upload[simple]",
                template: "<div class=\"upload-text\">\r\n    <ng-template [ngIf]=\"control.valueChanges | async\">\r\n        <ng-container *ngTemplateOutlet=\"placeholderRef ? placeholderRef : defaultPlaceholderTemplate; context: { $implicit: control.value[0], control: control, file: control.value[0] }\"></ng-container>\r\n    </ng-template>\r\n    \r\n    <ng-template #defaultPlaceholderTemplate let-file>\r\n        <span *ngIf=\"file; else emptyList\" class=\"file-name\">{{ file.name }}</span>\r\n\r\n        <ng-template #emptyList>\r\n            Select a file...\r\n        </ng-template>\r\n    </ng-template>\r\n</div>\r\n\r\n<label #labelRef class=\"upload-button\" tabindex=\"0\" (keydown)=\"onKeyDown($event)\">\r\n    <ng-container *ngTemplateOutlet=\"buttonRef ? buttonRef : defaultButtonTemplate; context: { control: control }\"></ng-container>\r\n\r\n    <ng-template #defaultButtonTemplate>\r\n        <div class=\"button\">\r\n            <div class=\"icon\">\r\n                <svg viewBox=\"0 0 96 96\">\r\n                    <g>\r\n                        <path d=\"M62.8,68.1c0-0.6-0.2-1.1-0.6-1.5c-0.4-0.4-0.9-0.6-1.5-0.6s-1.1,0.2-1.5,0.6\r\n                            c-0.4,0.4-0.6,0.9-0.6,1.5c0,0.6,0.2,1.1,0.6,1.5c0.4,0.4,0.9,0.6,1.5,0.6s1.1-0.2,1.5-0.6S62.8,68.7,62.8,68.1z M71.3,68.1\r\n                            c0-0.6-0.2-1.1-0.6-1.5c-0.4-0.4-0.9-0.6-1.5-0.6c-0.6,0-1.1,0.2-1.5,0.6C67.2,67,67,67.5,67,68.1c0,0.6,0.2,1.1,0.6,1.5\r\n                            s0.9,0.6,1.5,0.6c0.6,0,1.1-0.2,1.5-0.6C71.1,69.2,71.3,68.7,71.3,68.1z M75.5,60.7v10.6c0,0.9-0.3,1.6-0.9,2.2\r\n                            c-0.6,0.6-1.4,0.9-2.2,0.9H23.7c-0.9,0-1.6-0.3-2.2-0.9c-0.6-0.6-0.9-1.4-0.9-2.2V60.7c0-0.9,0.3-1.6,0.9-2.2\r\n                            c0.6-0.6,1.4-0.9,2.2-0.9h14.1c0.5,1.2,1.2,2.2,2.3,3c1.1,0.8,2.3,1.2,3.7,1.2h8.5c1.3,0,2.6-0.4,3.7-1.2c1.1-0.8,1.9-1.8,2.3-3\r\n                            h14.1c0.9,0,1.6,0.3,2.2,0.9C75.2,59.1,75.5,59.8,75.5,60.7z M64.8,39.3c-0.4,0.9-1,1.3-2,1.3h-8.5v14.8c0,0.6-0.2,1.1-0.6,1.5\r\n                            c-0.4,0.4-0.9,0.6-1.5,0.6h-8.5c-0.6,0-1.1-0.2-1.5-0.6c-0.4-0.4-0.6-0.9-0.6-1.5V40.6h-8.5c-0.9,0-1.6-0.4-2-1.3\r\n                            c-0.4-0.9-0.2-1.6,0.5-2.3l14.8-14.8c0.4-0.4,0.9-0.6,1.5-0.6s1.1,0.2,1.5,0.6L64.3,37C65,37.7,65.1,38.4,64.8,39.3z\"/>\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n            \r\n            <span class=\"button-text\">Browse</span>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <input #inputRef type=\"file\" class=\"files-input\" tabindex=\"-1\" (change)=\"onInputChange($event)\">\r\n</label>",
                providers: [
                    FileUploadService,
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return SimpleFileUploadComponent; }),
                        multi: true
                    }
                ],
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                styles: [":host,:host>*{box-sizing:border-box}:host{display:-ms-flexbox;display:flex;line-height:1.5;color:#555;background-color:#fff;border:1px solid #ddd;border-radius:4px;box-shadow:inset 0 4px 7px rgba(0,0,0,.05)}:host(.disabled){opacity:.5}.files-input{width:.1px;height:.1px;opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden}.icon{height:24px;width:24px;display:inline-block}.icon svg{fill:#555}.upload-button{cursor:pointer;display:block;padding:2px 4px;background-color:#eee;border-left:1px solid #ddd;border-radius:0 4px 4px 0;min-width:100px;color:#555;margin:0;position:relative;outline:none}.upload-text{display:block;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;width:100%;padding:5px 10px;font-size:14px;height:30px}.button-text{vertical-align:middle;padding-left:10px}:host(.disabled) .upload-button{cursor:not-allowed}:host(:not(.disabled)) .upload-button:focus,:host(:not(.disabled)) .upload-button:hover{color:#80a9d2}:host(:not(.disabled)) .upload-button:focus svg,:host(:not(.disabled)) .upload-button:hover svg{fill:#80a9d2}"]
            }]
    }], function () { return [{ type: FileUploadService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }]; }, { hasFiles: [{
            type: core.HostBinding,
            args: ['class.has-files']
        }], isInvalid: [{
            type: core.HostBinding,
            args: ['class.ng-invalid']
        }], control: [{
            type: core.Input
        }], buttonRef: [{
            type: core.ContentChild,
            args: ['button']
        }], placeholderRef: [{
            type: core.ContentChild,
            args: ['placeholder']
        }], input: [{
            type: core.ViewChild,
            args: ['inputRef', { static: true }]
        }], label: [{
            type: core.ViewChild,
            args: ['labelRef', { static: true }]
        }] }); })();
        return SimpleFileUploadComponent;
    }(FileUploadAbstract));
    SimpleFileUploadComponent.ctorParameters = function () { return [
        { type: FileUploadService },
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: core.ChangeDetectorRef }
    ]; };
    SimpleFileUploadComponent.propDecorators = {
        control: [{ type: core.Input }],
        buttonRef: [{ type: core.ContentChild, args: ['button',] }],
        placeholderRef: [{ type: core.ContentChild, args: ['placeholder',] }],
        input: [{ type: core.ViewChild, args: ['inputRef', { static: true },] }],
        label: [{ type: core.ViewChild, args: ['labelRef', { static: true },] }],
        hasFiles: [{ type: core.HostBinding, args: ['class.has-files',] }],
        isInvalid: [{ type: core.HostBinding, args: ['class.ng-invalid',] }]
    };

    /**
     * function used to check file size
     */
    var checkFileSize = function (file, maxSize, minSize) {
        if (minSize === void 0) { minSize = 0; }
        return (!IsNullOrEmpty(maxSize) && file.size > maxSize) || file.size < minSize ?
            { maxSize: maxSize, minSize: minSize, actual: file.size, file: file } : null;
    };
    var ɵ0 = checkFileSize;
    var getFileType = function (file, fileExtension) {
        var type = file.type;
        if (!IsNullOrEmpty(type)) {
            return type;
        }
        return exports.FileUploadTypes[fileExtension];
    };
    var ɵ1 = getFileType;
    var FILE_EXT_REG = /(^[.]\w*)$/m;
    /**
     * function used to check file type
     *
     * #### allowedTypes
     * file_extension|audio/*|video/*|image/*|media_type
     */
    var checkFileType = function (file, allowedTypes) {
        var e_1, _a;
        var fileExtension = file.name.split('.').pop().toLowerCase();
        var fileType = getFileType(file, fileExtension);
        try {
            for (var allowedTypes_1 = __values(allowedTypes), allowedTypes_1_1 = allowedTypes_1.next(); !allowedTypes_1_1.done; allowedTypes_1_1 = allowedTypes_1.next()) {
                var type = allowedTypes_1_1.value;
                var isValid = FILE_EXT_REG.test(type) ? type === "." + fileExtension : new RegExp(type).test(fileType);
                if (isValid) {
                    return null;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (allowedTypes_1_1 && !allowedTypes_1_1.done && (_a = allowedTypes_1.return)) _a.call(allowedTypes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return { allowedTypes: allowedTypes, actual: file.type, file: file };
    };
    var ɵ2 = checkFileType;
    var checkValueType = function (value) {
        if (!Array.isArray(value)) {
            throw Error("FormControl.setValue was provided with wrong argument type, " + value + " was provided instead Array<File>");
        }
    };
    var ɵ3 = checkValueType;
    // @dynamic
    var FileUploadValidators = /** @class */ (function () {
        function FileUploadValidators() {
        }
        /**
         * Validator that requires controls to have a file maximum size length.
         * Compare the File size in bytes
         * @dynamic
         */
        FileUploadValidators.fileSize = function (maxSize) {
            return function (control) {
                var files = control.value;
                if (IsNullOrEmpty(files)) {
                    return null;
                }
                checkValueType(files);
                var toLargeFiles = files.map(function (file) { return checkFileSize(file, maxSize); })
                    .filter(function (error) { return error; });
                return toLargeFiles.length > 0 ?
                    { 'fileSize': toLargeFiles } : null;
            };
        };
        /**
         * Compare the File size in bytes with max and min size limits
         * @dynamic
         */
        FileUploadValidators.sizeRange = function (_a) {
            var minSize = _a.minSize, maxSize = _a.maxSize;
            return function (control) {
                var files = control.value;
                if (IsNullOrEmpty(files)) {
                    return null;
                }
                checkValueType(files);
                var sizeMismatch = files.map(function (file) { return checkFileSize(file, maxSize, minSize); })
                    .filter(function (error) { return error; });
                return sizeMismatch.length > 0 ?
                    { 'sizeRange': sizeMismatch } : null;
            };
        };
        /**
         * validator that requires control to have limit on files number
         * @dynamic
         */
        FileUploadValidators.filesLimit = function (numFiles) {
            return function (control) {
                var files = control.value;
                if (IsNullOrEmpty(files)) {
                    return null;
                }
                checkValueType(files);
                var filesLimit = files.slice(-1 * (files.length - numFiles))
                    .map(function (file) { return ({ 'max': numFiles, 'actual': files.length, file: file }); });
                return files.length > numFiles ?
                    { 'filesLimit': filesLimit } : null;
            };
        };
        /**
         * validator that requires control to have limit on media types
         *
         * ##### Allowed media types are
         *
         * - file_extension - a file extension starting with the STOP character,
         * e.g: .gif, .jpg, .png, .doc
         * - audio/* -        All sound files are accepted
         * - video/* -        All video files are accepted
         * - image/* -        All image files are accepted
         * - media_type -     A valid media type, with no parameters. Look at [IANA Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml) for a complete list of standard media types
         *
         * #### Example
         * `FileUploadValidators.accept([file_extension, audio/*, video/*, image/*, media_type])`
         * @dynamic
         */
        FileUploadValidators.accept = function (allowedFileTypes) {
            return function (control) {
                var files = control.value;
                if (IsNullOrEmpty(files)) {
                    return null;
                }
                checkValueType(files);
                var notAllowedFiles = files.map(function (file) { return checkFileType(file, allowedFileTypes); })
                    .filter(function (error) { return error; });
                return notAllowedFiles.length > 0 ?
                    { 'fileTypes': notAllowedFiles } : null;
            };
        };
        return FileUploadValidators;
    }());

    /**
     * A Directive that adds the `filesize` validator to controls marked with the
     * `filesize` attribute. The size of the file is in bytes or any other unit
     *
     * ### Example
     *
     * ```
     * <file-upload name="files" ngModel filesize="830000"></file-upload>
     * <file-upload name="files" ngModel [filesize]="830000"></file-upload>
     * <file-upload name="files" ngModel minSize="0" max="6200"></file-upload>
     * <file-upload name="files" ngModel filesize="123MB"></file-upload>
     * <file-upload name="files" ngModel [filesize]="12 mb"></file-upload>
     * <file-upload name="files" ngModel minSize="0" max="324KB"></file-upload>
     * ```
     *
     */
    var FileSizeValidator = /** @class */ (function () {
        function FileSizeValidator(fileUploadService) {
            this.fileUploadService = fileUploadService;
        }
        FileSizeValidator.prototype.ngOnChanges = function (changes) {
            if ('filesize' in changes
                || 'maxsize' in changes
                || 'minsize' in changes) {
                this._createValidator();
                if (this.onChange) {
                    this.onChange();
                }
            }
        };
        FileSizeValidator.prototype.validate = function (c) {
            return this.validator(c);
        };
        FileSizeValidator.prototype.registerOnValidatorChange = function (fn) {
            this.onChange = fn;
        };
        FileSizeValidator.prototype._createValidator = function () {
            var maxSize = null;
            if (!IsNullOrEmpty(this.maxsize)) {
                maxSize = this.fileUploadService.parseSize(this.maxsize);
            }
            else if (!IsNullOrEmpty(this.filesize)) {
                maxSize = this.fileUploadService.parseSize(this.filesize);
            }
            var minSize = this.fileUploadService.parseSize(this.minsize);
            this.validator = FileUploadValidators.sizeRange({ maxSize: maxSize, minSize: minSize });
        };
FileSizeValidator.ɵfac = function FileSizeValidator_Factory(t) { return new (t || FileSizeValidator)(ɵngcc0.ɵɵdirectiveInject(FileUploadService)); };
FileSizeValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FileSizeValidator, selectors: [["file-upload", "filesize", "", "formControlName", ""], ["file-upload", "filesize", "", "formControl", ""], ["file-upload", "filesize", "", "ngModel", ""], ["file-upload", "minsize", "", "formControlName", ""], ["file-upload", "minsize", "", "formControl", ""], ["file-upload", "minsize", "", "ngModel", ""], ["file-upload", "maxsize", "", "formControlName", ""], ["file-upload", "maxsize", "", "formControl", ""], ["file-upload", "maxsize", "", "ngModel", ""]], hostVars: 3, hostBindings: function FileSizeValidator_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("filesize", ctx.filesize ? ctx.filesize : null)("minsize", ctx.minsize ? ctx.minsize : null)("maxsize", ctx.maxsize ? ctx.maxsize : null);
    } }, inputs: { filesize: "filesize", minsize: "minsize", maxsize: "maxsize" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: forms.NG_VALIDATORS,
                useExisting: core.forwardRef(function () { return FileSizeValidator; }),
                multi: true
            }]), ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileSizeValidator, [{
        type: core.Directive,
        args: [{
                selector: "file-upload[filesize][formControlName],\n    file-upload[filesize][formControl],\n    file-upload[filesize][ngModel],\n    file-upload[minsize][formControlName],\n    file-upload[minsize][formControl],\n    file-upload[minsize][ngModel],\n    file-upload[maxsize][formControlName],\n    file-upload[maxsize][formControl],\n    file-upload[maxsize][ngModel]",
                providers: [{
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return FileSizeValidator; }),
                        multi: true
                    }],
                host: {
                    '[attr.filesize]': 'filesize ? filesize : null',
                    '[attr.minsize]': 'minsize ? minsize : null',
                    '[attr.maxsize]': 'maxsize ? maxsize : null'
                }
            }]
    }], function () { return [{ type: FileUploadService }]; }, { filesize: [{
            type: core.Input
        }], minsize: [{
            type: core.Input
        }], maxsize: [{
            type: core.Input
        }] }); })();
        return FileSizeValidator;
    }());
    FileSizeValidator.ctorParameters = function () { return [
        { type: FileUploadService }
    ]; };
    FileSizeValidator.propDecorators = {
        filesize: [{ type: core.Input }],
        minsize: [{ type: core.Input }],
        maxsize: [{ type: core.Input }]
    };
    /**
     * A Directive that adds the `fileslimit` validator to controls marked with the
     * `fileslimit` attribute.
     *
     * ### Example
     *
     * ```
     * <file-upload name="files" ngModel fileslimit="2"></file-upload>
     * <file-upload name="files" ngModel [fileslimit]="2"></file-upload>
     * ```
     *
     */
    var FilesLimitValidator = /** @class */ (function () {
        function FilesLimitValidator() {
        }
        FilesLimitValidator.prototype.ngOnChanges = function (changes) {
            if ('fileslimit' in changes) {
                this._createValidator();
                if (this.onChange) {
                    this.onChange();
                }
            }
        };
        FilesLimitValidator.prototype.validate = function (c) {
            return this.fileslimit != null ? this.validator(c) : null;
        };
        FilesLimitValidator.prototype.registerOnValidatorChange = function (fn) {
            this.onChange = fn;
        };
        FilesLimitValidator.prototype._createValidator = function () {
            this.validator = FileUploadValidators.filesLimit(typeof this.fileslimit === 'string' ? parseInt(this.fileslimit, 10) : this.fileslimit);
        };
FilesLimitValidator.ɵfac = function FilesLimitValidator_Factory(t) { return new (t || FilesLimitValidator)(); };
FilesLimitValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilesLimitValidator, selectors: [["file-upload", "fileslimit", "", "formControlName", ""], ["file-upload", "fileslimit", "", "formControl", ""], ["file-upload", "fileslimit", "", "ngModel", ""]], hostVars: 1, hostBindings: function FilesLimitValidator_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("fileslimit", ctx.fileslimit ? ctx.fileslimit : null);
    } }, inputs: { fileslimit: "fileslimit" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: forms.NG_VALIDATORS,
                useExisting: core.forwardRef(function () { return FilesLimitValidator; }),
                multi: true
            }]), ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilesLimitValidator, [{
        type: core.Directive,
        args: [{
                selector: 'file-upload[fileslimit][formControlName], file-upload[fileslimit][formControl], file-upload[fileslimit][ngModel]',
                providers: [{
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return FilesLimitValidator; }),
                        multi: true
                    }],
                host: { '[attr.fileslimit]': 'fileslimit ? fileslimit : null' }
            }]
    }], function () { return []; }, { fileslimit: [{
            type: core.Input
        }] }); })();
        return FilesLimitValidator;
    }());
    FilesLimitValidator.propDecorators = {
        fileslimit: [{ type: core.Input }]
    };
    /**
     * A Directive that adds the `accept` validator to controls marked with the
     * `accept` attribute.
     *
     * ### Example
     *
     * ```
     * <file-upload name="files" ngModel accept="file_extension|audio/*|video/*|image/*|media_type"></file-upload>
     * <file-upload name="files" ngModel [accept]="file_extension|audio/*|video/*|image/*|media_type"></file-upload>
     * ```
     *
     * To specify more than one value, separate the values with a comma (e.g. <file-upload accept="audio/*,video/*,image/*"></file-upload>.
     *
     */
    var FilesAcceptValidator = /** @class */ (function () {
        function FilesAcceptValidator() {
        }
        FilesAcceptValidator.prototype.ngOnChanges = function (changes) {
            if ('accept' in changes) {
                this._createValidator();
                if (this.onChange) {
                    this.onChange();
                }
            }
        };
        FilesAcceptValidator.prototype.validate = function (c) {
            return !!this.validator ? this.validator(c) : null;
        };
        FilesAcceptValidator.prototype.registerOnValidatorChange = function (fn) {
            this.onChange = fn;
        };
        FilesAcceptValidator.prototype._createValidator = function () {
            if (IsNullOrEmpty(this.accept)) {
                return;
            }
            this.validator = FileUploadValidators.accept(this.accept.split(','));
        };
FilesAcceptValidator.ɵfac = function FilesAcceptValidator_Factory(t) { return new (t || FilesAcceptValidator)(); };
FilesAcceptValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilesAcceptValidator, selectors: [["file-upload", "accept", "", "formControlName", ""], ["file-upload", "accept", "", "formControl", ""], ["file-upload", "accept", "", "ngModel", ""]], hostVars: 1, hostBindings: function FilesAcceptValidator_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("accept", ctx.accept ? ctx.accept : null);
    } }, inputs: { accept: "accept" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: forms.NG_VALIDATORS,
                useExisting: core.forwardRef(function () { return FilesAcceptValidator; }),
                multi: true
            }]), ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilesAcceptValidator, [{
        type: core.Directive,
        args: [{
                selector: 'file-upload[accept][formControlName], file-upload[accept][formControl], file-upload[accept][ngModel]',
                providers: [{
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return FilesAcceptValidator; }),
                        multi: true
                    }],
                host: { '[attr.accept]': 'accept ? accept : null' }
            }]
    }], function () { return []; }, { accept: [{
            type: core.Input
        }] }); })();
        return FilesAcceptValidator;
    }());
    FilesAcceptValidator.propDecorators = {
        accept: [{ type: core.Input }]
    };

    var FilesAcceptDirective = /** @class */ (function () {
        function FilesAcceptDirective(fileUpload, simpleFileUpload) {
            this.fileUpload = null;
            this.fileUpload = fileUpload || simpleFileUpload;
        }
        FilesAcceptDirective.prototype.ngAfterViewInit = function () {
            this.setAccept(this.accept);
        };
        FilesAcceptDirective.prototype.ngOnChanges = function (changes) {
            if ('accept' in changes && changes['accept'].currentValue !== changes['accept'].previousValue) {
                this.setAccept(this.accept);
            }
        };
        FilesAcceptDirective.prototype.setAccept = function (accept) {
            if (this.fileUpload && this.fileUpload.control) {
                this.fileUpload.control.acceptFiles(accept);
            }
        };
FilesAcceptDirective.ɵfac = function FilesAcceptDirective_Factory(t) { return new (t || FilesAcceptDirective)(ɵngcc0.ɵɵdirectiveInject(FileUploadComponent, 11), ɵngcc0.ɵɵdirectiveInject(SimpleFileUploadComponent, 11)); };
FilesAcceptDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilesAcceptDirective, selectors: [["file-upload", "accept", ""]], hostVars: 1, hostBindings: function FilesAcceptDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("accept", ctx.accept ? ctx.accept : null);
    } }, inputs: { accept: "accept" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilesAcceptDirective, [{
        type: core.Directive,
        args: [{
                selector: 'file-upload[accept]',
                host: { '[attr.accept]': 'accept ? accept : null' }
            }]
    }], function () { return [{ type: FileUploadComponent, decorators: [{
                type: core.Optional
            }, {
                type: core.Host
            }, {
                type: core.Self
            }] }, { type: SimpleFileUploadComponent, decorators: [{
                type: core.Optional
            }, {
                type: core.Host
            }, {
                type: core.Self
            }] }]; }, { accept: [{
            type: core.Input
        }] }); })();
        return FilesAcceptDirective;
    }());
    FilesAcceptDirective.ctorParameters = function () { return [
        { type: FileUploadComponent, decorators: [{ type: core.Optional }, { type: core.Host }, { type: core.Self }] },
        { type: SimpleFileUploadComponent, decorators: [{ type: core.Optional }, { type: core.Host }, { type: core.Self }] }
    ]; };
    FilesAcceptDirective.propDecorators = {
        accept: [{ type: core.Input }]
    };

    var FilesDiscardDirective = /** @class */ (function () {
        function FilesDiscardDirective(fileUpload, simpleFileUpload) {
            this.discardValue = null;
            this.fileUpload = null;
            this.fileUpload = fileUpload || simpleFileUpload;
        }
        Object.defineProperty(FilesDiscardDirective.prototype, "discard", {
            set: function (discard) {
                if (typeof discard === 'string' && (discard === 'true' || discard === 'false')) {
                    this.discardValue = JSON.parse(discard.toLowerCase());
                }
                else if (typeof discard === 'boolean') {
                    this.discardValue = discard;
                }
                else {
                    throw Error("Provided value in directive [discard]=\"" + discard + "\" is not boolean.");
                }
            },
            enumerable: false,
            configurable: true
        });
        FilesDiscardDirective.prototype.ngAfterViewInit = function () {
            this.setAccept(this.discardValue);
        };
        FilesDiscardDirective.prototype.ngOnChanges = function (changes) {
            if ('discard' in changes && changes['discard'].currentValue !== changes['discard'].previousValue) {
                this.setAccept(this.discardValue);
            }
        };
        FilesDiscardDirective.prototype.setAccept = function (discard) {
            if (this.fileUpload && this.fileUpload.control) {
                this.fileUpload.control.discardInvalid(discard);
            }
        };
FilesDiscardDirective.ɵfac = function FilesDiscardDirective_Factory(t) { return new (t || FilesDiscardDirective)(ɵngcc0.ɵɵdirectiveInject(FileUploadComponent, 11), ɵngcc0.ɵɵdirectiveInject(SimpleFileUploadComponent, 11)); };
FilesDiscardDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilesDiscardDirective, selectors: [["file-upload", "discard", ""]], hostVars: 1, hostBindings: function FilesDiscardDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("discard", ctx.discard ? ctx.discard : null);
    } }, inputs: { discard: "discard" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilesDiscardDirective, [{
        type: core.Directive,
        args: [{
                selector: 'file-upload[discard]',
                host: { '[attr.discard]': 'discard ? discard : null' }
            }]
    }], function () { return [{ type: FileUploadComponent, decorators: [{
                type: core.Optional
            }, {
                type: core.Host
            }, {
                type: core.Self
            }] }, { type: SimpleFileUploadComponent, decorators: [{
                type: core.Optional
            }, {
                type: core.Host
            }, {
                type: core.Self
            }] }]; }, { discard: [{
            type: core.Input
        }] }); })();
        return FilesDiscardDirective;
    }());
    FilesDiscardDirective.ctorParameters = function () { return [
        { type: FileUploadComponent, decorators: [{ type: core.Optional }, { type: core.Host }, { type: core.Self }] },
        { type: SimpleFileUploadComponent, decorators: [{ type: core.Optional }, { type: core.Host }, { type: core.Self }] }
    ]; };
    FilesDiscardDirective.propDecorators = {
        discard: [{ type: core.Input }]
    };

    var FilesNativeDirective = /** @class */ (function () {
        function FilesNativeDirective(fileUpload, simpleFileUpload) {
            this.nativeValue = null;
            this.fileUpload = null;
            this.fileUpload = fileUpload || simpleFileUpload;
        }
        Object.defineProperty(FilesNativeDirective.prototype, "native", {
            set: function (isNative) {
                if (typeof isNative === 'string' && (isNative === 'true' || isNative === 'false')) {
                    this.nativeValue = JSON.parse(isNative.toLowerCase());
                }
                else if (typeof isNative === 'boolean') {
                    this.nativeValue = isNative;
                }
                else {
                    throw Error("Provided value in directive [native]=\"" + isNative + "\" is not boolean.");
                }
            },
            enumerable: false,
            configurable: true
        });
        FilesNativeDirective.prototype.ngAfterViewInit = function () {
            this.enableNative(this.nativeValue);
        };
        FilesNativeDirective.prototype.ngOnChanges = function (changes) {
            if ('native' in changes && changes['native'].currentValue !== changes['native'].previousValue) {
                this.enableNative(this.nativeValue);
            }
        };
        FilesNativeDirective.prototype.enableNative = function (isNative) {
            if (this.fileUpload && this.fileUpload.control) {
                this.fileUpload.control.native(isNative);
            }
        };
FilesNativeDirective.ɵfac = function FilesNativeDirective_Factory(t) { return new (t || FilesNativeDirective)(ɵngcc0.ɵɵdirectiveInject(FileUploadComponent, 11), ɵngcc0.ɵɵdirectiveInject(SimpleFileUploadComponent, 11)); };
FilesNativeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilesNativeDirective, selectors: [["file-upload", "native", ""]], hostVars: 1, hostBindings: function FilesNativeDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("native", ctx.native ? ctx.native : null);
    } }, inputs: { native: "native" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilesNativeDirective, [{
        type: core.Directive,
        args: [{
                selector: 'file-upload[native]',
                host: { '[attr.native]': 'native ? native : null' }
            }]
    }], function () { return [{ type: FileUploadComponent, decorators: [{
                type: core.Optional
            }, {
                type: core.Host
            }, {
                type: core.Self
            }] }, { type: SimpleFileUploadComponent, decorators: [{
                type: core.Optional
            }, {
                type: core.Host
            }, {
                type: core.Self
            }] }]; }, { native: [{
            type: core.Input
        }] }); })();
        return FilesNativeDirective;
    }());
    FilesNativeDirective.ctorParameters = function () { return [
        { type: FileUploadComponent, decorators: [{ type: core.Optional }, { type: core.Host }, { type: core.Self }] },
        { type: SimpleFileUploadComponent, decorators: [{ type: core.Optional }, { type: core.Host }, { type: core.Self }] }
    ]; };
    FilesNativeDirective.propDecorators = {
        native: [{ type: core.Input }]
    };

    /*
     * FileUpload
     *
     * By Ivan Pintar, http://www.pintar-ivan.com
     * Licensed under the MIT License
     * See https://github.com/pIvan/file-upload/blob/master/README.md
     */
    var FileUploadModule = /** @class */ (function () {
        function FileUploadModule() {
        }
        FileUploadModule.prototype.ngDoBootstrap = function () { };
FileUploadModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FileUploadModule });
FileUploadModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FileUploadModule_Factory(t) { return new (t || FileUploadModule)(); }, imports: [[
            common.CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FileUploadModule, { declarations: [FileUploadComponent, FileUploadListItemComponent, FileUploadIconComponent, FileUploadDropZoneComponent, FileUploadAttributeComponent, FileSizeValidator, FilesLimitValidator, FilesAcceptValidator, FilesAcceptDirective, FilesDiscardDirective, FilesNativeDirective, SimpleFileUploadComponent], imports: [ɵngcc1.CommonModule], exports: [FileUploadComponent, FileUploadDropZoneComponent, FileUploadListItemComponent, FileUploadAttributeComponent, FileSizeValidator, FilesLimitValidator, FilesAcceptValidator, FilesAcceptDirective, FilesDiscardDirective, SimpleFileUploadComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadModule, [{
        type: core.NgModule,
        args: [{
                imports: [
                    common.CommonModule
                ],
                declarations: [
                    FileUploadComponent,
                    FileUploadListItemComponent,
                    FileUploadIconComponent,
                    FileUploadDropZoneComponent,
                    FileUploadAttributeComponent,
                    FileSizeValidator,
                    FilesLimitValidator,
                    FilesAcceptValidator,
                    FilesAcceptDirective,
                    FilesDiscardDirective,
                    FilesNativeDirective,
                    SimpleFileUploadComponent
                ],
                exports: [
                    FileUploadComponent,
                    FileUploadDropZoneComponent,
                    FileUploadListItemComponent,
                    FileUploadAttributeComponent,
                    FileSizeValidator,
                    FilesLimitValidator,
                    FilesAcceptValidator,
                    FilesAcceptDirective,
                    FilesDiscardDirective,
                    SimpleFileUploadComponent
                ],
                entryComponents: [
                    FileUploadComponent
                ]
            }]
    }], function () { return []; }, null); })();
        return FileUploadModule;
    }());

    /*
     * Public API Surface of ngx-file-upload
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FileSizeValidator = FileSizeValidator;
    exports.FileUploadAttributeComponent = FileUploadAttributeComponent;
    exports.FileUploadComponent = FileUploadComponent;
    exports.FileUploadControl = FileUploadControl;
    exports.FileUploadDropZoneComponent = FileUploadDropZoneComponent;
    exports.FileUploadModule = FileUploadModule;
    exports.FileUploadService = FileUploadService;
    exports.FileUploadValidators = FileUploadValidators;
    exports.FilesAcceptDirective = FilesAcceptDirective;
    exports.FilesAcceptValidator = FilesAcceptValidator;
    exports.FilesDiscardDirective = FilesDiscardDirective;
    exports.FilesLimitValidator = FilesLimitValidator;
    exports.FilesNativeDirective = FilesNativeDirective;
    exports.SimpleFileUploadComponent = SimpleFileUploadComponent;
    exports.ɵa = FileUploadAbstract;
    exports.ɵb = ZoomAnimation;
    exports.ɵc = InsertAnimation;
    exports.ɵd = FileUploadListItemComponent;
    exports.ɵe = FileUploadIconComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=iplab-ngx-file-upload.umd.js.map