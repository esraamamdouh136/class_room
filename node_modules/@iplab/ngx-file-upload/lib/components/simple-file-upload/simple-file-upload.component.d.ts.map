{"version":3,"file":"simple-file-upload.component.d.ts","sources":["simple-file-upload.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { ElementRef, Renderer2, TemplateRef, ChangeDetectorRef } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { FileUploadControl } from './../../helpers/control.class';\r\nimport { FileUploadService } from './../../services/file-upload.service';\r\nimport { FileUploadAbstract } from './../file-upload-abstract.component';\r\nexport declare class SimpleFileUploadComponent extends FileUploadAbstract implements ControlValueAccessor {\r\n    fileUploadService: FileUploadService;\r\n    control: FileUploadControl;\r\n    buttonRef: TemplateRef<any>;\r\n    placeholderRef: TemplateRef<any>;\r\n    input: ElementRef<HTMLInputElement>;\r\n    label: ElementRef<HTMLLabelElement>;\r\n    protected isMultiple: boolean | string;\r\n    constructor(fileUploadService: FileUploadService, hostElementRef: ElementRef, renderer: Renderer2, cdr: ChangeDetectorRef);\r\n    get hasFiles(): boolean;\r\n    get isInvalid(): boolean;\r\n    onInputChange(event: Event): void;\r\n    /**\r\n     * model -> view changes\r\n     */\r\n    writeValue(files: any): void;\r\n    /**\r\n     * register function which will be called on UI change\r\n     * to update view -> model\r\n     */\r\n    registerOnChange(fn: (v: Array<File>) => void): void;\r\n    private onTouch;\r\n    registerOnTouched(fn: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    onKeyDown(event: KeyboardEvent): void;\r\n}\r\n"]}