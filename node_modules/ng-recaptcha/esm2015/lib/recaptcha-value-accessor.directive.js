import { Directive, forwardRef, HostListener } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { RecaptchaComponent } from "./recaptcha.component";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './recaptcha.component';
export class RecaptchaValueAccessorDirective {
    constructor(host) {
        this.host = host;
        this.requiresControllerReset = false;
    }
    writeValue(value) {
        if (!value) {
            this.host.reset();
        }
        else {
            // In this case, it is most likely that a form controller has requested to write a specific value into the component.
            // This isn't really a supported case - reCAPTCHA values are single-use, and, in a sense, readonly.
            // What this means is that the form controller has recaptcha control state of X, while reCAPTCHA itself can't "restore"
            // to that state. In order to make form controller aware of this discrepancy, and to fix the said misalignment,
            // we'll be telling the controller to "reset" the value back to null.
            if (this.host.__unsafe_widgetValue !== value &&
                Boolean(this.host.__unsafe_widgetValue) === false) {
                this.requiresControllerReset = true;
            }
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
        if (this.requiresControllerReset) {
            this.requiresControllerReset = false;
            this.onChange(null);
        }
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    onResolve($event) {
        if (this.onChange) {
            this.onChange($event);
        }
        if (this.onTouched) {
            this.onTouched();
        }
    }
}
RecaptchaValueAccessorDirective.ɵfac = function RecaptchaValueAccessorDirective_Factory(t) { return new (t || RecaptchaValueAccessorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RecaptchaComponent)); };
RecaptchaValueAccessorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RecaptchaValueAccessorDirective, selectors: [["re-captcha", "formControlName", ""], ["re-captcha", "formControl", ""], ["re-captcha", "ngModel", ""]], hostBindings: function RecaptchaValueAccessorDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("resolved", function RecaptchaValueAccessorDirective_resolved_HostBindingHandler($event) { return ctx.onResolve($event); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => RecaptchaValueAccessorDirective)
            },
        ])] });
RecaptchaValueAccessorDirective.ctorParameters = () => [
    { type: RecaptchaComponent }
];
RecaptchaValueAccessorDirective.propDecorators = {
    onResolve: [{ type: HostListener, args: ["resolved", ["$event"],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RecaptchaValueAccessorDirective, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => RecaptchaValueAccessorDirective)
                    },
                ],
                selector: "re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]"
            }]
    }], function () { return [{ type: ɵngcc1.RecaptchaComponent }]; }, { onResolve: [{
            type: HostListener,
            args: ["resolved", ["$event"]]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhLXZhbHVlLWFjY2Vzc29yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctcmVjYXB0Y2hhL3NyYy9saWIvcmVjYXB0Y2hhLXZhbHVlLWFjY2Vzc29yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXpFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7QUFhM0QsTUFBTSxPQUFPLCtCQUErQjtBQUFHLElBUzdDLFlBQW9CLElBQXdCO0FBQUksUUFBNUIsU0FBSSxHQUFKLElBQUksQ0FBb0I7QUFBQyxRQUZyQyw0QkFBdUIsR0FBRyxLQUFLLENBQUM7QUFDMUMsSUFDaUQsQ0FBQztBQUNsRCxJQUNTLFVBQVUsQ0FBQyxLQUFhO0FBQUksUUFDakMsSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNoQixZQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDeEIsU0FBSztBQUFDLGFBQUs7QUFDWCxZQUFNLHFIQUFxSDtBQUMzSCxZQUFNLG1HQUFtRztBQUN6RyxZQUFNLHVIQUF1SDtBQUM3SCxZQUFNLCtHQUErRztBQUNySCxZQUFNLHFFQUFxRTtBQUMzRSxZQUFNLElBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsS0FBSyxLQUFLO0FBQ2hELGdCQUFRLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssS0FBSyxFQUNqRDtBQUNSLGdCQUFRLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7QUFDNUMsYUFBTztBQUNQLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNTLGdCQUFnQixDQUFDLEVBQTJCO0FBQUksUUFDckQsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDdkIsUUFBSSxJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtBQUN0QyxZQUFNLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUM7QUFDM0MsWUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUFTLGlCQUFpQixDQUFDLEVBQWM7QUFBSSxRQUN6QyxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUN4QixJQUFFLENBQUM7QUFDSCxJQUMrQyxTQUFTLENBQUMsTUFBYztBQUFJLFFBQ3ZFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUN2QixZQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUIsU0FBSztBQUNMLFFBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQ3hCLFlBQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3ZCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDsyREEzREMsU0FBUyxTQUFDLGtCQUNULFNBQVMsRUFBRSxzQkFDVCwwQkFDRSxLQUFLLEVBQUUsSUFBSSwwQkFDWCxPQUFPO0FBQUUsaUJBQWlCLDBCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLCtCQUErQixDQUFDLHVCQUMvRCxtQkFDRixrQkFDRCxRQUFRLEVBQ04seUVBQXlFLGVBQzVFOzs7Ozs7OztlQUNJO0FBQUM7QUFBeUQsWUFidEQsa0JBQWtCO0FBQUc7QUFBRztBQUd2Qix3QkFrRFAsWUFBWSxTQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsQ0FBQztBQUFNOzs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIEhvc3RMaXN0ZW5lciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcblxuaW1wb3J0IHsgUmVjYXB0Y2hhQ29tcG9uZW50IH0gZnJvbSBcIi4vcmVjYXB0Y2hhLmNvbXBvbmVudFwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgbXVsdGk6IHRydWUsXG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFJlY2FwdGNoYVZhbHVlQWNjZXNzb3JEaXJlY3RpdmUpLFxuICAgIH0sXG4gIF0sXG4gIHNlbGVjdG9yOlxuICAgIFwicmUtY2FwdGNoYVtmb3JtQ29udHJvbE5hbWVdLHJlLWNhcHRjaGFbZm9ybUNvbnRyb2xdLHJlLWNhcHRjaGFbbmdNb2RlbF1cIixcbn0pXG5leHBvcnQgY2xhc3MgUmVjYXB0Y2hhVmFsdWVBY2Nlc3NvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcml2YXRlIG9uQ2hhbmdlOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcblxuICAvKiogQGludGVybmFsICovXG4gIHByaXZhdGUgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xuXG4gIHByaXZhdGUgcmVxdWlyZXNDb250cm9sbGVyUmVzZXQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGhvc3Q6IFJlY2FwdGNoYUNvbXBvbmVudCkge31cblxuICBwdWJsaWMgd3JpdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgdGhpcy5ob3N0LnJlc2V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgaXQgaXMgbW9zdCBsaWtlbHkgdGhhdCBhIGZvcm0gY29udHJvbGxlciBoYXMgcmVxdWVzdGVkIHRvIHdyaXRlIGEgc3BlY2lmaWMgdmFsdWUgaW50byB0aGUgY29tcG9uZW50LlxuICAgICAgLy8gVGhpcyBpc24ndCByZWFsbHkgYSBzdXBwb3J0ZWQgY2FzZSAtIHJlQ0FQVENIQSB2YWx1ZXMgYXJlIHNpbmdsZS11c2UsIGFuZCwgaW4gYSBzZW5zZSwgcmVhZG9ubHkuXG4gICAgICAvLyBXaGF0IHRoaXMgbWVhbnMgaXMgdGhhdCB0aGUgZm9ybSBjb250cm9sbGVyIGhhcyByZWNhcHRjaGEgY29udHJvbCBzdGF0ZSBvZiBYLCB3aGlsZSByZUNBUFRDSEEgaXRzZWxmIGNhbid0IFwicmVzdG9yZVwiXG4gICAgICAvLyB0byB0aGF0IHN0YXRlLiBJbiBvcmRlciB0byBtYWtlIGZvcm0gY29udHJvbGxlciBhd2FyZSBvZiB0aGlzIGRpc2NyZXBhbmN5LCBhbmQgdG8gZml4IHRoZSBzYWlkIG1pc2FsaWdubWVudCxcbiAgICAgIC8vIHdlJ2xsIGJlIHRlbGxpbmcgdGhlIGNvbnRyb2xsZXIgdG8gXCJyZXNldFwiIHRoZSB2YWx1ZSBiYWNrIHRvIG51bGwuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuaG9zdC5fX3Vuc2FmZV93aWRnZXRWYWx1ZSAhPT0gdmFsdWUgJiZcbiAgICAgICAgQm9vbGVhbih0aGlzLmhvc3QuX191bnNhZmVfd2lkZ2V0VmFsdWUpID09PSBmYWxzZVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMucmVxdWlyZXNDb250cm9sbGVyUmVzZXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgICBpZiAodGhpcy5yZXF1aXJlc0NvbnRyb2xsZXJSZXNldCkge1xuICAgICAgdGhpcy5yZXF1aXJlc0NvbnRyb2xsZXJSZXNldCA9IGZhbHNlO1xuICAgICAgdGhpcy5vbkNoYW5nZShudWxsKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoXCJyZXNvbHZlZFwiLCBbXCIkZXZlbnRcIl0pIHB1YmxpYyBvblJlc29sdmUoJGV2ZW50OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xuICAgICAgdGhpcy5vbkNoYW5nZSgkZXZlbnQpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vblRvdWNoZWQpIHtcbiAgICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gICAgfVxuICB9XG59XG4iXX0=