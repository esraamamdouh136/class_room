import { Component, ContentChild, EventEmitter, HostListener, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { TreeModel } from '../models/tree.model';
import { TreeDraggedElement } from '../models/tree-dragged-element.model';
import { TreeViewportComponent } from './tree-viewport.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../models/tree.model';
import * as ɵngcc2 from '../models/tree-dragged-element.model';
import * as ɵngcc3 from './tree-viewport.component';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from './tree-node-collection.component';
import * as ɵngcc6 from './tree-node-drop-slot.component';

const _c0 = ["loadingTemplate"];
const _c1 = ["treeNodeTemplate"];
const _c2 = ["treeNodeWrapperTemplate"];
const _c3 = ["treeNodeFullTemplate"];
const _c4 = ["viewport"];
const _c5 = function (a0, a1, a2, a3) { return { loadingTemplate: a0, treeNodeTemplate: a1, treeNodeWrapperTemplate: a2, treeNodeFullTemplate: a3 }; };
function TreeComponent_tree_node_collection_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tree-node-collection", 4);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("nodes", ctx_r1.treeModel.roots)("treeModel", ctx_r1.treeModel)("templates", ɵngcc0.ɵɵpureFunction4(3, _c5, ctx_r1.loadingTemplate, ctx_r1.treeNodeTemplate, ctx_r1.treeNodeWrapperTemplate, ctx_r1.treeNodeFullTemplate));
} }
function TreeComponent_tree_node_drop_slot_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tree-node-drop-slot", 5);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("dropIndex", 0)("node", ctx_r2.treeModel.virtualRoot);
} }
export class TreeComponent {
    constructor(treeModel, treeDraggedElement) {
        this.treeModel = treeModel;
        this.treeDraggedElement = treeDraggedElement;
        treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());
        treeModel.subscribeToState((state) => this.stateChange.emit(state));
    }
    // Will be handled in ngOnChanges
    set nodes(nodes) {
    }
    ;
    set options(options) {
    }
    ;
    set focused(value) {
        this.treeModel.setFocus(value);
    }
    set state(state) {
        this.treeModel.setState(state);
    }
    onKeydown($event) {
        if (!this.treeModel.isFocused)
            return;
        if (['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase()))
            return;
        const focusedNode = this.treeModel.getFocusedNode();
        this.treeModel.performKeyAction(focusedNode, $event);
    }
    onMousedown($event) {
        function isOutsideClick(startElement, nodeName) {
            return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);
        }
        if (isOutsideClick($event.target, 'tree-root')) {
            this.treeModel.setFocus(false);
        }
    }
    ngOnChanges(changes) {
        if (changes.options || changes.nodes) {
            this.treeModel.setData({
                options: changes.options && changes.options.currentValue,
                nodes: changes.nodes && changes.nodes.currentValue,
                events: this.pick(this, this.treeModel.eventNames)
            });
        }
    }
    sizeChanged() {
        this.viewportComponent.setViewport();
    }
    pick(object, keys) {
        return keys.reduce((obj, key) => {
            if (object && object.hasOwnProperty(key)) {
                obj[key] = object[key];
            }
            return obj;
        }, {});
    }
}
TreeComponent.ɵfac = function TreeComponent_Factory(t) { return new (t || TreeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TreeModel), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TreeDraggedElement)); };
TreeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeComponent, selectors: [["Tree"], ["tree-root"]], contentQueries: function TreeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c3, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeWrapperTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeFullTemplate = _t.first);
    } }, viewQuery: function TreeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c4, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.viewportComponent = _t.first);
    } }, hostBindings: function TreeComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function TreeComponent_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); }, false, ɵngcc0.ɵɵresolveBody)("mousedown", function TreeComponent_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); }, false, ɵngcc0.ɵɵresolveBody);
    } }, inputs: { nodes: "nodes", options: "options", focused: "focused", state: "state" }, outputs: { toggleExpanded: "toggleExpanded", activate: "activate", deactivate: "deactivate", nodeActivate: "nodeActivate", nodeDeactivate: "nodeDeactivate", select: "select", deselect: "deselect", focus: "focus", blur: "blur", updateData: "updateData", initialized: "initialized", moveNode: "moveNode", copyNode: "copyNode", loadNodeChildren: "loadNodeChildren", changeFilter: "changeFilter", event: "event", stateChange: "stateChange" }, features: [ɵngcc0.ɵɵProvidersFeature([TreeModel]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 6, consts: [["viewport", ""], [1, "angular-tree-component"], [3, "nodes", "treeModel", "templates", 4, "ngIf"], ["class", "empty-tree-drop-slot", 3, "dropIndex", "node", 4, "ngIf"], [3, "nodes", "treeModel", "templates"], [1, "empty-tree-drop-slot", 3, "dropIndex", "node"]], template: function TreeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "tree-viewport", null, 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵtemplate(3, TreeComponent_tree_node_collection_3_Template, 1, 8, "tree-node-collection", 2);
        ɵngcc0.ɵɵtemplate(4, TreeComponent_tree_node_drop_slot_4_Template, 1, 2, "tree-node-drop-slot", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("node-dragging", ctx.treeDraggedElement.isDragging())("angular-tree-component-rtl", ctx.treeModel.options.rtl);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.treeModel.roots);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.treeModel.isEmptyTree());
    } }, directives: [ɵngcc3.TreeViewportComponent, ɵngcc4.NgIf, ɵngcc5.TreeNodeCollectionComponent, ɵngcc6.TreeNodeDropSlot], encapsulation: 2 });
/** @nocollapse */
TreeComponent.ctorParameters = () => [
    { type: TreeModel },
    { type: TreeDraggedElement }
];
TreeComponent.propDecorators = {
    loadingTemplate: [{ type: ContentChild, args: ['loadingTemplate', { static: false },] }],
    treeNodeTemplate: [{ type: ContentChild, args: ['treeNodeTemplate', { static: false },] }],
    treeNodeWrapperTemplate: [{ type: ContentChild, args: ['treeNodeWrapperTemplate', { static: false },] }],
    treeNodeFullTemplate: [{ type: ContentChild, args: ['treeNodeFullTemplate', { static: false },] }],
    viewportComponent: [{ type: ViewChild, args: ['viewport', { static: false },] }],
    nodes: [{ type: Input }],
    options: [{ type: Input }],
    focused: [{ type: Input }],
    state: [{ type: Input }],
    toggleExpanded: [{ type: Output }],
    activate: [{ type: Output }],
    deactivate: [{ type: Output }],
    nodeActivate: [{ type: Output }],
    nodeDeactivate: [{ type: Output }],
    select: [{ type: Output }],
    deselect: [{ type: Output }],
    focus: [{ type: Output }],
    blur: [{ type: Output }],
    updateData: [{ type: Output }],
    initialized: [{ type: Output }],
    moveNode: [{ type: Output }],
    copyNode: [{ type: Output }],
    loadNodeChildren: [{ type: Output }],
    changeFilter: [{ type: Output }],
    event: [{ type: Output }],
    stateChange: [{ type: Output }],
    onKeydown: [{ type: HostListener, args: ['body: keydown', ['$event'],] }],
    onMousedown: [{ type: HostListener, args: ['body: mousedown', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeComponent, [{
        type: Component,
        args: [{
                selector: 'Tree, tree-root',
                providers: [TreeModel],
                template: `
      <tree-viewport #viewport>
          <div
                  class="angular-tree-component"
                  [class.node-dragging]="treeDraggedElement.isDragging()"
                  [class.angular-tree-component-rtl]="treeModel.options.rtl">
              <tree-node-collection
                      *ngIf="treeModel.roots"
                      [nodes]="treeModel.roots"
                      [treeModel]="treeModel"
                      [templates]="{
            loadingTemplate: loadingTemplate,
            treeNodeTemplate: treeNodeTemplate,
            treeNodeWrapperTemplate: treeNodeWrapperTemplate,
            treeNodeFullTemplate: treeNodeFullTemplate
          }">
              </tree-node-collection>
              <tree-node-drop-slot
                      class="empty-tree-drop-slot"
                      *ngIf="treeModel.isEmptyTree()"
                      [dropIndex]="0"
                      [node]="treeModel.virtualRoot">
              </tree-node-drop-slot>
          </div>
      </tree-viewport>
  `
            }]
    }], function () { return [{ type: ɵngcc1.TreeModel }, { type: ɵngcc2.TreeDraggedElement }]; }, { nodes: [{
            type: Input
        }], options: [{
            type: Input
        }], focused: [{
            type: Input
        }], state: [{
            type: Input
        }], onKeydown: [{
            type: HostListener,
            args: ['body: keydown', ['$event']]
        }], onMousedown: [{
            type: HostListener,
            args: ['body: mousedown', ['$event']]
        }], loadingTemplate: [{
            type: ContentChild,
            args: ['loadingTemplate', { static: false }]
        }], treeNodeTemplate: [{
            type: ContentChild,
            args: ['treeNodeTemplate', { static: false }]
        }], treeNodeWrapperTemplate: [{
            type: ContentChild,
            args: ['treeNodeWrapperTemplate', { static: false }]
        }], treeNodeFullTemplate: [{
            type: ContentChild,
            args: ['treeNodeFullTemplate', { static: false }]
        }], viewportComponent: [{
            type: ViewChild,
            args: ['viewport', { static: false }]
        }], toggleExpanded: [{
            type: Output
        }], activate: [{
            type: Output
        }], deactivate: [{
            type: Output
        }], nodeActivate: [{
            type: Output
        }], nodeDeactivate: [{
            type: Output
        }], select: [{
            type: Output
        }], deselect: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], updateData: [{
            type: Output
        }], initialized: [{
            type: Output
        }], moveNode: [{
            type: Output
        }], copyNode: [{
            type: Output
        }], loadNodeChildren: [{
            type: Output
        }], changeFilter: [{
            type: Output
        }], event: [{
            type: Output
        }], stateChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,