import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TreeMobxAutorunDirective } from './mobx-angular/tree-mobx-autorun.directive';
import { TREE_ACTIONS } from './models/tree-options.model';
import { KEYS } from './constants/keys';
import { TreeModel } from './models/tree.model';
import { TreeNode } from './models/tree-node.model';
import { TreeDraggedElement } from './models/tree-dragged-element.model';
import { TreeVirtualScroll } from './models/tree-virtual-scroll.model';
import { LoadingComponent } from './components/loading.component';
import { TreeComponent } from './components/tree.component';
import { TreeNodeComponent } from './components/tree-node.component';
import { TreeNodeContent } from './components/tree-node-content.component';
import { TreeNodeDropSlot } from './components/tree-node-drop-slot.component';
import { TreeNodeExpanderComponent } from './components/tree-node-expander.component';
import { TreeNodeChildrenComponent } from './components/tree-node-children.component';
import { TreeNodeCollectionComponent } from './components/tree-node-collection.component';
import { TreeNodeWrapperComponent } from './components/tree-node-wrapper.component';
import { TreeViewportComponent } from './components/tree-viewport.component';
import { TreeNodeCheckboxComponent } from './components/tree-node-checkbox.component';
import { TreeDropDirective } from './directives/tree-drop.directive';
import { TreeDragDirective } from './directives/tree-drag.directive';
import { TreeAnimateOpenDirective } from './directives/tree-animate-open.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
export class TreeModule {
}
TreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TreeModule });
TreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TreeModule_Factory(t) { return new (t || TreeModule)(); }, providers: [], imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeModule, { declarations: function () { return [TreeComponent,
        TreeNodeComponent,
        TreeNodeContent,
        LoadingComponent,
        TreeDropDirective,
        TreeDragDirective,
        TreeNodeExpanderComponent,
        TreeNodeChildrenComponent,
        TreeNodeDropSlot,
        TreeNodeCollectionComponent,
        TreeViewportComponent,
        TreeNodeWrapperComponent,
        TreeNodeCheckboxComponent,
        TreeAnimateOpenDirective,
        TreeMobxAutorunDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [TreeComponent,
        TreeNodeComponent,
        TreeNodeContent,
        LoadingComponent,
        TreeDropDirective,
        TreeDragDirective,
        TreeNodeExpanderComponent,
        TreeNodeChildrenComponent,
        TreeNodeDropSlot,
        TreeNodeCollectionComponent,
        TreeViewportComponent,
        TreeNodeWrapperComponent,
        TreeNodeCheckboxComponent,
        TreeAnimateOpenDirective,
        TreeMobxAutorunDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    TreeComponent,
                    TreeNodeComponent,
                    TreeNodeContent,
                    LoadingComponent,
                    TreeDropDirective,
                    TreeDragDirective,
                    TreeNodeExpanderComponent,
                    TreeNodeChildrenComponent,
                    TreeNodeDropSlot,
                    TreeNodeCollectionComponent,
                    TreeViewportComponent,
                    TreeNodeWrapperComponent,
                    TreeNodeCheckboxComponent,
                    TreeAnimateOpenDirective,
                    TreeMobxAutorunDirective
                ],
                exports: [
                    TreeComponent,
                    TreeNodeComponent,
                    TreeNodeContent,
                    LoadingComponent,
                    TreeDropDirective,
                    TreeDragDirective,
                    TreeNodeExpanderComponent,
                    TreeNodeChildrenComponent,
                    TreeNodeDropSlot,
                    TreeNodeCollectionComponent,
                    TreeViewportComponent,
                    TreeNodeWrapperComponent,
                    TreeNodeCheckboxComponent,
                    TreeAnimateOpenDirective,
                    TreeMobxAutorunDirective
                ],
                imports: [CommonModule],
                providers: []
            }]
    }], null, null); })();
ɵngcc0.ɵɵsetComponentScope(TreeNodeCollectionComponent, [TreeMobxAutorunDirective, ɵngcc1.NgForOf, TreeNodeComponent], []);
export { TreeModel, TreeNode, TreeDraggedElement, TreeVirtualScroll, TREE_ACTIONS, KEYS, LoadingComponent, TreeAnimateOpenDirective, TreeComponent, TreeNodeComponent, TreeNodeWrapperComponent, TreeNodeContent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent, TreeNodeCheckboxComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,